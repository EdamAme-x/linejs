//
// Autogenerated by Thrift Compiler (0.20.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

type Int64 = number;
import type { Buffer } from "node:buffer";

export declare enum ApplicationType {
	IOS = 16,
	IOS_RC = 17,
	IOS_BETA = 18,
	IOS_ALPHA = 19,
	ANDROID = 32,
	ANDROID_RC = 33,
	ANDROID_BETA = 34,
	ANDROID_ALPHA = 35,
	WAP = 48,
	WAP_RC = 49,
	WAP_BETA = 50,
	WAP_ALPHA = 51,
	BOT = 64,
	BOT_RC = 65,
	BOT_BETA = 66,
	BOT_ALPHA = 67,
	WEB = 80,
	WEB_RC = 81,
	WEB_BETA = 82,
	WEB_ALPHA = 83,
	DESKTOPWIN = 96,
	DESKTOPWIN_RC = 97,
	DESKTOPWIN_BETA = 98,
	DESKTOPWIN_ALPHA = 99,
	DESKTOPMAC = 112,
	DESKTOPMAC_RC = 113,
	DESKTOPMAC_BETA = 114,
	DESKTOPMAC_ALPHA = 115,
	CHANNELGW = 128,
	CHANNELGW_RC = 129,
	CHANNELGW_BETA = 130,
	CHANNELGW_ALPHA = 131,
	CHANNELCP = 144,
	CHANNELCP_RC = 145,
	CHANNELCP_BETA = 146,
	CHANNELCP_ALPHA = 147,
	WINPHONE = 160,
	WINPHONE_RC = 161,
	WINPHONE_BETA = 162,
	WINPHONE_ALPHA = 163,
	BLACKBERRY = 176,
	BLACKBERRY_RC = 177,
	BLACKBERRY_BETA = 178,
	BLACKBERRY_ALPHA = 179,
	WINMETRO = 192,
	WINMETRO_RC = 193,
	WINMETRO_BETA = 194,
	WINMETRO_ALPHA = 195,
	S40 = 208,
	S40_RC = 209,
	S40_BETA = 210,
	S40_ALPHA = 211,
	CHRONO = 224,
	CHRONO_RC = 225,
	CHRONO_BETA = 226,
	CHRONO_ALPHA = 227,
	TIZEN = 256,
	TIZEN_RC = 257,
	TIZEN_BETA = 258,
	TIZEN_ALPHA = 259,
	VIRTUAL = 272,
	FIREFOXOS = 288,
	FIREFOXOS_RC = 289,
	FIREFOXOS_BETA = 290,
	FIREFOXOS_ALPHA = 291,
	IOSIPAD = 304,
	IOSIPAD_RC = 305,
	IOSIPAD_BETA = 306,
	IOSIPAD_ALPHA = 307,
	BIZIOS = 320,
	BIZIOS_RC = 321,
	BIZIOS_BETA = 322,
	BIZIOS_ALPHA = 323,
	BIZANDROID = 336,
	BIZANDROID_RC = 337,
	BIZANDROID_BETA = 338,
	BIZANDROID_ALPHA = 339,
	BIZBOT = 352,
	BIZBOT_RC = 353,
	BIZBOT_BETA = 354,
	BIZBOT_ALPHA = 355,
	CHROMEOS = 368,
	CHROMEOS_RC = 369,
	CHROMEOS_BETA = 370,
	CHROMEOS_ALPHA = 371,
	ANDROIDLITE = 384,
	ANDROIDLITE_RC = 385,
	ANDROIDLITE_BETA = 386,
	ANDROIDLITE_ALPHA = 387,
	WIN10 = 400,
	WIN10_RC = 401,
	WIN10_BETA = 402,
	WIN10_ALPHA = 403,
	BIZWEB = 416,
	BIZWEB_RC = 417,
	BIZWEB_BETA = 418,
	BIZWEB_ALPHA = 419,
	DUMMYPRIMARY = 432,
	DUMMYPRIMARY_RC = 433,
	DUMMYPRIMARY_BETA = 434,
	DUMMYPRIMARY_ALPHA = 435,
	SQUARE = 448,
	SQUARE_RC = 449,
	SQUARE_BETA = 450,
	SQUARE_ALPHA = 451,
	INTERNAL = 464,
	INTERNAL_RC = 465,
	INTERNAL_BETA = 466,
	INTERNAL_ALPHA = 467,
	CLOVAFRIENDS = 480,
	CLOVAFRIENDS_RC = 481,
	CLOVAFRIENDS_BETA = 482,
	CLOVAFRIENDS_ALPHA = 483,
	WATCHOS = 496,
	WATCHOS_RC = 497,
	WATCHOS_BETA = 498,
	WATCHOS_ALPHA = 499,
	OPENCHAT_PLUG = 512,
	OPENCHAT_PLUG_RC = 513,
	OPENCHAT_PLUG_BETA = 514,
	OPENCHAT_PLUG_ALPHA = 515,
	ANDROIDSECONDARY = 528,
	ANDROIDSECONDARY_RC = 529,
	ANDROIDSECONDARY_BETA = 530,
	ANDROIDSECONDARY_ALPHA = 531,
	WEAROS = 544,
	WEAROS_RC = 545,
	WEAROS_BETA = 546,
	WEAROS_ALPHA = 547,
}

export declare enum ErrorCode {
	ILLEGAL_ARGUMENT = 0,
	AUTHENTICATION_FAILED = 1,
	DB_FAILED = 2,
	INVALID_STATE = 3,
	EXCESSIVE_ACCESS = 4,
	NOT_FOUND = 5,
	INVALID_LENGTH = 6,
	NOT_AVAILABLE_USER = 7,
	NOT_AUTHORIZED_DEVICE = 8,
	INVALID_MID = 9,
	NOT_A_MEMBER = 10,
	INCOMPATIBLE_APP_VERSION = 11,
	NOT_READY = 12,
	NOT_AVAILABLE_SESSION = 13,
	NOT_AUTHORIZED_SESSION = 14,
	SYSTEM_ERROR = 15,
	NO_AVAILABLE_VERIFICATION_METHOD = 16,
	NOT_AUTHENTICATED = 17,
	INVALID_IDENTITY_CREDENTIAL = 18,
	NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
	INTERNAL_ERROR = 20,
	NO_SUCH_IDENTITY_IDENFIER = 21,
	DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
	ILLEGAL_IDENTITY_CREDENTIAL = 23,
	UNKNOWN_CHANNEL = 24,
	NO_SUCH_MESSAGE_BOX = 25,
	NOT_AVAILABLE_MESSAGE_BOX = 26,
	CHANNEL_DOES_NOT_MATCH = 27,
	NOT_YOUR_MESSAGE = 28,
	MESSAGE_DEFINED_ERROR = 29,
	USER_CANNOT_ACCEPT_PRESENTS = 30,
	USER_NOT_STICKER_OWNER = 32,
	MAINTENANCE_ERROR = 33,
	ACCOUNT_NOT_MATCHED = 34,
	ABUSE_BLOCK = 35,
	NOT_FRIEND = 36,
	NOT_ALLOWED_CALL = 37,
	BLOCK_FRIEND = 38,
	INCOMPATIBLE_VOIP_VERSION = 39,
	INVALID_SNS_ACCESS_TOKEN = 40,
	EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
	NOT_ALLOWED_ADD_CONTACT = 42,
	NOT_CERTIFICATED = 43,
	NOT_ALLOWED_SECONDARY_DEVICE = 44,
	INVALID_PIN_CODE = 45,
	NOT_FOUND_IDENTITY_CREDENTIAL = 46,
	EXCEED_FILE_MAX_SIZE = 47,
	EXCEED_DAILY_QUOTA = 48,
	NOT_SUPPORT_SEND_FILE = 49,
	MUST_UPGRADE = 50,
	NOT_AVAILABLE_PIN_CODE_SESSION = 51,
	EXPIRED_REVISION = 52,
	NOT_YET_PHONE_NUMBER = 54,
	BAD_CALL_NUMBER = 55,
	UNAVAILABLE_CALL_NUMBER = 56,
	NOT_SUPPORT_CALL_SERVICE = 57,
	CONGESTION_CONTROL = 58,
	NO_BALANCE = 59,
	NOT_PERMITTED_CALLER_ID = 60,
	NO_CALLER_ID_LIMIT_EXCEEDED = 61,
	CALLER_ID_VERIFICATION_REQUIRED = 62,
	NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63,
	MESSAGE_NOT_FOUND = 64,
	INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65,
	ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66,
	ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67,
	INVALID_PASSWORD_FORMAT = 69,
	FEATURE_RESTRICTED = 70,
	MESSAGE_NOT_DESTRUCTIBLE = 71,
	PAID_CALL_REDEEM_FAILED = 72,
	PREVENTED_JOIN_BY_TICKET = 73,
	SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75,
	SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76,
	SECURITY_CENTER_NOT_VERIFIED = 77,
	SECURITY_CENTER_BLOCKED_BY_SETTING = 78,
	SECURITY_CENTER_BLOCKED = 79,
	TALK_PROXY_EXCEPTION = 80,
	E2EE_INVALID_PROTOCOL = 81,
	E2EE_RETRY_ENCRYPT = 82,
	E2EE_UPDATE_SENDER_KEY = 83,
	E2EE_UPDATE_RECEIVER_KEY = 84,
	E2EE_INVALID_ARGUMENT = 85,
	E2EE_INVALID_VERSION = 86,
	E2EE_SENDER_DISABLED = 87,
	E2EE_RECEIVER_DISABLED = 88,
	E2EE_SENDER_NOT_ALLOWED = 89,
	E2EE_RECEIVER_NOT_ALLOWED = 90,
	E2EE_RESEND_FAIL = 91,
	E2EE_RESEND_OK = 92,
	HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93,
	E2EE_UPDATE_PRIMARY_DEVICE = 94,
	SUCCESS = 95,
	CANCEL = 96,
	E2EE_PRIMARY_NOT_SUPPORT = 97,
	E2EE_RETRY_PLAIN = 98,
	E2EE_RECREATE_GROUP_KEY = 99,
	E2EE_GROUP_TOO_MANY_MEMBERS = 100,
	SERVER_BUSY = 101,
	NOT_ALLOWED_ADD_FOLLOW = 102,
	INCOMING_FRIEND_REQUEST_LIMIT = 103,
	OUTGOING_FRIEND_REQUEST_LIMIT = 104,
	OUTGOING_FRIEND_REQUEST_QUOTA = 105,
	DUPLICATED = 106,
	BANNED = 107,
	NOT_AN_INVITEE = 108,
	NOT_AN_OUTSIDER = 109,
	EMPTY_GROUP = 111,
	EXCEED_FOLLOW_LIMIT = 112,
	UNSUPPORTED_ACCOUNT_TYPE = 113,
	AGREEMENT_REQUIRED = 114,
	SHOULD_RETRY = 115,
	OVER_MAX_CHATS_PER_USER = 116,
	NOT_AVAILABLE_API = 117,
	INVALID_OTP = 118,
	MUST_REFRESH_V3_TOKEN = 119,
	ALREADY_EXPIRED = 120,
	USER_NOT_STICON_OWNER = 121,
	REFRESH_MEDIA_FLOW = 122,
	EXCEED_FOLLOWER_LIMIT = 123,
}

export declare enum LiffErrorCode {
	INVALID_REQUEST = 1,
	UNAUTHORIZED = 2,
	CONSENT_REQUIRED = 3,
	VERSION_UPDATE_REQUIRED = 4,
	COMPREHENSIVE_AGREEMENT_REQUIRED = 5,
	SPLASH_SCREEN_REQUIRED = 6,
	SERVER_ERROR = 100,
}

export declare enum ChannelErrorCode {
	ILLEGAL_ARGUMENT = 0,
	INTERNAL_ERROR = 1,
	CONNECTION_ERROR = 2,
	AUTHENTICATIONI_FAILED = 3,
	NEED_PERMISSION_APPROVAL = 4,
	COIN_NOT_USABLE = 5,
	WEBVIEW_NOT_ALLOWED = 6,
}

export declare enum PreconditionFailedExtraInfo {
	DUPLICATED_DISPLAY_NAME = 0,
}

export declare enum SquareErrorCode {
	UNKNOWN = 0,
	INTERNAL_ERROR = 500,
	NOT_IMPLEMENTED = 501,
	TRY_AGAIN_LATER = 503,
	MAINTENANCE = 505,
	NO_PRESENCE_EXISTS = 506,
	ILLEGAL_ARGUMENT = 400,
	AUTHENTICATION_FAILURE = 401,
	FORBIDDEN = 403,
	NOT_FOUND = 404,
	REVISION_MISMATCH = 409,
	PRECONDITION_FAILED = 410,
}

export declare enum HomeExceptionCode {
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	NOT_FOUND = 3,
	RETRY_LATER = 4,
	HUMAN_VERIFICATION_REQUIRED = 5,
	INVALID_CONTEXT = 100,
	APP_UPGRADE_REQUIRED = 101,
	NO_CONTENT = 102,
}

export declare enum ChatappErrorCode {
	INVALID_REQUEST = 1,
	UNAUTHORIZED = 2,
	SERVER_ERROR = 100,
}

export declare enum MembershipErrorCode {
	ILLEGAL_ARGUMENT = 0,
	AUTHENTICATION_FAILED = 1,
	NOT_FOUND = 5,
	INTERNAL_ERROR = 20,
	MAINTENANCE_ERROR = 33,
}

export declare enum BotErrorCode {
	UNKNOWN = 0,
	BOT_NOT_FOUND = 1,
	BOT_NOT_AVAILABLE = 2,
	NOT_A_MEMBER = 3,
	AUTHENTICATION_FAILED = 401,
	ILLEGAL_ARGUMENT = 400,
	INTERNAL_ERROR = 500,
}

export declare enum BotExternalErrorCode {
	ILLEGAL_ARGUMENT = 0,
	INTERNAL_ERROR = 1,
}

export declare enum AccessTokenRefreshErrorCode {
	INVALID_REQUEST = 1000,
	RETRY_REQUIRED = 1001,
}

export declare enum AccountEapConnectErrorCode {
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	RETRY_LATER = 4,
	HUMAN_VERIFICATION_REQUIRED = 5,
	APP_UPGRADE_REQUIRED = 101,
}

export declare enum PwlessCredentialErrorCode {
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	EXTERNAL_SERVICE_UNAVAILABLE = 3,
	RETRY_LATER = 4,
	INVALID_CONTEXT = 100,
	NOT_SUPPORTED = 101,
	FORBIDDEN = 102,
	FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR = 201,
}

export declare enum SecondAuthFactorPinCodeErrorCode {
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	RETRY_LATER = 3,
	INVALID_CONTEXT = 100,
	APP_UPGRADE_REQUIRED = 101,
}

export declare enum AuthErrorCode {
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	NOT_FOUND = 3,
	RETRY_LATER = 4,
	HUMAN_VERIFICATION_REQUIRED = 5,
	INVALID_CONTEXT = 100,
	APP_UPGRADE_REQUIRED = 101,
}

export declare enum SecondaryPwlessLoginErrorCode {
	INTERNAL_ERROR = 0,
	VERIFICATION_FAILED = 1,
	LOGIN_NOT_ALLOWED = 2,
	EXTERNAL_SERVICE_UNAVAILABLE = 3,
	RETRY_LATER = 4,
	NOT_SUPPORTED = 100,
	ILLEGAL_ARGUMENT = 101,
	INVALID_CONTEXT = 102,
	FORBIDDEN = 103,
	FIDO_UNKNOWN_CREDENTIAL_ID = 200,
	FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR = 201,
	FIDO_UNACCEPTABLE_CONTENT = 202,
}

export declare enum SecondaryQrCodeErrorCode {
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	NOT_ALLOWED_QR_CODE_LOGIN = 3,
	VERIFICATION_NOTICE_FAILED = 4,
	RETRY_LATER = 5,
	INVALID_CONTEXT = 100,
	APP_UPGRADE_REQUIRED = 101,
}

export declare enum PaymentErrorCode {
	SUCCESS = 0,
	GENERAL_USER_ERROR = 1000,
	ACCOUNT_NOT_EXISTS = 1101,
	ACCOUNT_INVALID_STATUS = 1102,
	ACCOUNT_ALREADY_EXISTS = 1103,
	MERCHANT_NOT_EXISTS = 1104,
	MERCHANT_INVALID_STATUS = 1105,
	AGREEMENT_REQUIRED = 1107,
	BLACKLISTED = 1108,
	WRONG_PASSWORD = 1109,
	INVALID_CREDIT_CARD = 1110,
	LIMIT_EXCEEDED = 1111,
	CANNOT_PROCEED = 1115,
	TOO_WEAK_PASSWORD = 1120,
	CANNOT_CREATE_ACCOUNT = 1125,
	TEMPORARY_PASSWORD_ERROR = 1130,
	MISSING_PARAMETERS = 1140,
	NO_VALID_MYCODE_ACCOUNT = 1141,
	INSUFFICIENT_BALANCE = 1142,
	TRANSACTION_NOT_FOUND = 1150,
	TRANSACTION_FINISHED = 1152,
	PAYMENT_AMOUNT_WRONG = 1153,
	BALANCE_ACCOUNT_NOT_EXISTS = 1157,
	DUPLICATED_CITIZEN_ID = 1158,
	PAYMENT_REQUEST_NOT_FOUND = 1159,
	AUTH_FAILED = 1169,
	PASSWORD_SETTING_REQUIRED = 1171,
	TRANSACTION_ALREADY_PROCESSED = 1172,
	CURRENCY_NOT_SUPPORTED = 1178,
	PAYMENT_NOT_AVAILABLE = 1180,
	TRANSFER_REQUEST_NOT_FOUND = 1181,
	INVALID_PAYMENT_AMOUNT = 1183,
	INSUFFICIENT_PAYMENT_AMOUNT = 1184,
	EXTERNAL_SYSTEM_MAINTENANCE = 1185,
	EXTERNAL_SYSTEM_INOPERATIONAL = 1186,
	SESSION_EXPIRED = 1192,
	UPGRADE_REQUIRED = 1195,
	REQUEST_TOKEN_EXPIRED = 1196,
	OPERATION_FINISHED = 1198,
	EXTERNAL_SYSTEM_ERROR = 1199,
	PARTIAL_AMOUNT_APPROVED = 1299,
	PINCODE_AUTH_REQUIRED = 1600,
	ADDITIONAL_AUTH_REQUIRED = 1601,
	NOT_BOUND = 1603,
	OTP_USER_REGISTRATION_ERROR = 1610,
	OTP_CARD_REGISTRATION_ERROR = 1611,
	NO_AUTH_METHOD = 1612,
	GENERAL_USER_ERROR_RESTART = 1696,
	GENERAL_USER_ERROR_REFRESH = 1697,
	GENERAL_USER_ERROR_CLOSE = 1698,
	INTERNAL_SERVER_ERROR = 9000,
	INTERNAL_SYSTEM_MAINTENANCE = 9999,
	UNKNOWN_ERROR = 10000,
}

export declare enum SettingsErrorCode {
	UNKNOWN = 0,
	NONE = 1,
	ILLEGAL_ARGUMENT = 16641,
	NOT_FOUND = 16642,
	NOT_AVAILABLE = 16643,
	TOO_LARGE_VALUE = 16644,
	CLOCK_DRIFT_DETECTED = 16645,
	UNSUPPORTED_APPLICATION_TYPE = 16646,
	DUPLICATED_ENTRY = 16647,
	AUTHENTICATION_FAILED = 16897,
	INTERNAL_SERVER_ERROR = 20737,
	SERVICE_IN_MAINTENANCE_MODE = 20738,
	SERVICE_UNAVAILABLE = 20739,
}

export declare enum ThingsErrorCode {
	INTERNAL_SERVER_ERROR = 0,
	UNAUTHORIZED = 1,
	INVALID_REQUEST = 2,
	INVALID_STATE = 3,
	DEVICE_LIMIT_EXCEEDED = 4096,
	UNSUPPORTED_REGION = 4097,
}

export declare enum SuggestTrialErrorCode {
	UNKNOWN = 0,
	NONE = 1,
	ILLEGAL_ARGUMENT = 16641,
	NOT_FOUND = 16642,
	NOT_AVAILABLE = 16643,
	AUTHENTICATION_FAILED = 16897,
	INTERNAL_SERVER_ERROR = 20737,
	SERVICE_UNAVAILABLE = 20739,
}

export declare enum LFLPremiumErrorCode {
	ILLEGAL_ARGUMENT = 16641,
	MAJOR_VERSION_NOT_SUPPORTED = 16642,
	AUTHENTICATION_FAILED = 16897,
	INTERNAL_SERVER_ERROR = 20737,
}

export declare enum WalletErrorCode {
	INVALID_PARAMETER = 400,
	AUTHENTICATION_FAILED = 401,
	INTERNAL_SERVER_ERROR = 500,
	SERVICE_IN_MAINTENANCE_MODE = 503,
}

export declare enum ShopErrorCode {
	UNKNOWN = 0,
	NONE = 1,
	ILLEGAL_ARGUMENT = 16641,
	NOT_FOUND = 16642,
	NOT_AVAILABLE = 16643,
	NOT_PAID_PRODUCT = 16644,
	NOT_FREE_PRODUCT = 16645,
	ALREADY_OWNED = 16646,
	ERROR_WITH_CUSTOM_MESSAGE = 16647,
	NOT_AVAILABLE_TO_RECIPIENT = 16648,
	NOT_AVAILABLE_FOR_CHANNEL_ID = 16649,
	NOT_SALE_FOR_COUNTRY = 16650,
	NOT_SALES_PERIOD = 16651,
	NOT_SALE_FOR_DEVICE = 16652,
	NOT_SALE_FOR_VERSION = 16653,
	ALREADY_EXPIRED = 16654,
	LIMIT_EXCEEDED = 16655,
	MISSING_CAPABILITY = 16656,
	AUTHENTICATION_FAILED = 16897,
	BALANCE_SHORTAGE = 17153,
	INTERNAL_SERVER_ERROR = 20737,
	SERVICE_IN_MAINTENANCE_MODE = 20738,
	SERVICE_UNAVAILABLE = 20739,
}

export declare enum PointErrorCode {
	REQUEST_DUPLICATION = 3001,
	INVALID_PARAMETER = 3002,
	NOT_ENOUGH_BALANCE = 3003,
	AUTHENTICATION_FAIL = 3004,
	API_ACCESS_FORBIDDEN = 3005,
	MEMBER_ACCOUNT_NOT_FOUND = 3006,
	SERVICE_ACCOUNT_NOT_FOUND = 3007,
	TRANSACTION_NOT_FOUND = 3008,
	ALREADY_REVERSED_TRANSACTION = 3009,
	MESSAGE_NOT_READABLE = 3010,
	HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011,
	HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012,
	NOT_ALLOWED_TO_DEPOSIT = 3013,
	NOT_ALLOWED_TO_PAY = 3014,
	TRANSACTION_ACCESS_FORBIDDEN = 3015,
	INVALID_SERVICE_CONFIGURATION = 4001,
	DCS_COMMUNICATION_FAIL = 5004,
	UPDATE_BALANCE_FAIL = 5007,
	SYSTEM_MAINTENANCE = 5888,
	SYSTEM_ERROR = 5999,
}

export declare enum E2EEKeyBackupErrorCode {
	ILLEGAL_ARGUMENT = 0,
	AUTHENTICATION_FAILED = 1,
	INTERNAL_ERROR = 2,
	RESTORE_KEY_FIRST = 3,
	NO_BACKUP = 4,
	LOCKOUT = 5,
	INVALID_PIN = 6,
}

export declare enum TalkSyncReason {
	UNSPECIFIED = 0,
	UNKNOWN = 1,
	INITIALIZATION = 2,
	OPERATION = 3,
	FULL_SYNC = 4,
	AUTO_REPAIR = 5,
	MANUAL_REPAIR = 6,
	INTERNAL = 7,
	USER_INITIATED = 8,
}

export declare enum OpType {
	END_OF_OPERATION = 0,
	UPDATE_PROFILE = 1,
	NOTIFIED_UPDATE_PROFILE = 2,
	REGISTER_USERID = 3,
	ADD_CONTACT = 4,
	NOTIFIED_ADD_CONTACT = 5,
	BLOCK_CONTACT = 6,
	UNBLOCK_CONTACT = 7,
	NOTIFIED_RECOMMEND_CONTACT = 8,
	CREATE_GROUP = 9,
	UPDATE_GROUP = 10,
	NOTIFIED_UPDATE_GROUP = 11,
	INVITE_INTO_GROUP = 12,
	NOTIFIED_INVITE_INTO_GROUP = 13,
	LEAVE_GROUP = 14,
	NOTIFIED_LEAVE_GROUP = 15,
	ACCEPT_GROUP_INVITATION = 16,
	NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
	KICKOUT_FROM_GROUP = 18,
	NOTIFIED_KICKOUT_FROM_GROUP = 19,
	CREATE_ROOM = 20,
	INVITE_INTO_ROOM = 21,
	NOTIFIED_INVITE_INTO_ROOM = 22,
	LEAVE_ROOM = 23,
	NOTIFIED_LEAVE_ROOM = 24,
	SEND_MESSAGE = 25,
	RECEIVE_MESSAGE = 26,
	SEND_MESSAGE_RECEIPT = 27,
	RECEIVE_MESSAGE_RECEIPT = 28,
	SEND_CONTENT_RECEIPT = 29,
	RECEIVE_ANNOUNCEMENT = 30,
	CANCEL_INVITATION_GROUP = 31,
	NOTIFIED_CANCEL_INVITATION_GROUP = 32,
	NOTIFIED_UNREGISTER_USER = 33,
	REJECT_GROUP_INVITATION = 34,
	NOTIFIED_REJECT_GROUP_INVITATION = 35,
	UPDATE_SETTINGS = 36,
	NOTIFIED_REGISTER_USER = 37,
	INVITE_VIA_EMAIL = 38,
	NOTIFIED_REQUEST_RECOVERY = 39,
	SEND_CHAT_CHECKED = 40,
	SEND_CHAT_REMOVED = 41,
	NOTIFIED_FORCE_SYNC = 42,
	SEND_CONTENT = 43,
	SEND_MESSAGE_MYHOME = 44,
	NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
	REMOVE_ALL_MESSAGES = 46,
	NOTIFIED_UPDATE_PURCHASES = 47,
	DUMMY = 48,
	UPDATE_CONTACT = 49,
	NOTIFIED_RECEIVED_CALL = 50,
	CANCEL_CALL = 51,
	NOTIFIED_REDIRECT = 52,
	NOTIFIED_CHANNEL_SYNC = 53,
	FAILED_SEND_MESSAGE = 54,
	NOTIFIED_READ_MESSAGE = 55,
	FAILED_EMAIL_CONFIRMATION = 56,
	NOTIFIED_CHAT_CONTENT = 58,
	NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
	NOTIFIED_JOIN_CHAT = 60,
	NOTIFIED_LEAVE_CHAT = 61,
	NOTIFIED_TYPING = 62,
	FRIEND_REQUEST_ACCEPTED = 63,
	DESTROY_MESSAGE = 64,
	NOTIFIED_DESTROY_MESSAGE = 65,
	UPDATE_PUBLICKEYCHAIN = 66,
	NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67,
	NOTIFIED_BLOCK_CONTACT = 68,
	NOTIFIED_UNBLOCK_CONTACT = 69,
	UPDATE_GROUPPREFERENCE = 70,
	NOTIFIED_PAYMENT_EVENT = 71,
	REGISTER_E2EE_PUBLICKEY = 72,
	NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73,
	NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74,
	NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75,
	NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76,
	NOTIFIED_E2EE_KEY_UPDATE = 77,
	NOTIFIED_BUDDY_UPDATE_PROFILE = 78,
	NOTIFIED_UPDATE_LINEAT_TABS = 79,
	UPDATE_ROOM = 80,
	NOTIFIED_BEACON_DETECTED = 81,
	UPDATE_EXTENDED_PROFILE = 82,
	ADD_FOLLOW = 83,
	NOTIFIED_ADD_FOLLOW = 84,
	DELETE_FOLLOW = 85,
	NOTIFIED_DELETE_FOLLOW = 86,
	UPDATE_TIMELINE_SETTINGS = 87,
	NOTIFIED_FRIEND_REQUEST = 88,
	UPDATE_RINGBACK_TONE = 89,
	NOTIFIED_POSTBACK = 90,
	RECEIVE_READ_WATERMARK = 91,
	NOTIFIED_MESSAGE_DELIVERED = 92,
	NOTIFIED_UPDATE_CHAT_BAR = 93,
	NOTIFIED_CHATAPP_INSTALLED = 94,
	NOTIFIED_CHATAPP_UPDATED = 95,
	NOTIFIED_CHATAPP_NEW_MARK = 96,
	NOTIFIED_CHATAPP_DELETED = 97,
	NOTIFIED_CHATAPP_SYNC = 98,
	NOTIFIED_UPDATE_MESSAGE = 99,
	UPDATE_CHATROOMBGM = 100,
	NOTIFIED_UPDATE_CHATROOMBGM = 101,
	UPDATE_RINGTONE = 102,
	UPDATE_USER_SETTINGS = 118,
	NOTIFIED_UPDATE_STATUS_BAR = 119,
	CREATE_CHAT = 120,
	UPDATE_CHAT = 121,
	NOTIFIED_UPDATE_CHAT = 122,
	INVITE_INTO_CHAT = 123,
	NOTIFIED_INVITE_INTO_CHAT = 124,
	CANCEL_CHAT_INVITATION = 125,
	NOTIFIED_CANCEL_CHAT_INVITATION = 126,
	DELETE_SELF_FROM_CHAT = 127,
	NOTIFIED_DELETE_SELF_FROM_CHAT = 128,
	ACCEPT_CHAT_INVITATION = 129,
	NOTIFIED_ACCEPT_CHAT_INVITATION = 130,
	REJECT_CHAT_INVITATION = 131,
	DELETE_OTHER_FROM_CHAT = 132,
	NOTIFIED_DELETE_OTHER_FROM_CHAT = 133,
	NOTIFIED_CONTACT_CALENDAR_EVENT = 134,
	NOTIFIED_CONTACT_CALENDAR_EVENT_ALL = 135,
	UPDATE_THINGS_OPERATIONS = 136,
	SEND_CHAT_HIDDEN = 137,
	CHAT_META_SYNC_ALL = 138,
	SEND_REACTION = 139,
	NOTIFIED_SEND_REACTION = 140,
	NOTIFIED_UPDATE_PROFILE_CONTENT = 141,
	FAILED_DELIVERY_MESSAGE = 142,
}

export declare enum OpStatus {
	NORMAL = 0,
	ALERT_DISABLED = 1,
	ALWAYS = 2,
}

export declare enum MIDType {
	USER = 0,
	ROOM = 1,
	GROUP = 2,
	SQUARE = 3,
	SQUARE_CHAT = 4,
	SQUARE_MEMBER = 5,
	BOT = 6,
}

export declare enum MessageRelationType {
	FORWARD = 0,
	AUTO_REPLY = 1,
	SUBORDINATE = 2,
	REPLY = 3,
}

export declare enum ServiceCode {
	UNKNOWN = 0,
	TALK = 1,
	SQUARE = 2,
}

export declare enum AppExtensionType {
	SIRI = 1,
	GOOGLE_ASSISTANT = 2,
	OS_SHARE = 3,
}

export declare enum PredefinedReactionType {
	NICE = 2,
	LOVE = 3,
	FUN = 4,
	AMAZING = 5,
	SAD = 6,
	OMG = 7,
}

export declare enum PlaceSearchProvider {
	GOOGLE = 0,
	BAIDU = 1,
	FOURSQUARE = 2,
}

export declare enum GeolocationAccuracyMode {
	UNKNOWN = 0,
	IOS_REDUCED_ACCURACY = 1,
	IOS_FULL_ACCURACY = 2,
	AOS_PRECISE_LOCATION = 3,
	AOS_APPROXIMATE_LOCATION = 4,
}

export declare enum ContentType {
	NONE = 0,
	IMAGE = 1,
	VIDEO = 2,
	AUDIO = 3,
	HTML = 4,
	PDF = 5,
	CALL = 6,
	STICKER = 7,
	PRESENCE = 8,
	GIFT = 9,
	GROUPBOARD = 10,
	APPLINK = 11,
	LINK = 12,
	CONTACT = 13,
	FILE = 14,
	LOCATION = 15,
	POSTNOTIFICATION = 16,
	RICH = 17,
	CHATEVENT = 18,
	MUSIC = 19,
	PAYMENT = 20,
	EXTIMAGE = 21,
	FLEX = 22,
}

export declare enum ContactType {
	MID = 0,
	PHONE = 1,
	EMAIL = 2,
	USERID = 3,
	PROXIMITY = 4,
	GROUP = 5,
	USER = 6,
	QRCODE = 7,
	PROMOTION_BOT = 8,
	CONTACT_MESSAGE = 9,
	FRIEND_REQUEST = 10,
	BEACON = 11,
	REPAIR = 128,
	FACEBOOK = 2305,
	SINA = 2306,
	RENREN = 2307,
	FEIXIN = 2308,
	BBM = 2309,
}

export declare enum ContactStatus {
	UNSPECIFIED = 0,
	FRIEND = 1,
	FRIEND_BLOCKED = 2,
	RECOMMEND = 3,
	RECOMMEND_BLOCKED = 4,
	DELETED = 5,
	DELETED_BLOCKED = 6,
}

export declare enum ContactRelation {
	ONEWAY = 0,
	BOTH = 1,
	NOT_REGISTERED = 2,
}

export declare enum FriendRequestStatus {
	NONE = 0,
	AVAILABLE = 1,
	ALREADY_REQUESTED = 2,
	UNAVAILABLE = 3,
}

export declare enum ContactCalendarEventType {
	BIRTHDAY = 0,
}

export declare enum UserStatus {
	NORMAL = 0,
	UNBOUND = 1,
	UNREGISTERED = 2,
	UNKNOWN = 3,
}

export declare enum ContactCalendarEventState {
	SHOW = 0,
	HIDE = 1,
}

export declare enum SnsIdType {
	FACEBOOK = 1,
	SINA = 2,
	RENREN = 3,
	FEIXIN = 4,
	BBM = 5,
	APPLE = 6,
	YAHOOJAPAN = 7,
}

export declare enum UserAgeType {
	OVER = 1,
	UNDER = 2,
	UNDEFINED = 3,
}

export declare enum UserAllowProfileHistoryType {
	OWNER = 0,
	FRIEND = 1,
}

export declare enum UserStatusMessageHistoryType {
	NONE = 1,
	ALL = 2,
}

export declare enum UserSharePersonalInfoToFriendsType {
	NEVER_SHOW = 0,
	ONE_WAY = 1,
	MUTUAL = 2,
}

export declare enum IdentityProvider {
	UNKNOWN = 0,
	LINE = 1,
	NAVER_KR = 2,
	LINE_PHONE = 3,
}

export declare enum EmailConfirmationStatus {
	NOT_SPECIFIED = 0,
	NOT_YET = 1,
	DONE = 3,
	NEED_ENFORCED_INPUT = 4,
}

export declare enum AccountMigrationPincodeType {
	NOT_APPLICABLE = 0,
	NOT_SET = 1,
	SET = 2,
	NEED_ENFORCED_INPUT = 3,
}

export declare enum SecurityCenterSettingsType {
	NOT_APPLICABLE = 0,
	NOT_SET = 1,
	SET = 2,
	NEED_ENFORCED_INPUT = 3,
}

export declare enum CustomMode {
	PROMOTION_FRIENDS_INVITE = 1,
	CAPABILITY_SERVER_SIDE_SMS = 2,
	LINE_CLIENT_ANALYTICS_CONFIGURATION = 3,
}

export declare enum VerificationMethod {
	NO_AVAILABLE = 0,
	PIN_VIA_SMS = 1,
	CALLERID_INDIGO = 2,
	PIN_VIA_TTS = 4,
	SKIP = 10,
}

export declare enum ContactSetting {
	CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
	CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
	CONTACT_SETTING_CONTACT_HIDE = 4,
	CONTACT_SETTING_FAVORITE = 8,
	CONTACT_SETTING_DELETE = 16,
}

export declare enum FriendRequestMethod {
	TIMELINE = 1,
	NEARBY = 2,
	SQUARE = 3,
}

export declare enum CharType {
	GROUP = 0,
	ROOM = 1,
	PEER = 2,
}

export declare enum FeatureType {
	OBS_VIDEO = 1,
	OBS_GENERAL = 2,
	OBS_RINGBACK_TONE = 3,
}

export declare enum NotificationType {
	APPLE_APNS = 1,
	GOOGLE_C2DM = 2,
	NHN_NNI = 3,
	SKT_AOM = 4,
	MS_MPNS = 5,
	RIM_BIS = 6,
	GOOGLE_GCM = 7,
	NOKIA_NNAPI = 8,
	TIZEN = 9,
	MOZILLA_SIMPLE = 10,
	LINE_BOT = 17,
	LINE_WAP = 18,
	APPLE_APNS_VOIP = 19,
	MS_WNS = 20,
	GOOGLE_FCM = 21,
	CLOVA = 22,
	CLOVA_VOIP = 23,
	HUAWEI_HCM = 24,
}

export declare enum ModificationType {
	ADD = 0,
	REMOVE = 1,
	MODIFY = 2,
}

export declare enum ChatAttribute {
	NAME = 1,
	PICTURE_STATUS = 2,
	PREVENTED_JOIN_BY_TICKET = 4,
	NOTIFICATION_SETTING = 8,
	INVITATION_TICKET = 16,
	FAVORITE_TIMESTAMP = 32,
	CHAT_TYPE = 64,
}

export declare enum BotType {
	RESERVED = 0,
	OFFICIAL = 1,
	LINE_AT_0 = 2,
	LINE_AT = 3,
}

export declare enum BuddyOnAirLabel {
	ON_AIR = 0,
	LIVE = 1,
	GLP = 2,
}

export declare enum BuddyBotActiveStatus {
	UNSPECIFIED = 0,
	INACTIVE = 1,
	ACTIVE = 2,
	DELETED = 3,
}

export declare enum GroupCallMediaType {
	AUDIO = 1,
	VIDEO = 2,
	LIVE = 3,
}

export declare enum GroupCallProtocol {
	STANDARD = 1,
	CONSTELLA = 2,
}

export declare enum SyncTriggerReason {
	UNKNOWN = 0,
	REVISION_GAP_TOO_LARGE_CLIENT = 1,
	REVISION_GAP_TOO_LARGE_SERVER = 2,
	OPERATION_EXPIRED = 3,
	REVISION_HOLE = 4,
	FORCE_TRIGGERED = 5,
}

export declare enum NotificationStatus {
	NOTIFICATION_ITEM_EXIST = 1,
	TIMELINE_ITEM_EXIST = 2,
	NOTE_GROUP_NEW_ITEM_EXIST = 4,
	TIMELINE_BUDDYGROUP_CHANGED = 8,
	NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,
	ALBUM_ITEM_EXIST = 32,
	TIMELINE_ITEM_DELETED = 64,
	OTOGROUP_ITEM_EXIST = 128,
	GROUPHOME_NEW_ITEM_EXIST = 256,
	GROUPHOME_HIDDEN_ITEM_CHANGED = 512,
	NOTIFICATION_ITEM_CHANGED = 1024,
	BEAD_ITEM_HIDE = 2048,
	BEAD_ITEM_SHOW = 4096,
	LINE_TICKET_UPDATED = 8192,
	TIMELINE_STORY_UPDATED = 16384,
	SMARTCH_UPDATED = 32768,
	AVATAR_UPDATED = 65536,
	HOME_NOTIFICATION_ITEM_EXIST = 131072,
	TIMELINE_REBOOT_COMPLETED = 262144,
	TIMELINE_GUIDE_STORY_UPDATED = 524288,
}

export declare enum GlobalEventType {
	DUMMY = 0,
	NOTICE = 1,
	MORETAB = 2,
	STICKERSHOP = 3,
	CHANNEL = 4,
	DENY_KEYWORD = 5,
	CONNECTIONINFO = 6,
	BUDDY = 7,
	TIMELINEINFO = 8,
	THEMESHOP = 9,
	CALLRATE = 10,
	CONFIGURATION = 11,
	STICONSHOP = 12,
	SUGGESTDICTIONARY = 13,
	SUGGESTSETTINGS = 14,
	USERSETTINGS = 15,
	ANALYTICSINFO = 16,
	SEARCHPOPULARKEYWORD = 17,
	SEARCHNOTICE = 18,
	TIMELINE = 19,
	SEARCHPOPULARCATEGORY = 20,
	EXTENDEDPROFILE = 21,
	SEASONALMARKETING = 22,
	NEWSTAB = 23,
	SUGGESTDICTIONARYV2 = 24,
	CHATAPPSYNC = 25,
	AGREEMENTS = 26,
	INSTANTNEWS = 27,
	EMOJI_MAPPING = 28,
	SEARCHBARKEYWORDS = 29,
	SHOPPING = 30,
	CHAT_EFFECT_BACKGROUND = 31,
	CHAT_EFFECT_KEYWORD = 32,
	SEARCHINDEX = 33,
	HUBTAB = 34,
	PAY_RULE_UPDATED = 35,
	SMARTCH = 36,
	HOME_SERVICE_LIST = 37,
	TIMELINESTORY = 38,
	WALLET_TAB = 39,
	POD_TAB = 40,
	HOME_SAFETY_CHECK = 41,
}

export declare enum SyncCategories {
	ALL = 0,
	PROFILE = 1,
	SETTINGS = 2,
	CONFIGURATIONS = 3,
	CONTACT = 4,
	GROUP = 5,
	E2EE = 6,
	MESSAGE = 7,
}

export declare enum MediaMessageFlow {
	V1 = 1,
	V2 = 2,
}

export declare enum MessageReactionType {
	ALL = 0,
	UNDO = 1,
	NICE = 2,
	LOVE = 3,
	FUN = 4,
	AMAZING = 5,
	SAD = 6,
	OMG = 7,
}

export declare enum SquareChatAnnouncementType {}

export declare enum PictureSource {
	NFT = 1,
	AVATAR = 2,
	SNOW = 3,
	ARCZ = 4,
}

export declare enum RejectionReason {
	UNKNOWN = 0,
	INVALID_TARGET_USER = 1,
	AGE_VALIDATION = 2,
	TOO_MANY_FRIENDS = 3,
	TOO_MANY_REQUESTS = 4,
	MALFORMED_REQUEST = 5,
}

export declare enum SquareMessageState {
	SENT = 1,
	DELETED = 2,
	FORBIDDEN = 3,
	UNSENT = 4,
}

export declare enum SquareEventType {
	RECEIVE_MESSAGE = 0,
	SEND_MESSAGE = 1,
	MUTATE_MESSAGE = 41,
	NOTIFIED_JOIN_SQUARE_CHAT = 2,
	NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3,
	NOTIFIED_LEAVE_SQUARE_CHAT = 4,
	NOTIFIED_DESTROY_MESSAGE = 5,
	NOTIFIED_MARK_AS_READ = 6,
	NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7,
	NOTIFIED_KICKOUT_FROM_SQUARE = 19,
	NOTIFIED_SHUTDOWN_SQUARE = 18,
	NOTIFIED_DELETE_SQUARE_CHAT = 20,
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30,
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31,
	NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT = 38,
	NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37,
	NOTIFIED_ADD_BOT = 33,
	NOTIFIED_REMOVE_BOT = 34,
	NOTIFIED_UPDATE_READONLY_CHAT = 43,
	NOTIFIED_UPDATE_MESSAGE_STATUS = 46,
	NOTIFIED_CHAT_POPUP = 48,
	NOTIFIED_SYSTEM_MESSAGE = 49,
	NOTIFIED_UPDATE_SQUARE = 8,
	NOTIFIED_UPDATE_SQUARE_STATUS = 9,
	NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10,
	NOTIFIED_UPDATE_SQUARE_MEMBER = 11,
	NOTIFIED_UPDATE_SQUARE_CHAT = 12,
	NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13,
	NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14,
	NOTIFIED_CREATE_SQUARE_MEMBER = 15,
	NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16,
	NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17,
	NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32,
	NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET = 50,
	NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36,
	NOTIFICATION_JOIN_REQUEST = 21,
	NOTIFICATION_JOINED = 22,
	NOTIFICATION_PROMOTED_COADMIN = 23,
	NOTIFICATION_PROMOTED_ADMIN = 24,
	NOTIFICATION_DEMOTED_MEMBER = 25,
	NOTIFICATION_KICKED_OUT = 26,
	NOTIFICATION_SQUARE_DELETE = 27,
	NOTIFICATION_SQUARE_CHAT_DELETE = 28,
	NOTIFICATION_MESSAGE = 29,
	NOTIFICATION_POST_ANNOUNCEMENT = 39,
	NOTIFICATION_POST = 40,
	NOTIFICATION_NEW_CHAT_MEMBER = 42,
	NOTIFICATION_MESSAGE_REACTION = 47,
}

export declare enum SquareEventStatus {
	NORMAL = 1,
	ALERT_DISABLED = 2,
}

export declare enum SquareMembershipState {
	JOIN_REQUESTED = 1,
	JOINED = 2,
	REJECTED = 3,
	LEFT = 4,
	KICK_OUT = 5,
	BANNED = 6,
	DELETED = 7,
}

export declare enum SquareMemberRole {
	ADMIN = 1,
	CO_ADMIN = 2,
	MEMBER = 10,
}

export declare enum SquareMemberRelationState {
	NONE = 1,
	BLOCKED = 2,
}

export declare enum SquareType {
	CLOSED = 0,
	OPEN = 1,
}

export declare enum SquareState {
	ALIVE = 0,
	DELETED = 1,
	SUSPENDED = 2,
}

export declare enum SquareEmblem {
	SUPER = 1,
	OFFICIAL = 2,
}

export declare enum SquareJoinMethodType {
	NONE = 0,
	APPROVAL = 1,
	CODE = 2,
}

export declare enum BooleanState {
	NONE = 0,
	OFF = 1,
	ON = 2,
}

export declare enum SquareChatType {
	OPEN = 1,
	SECRET = 2,
	ONE_ON_ONE = 3,
	SQUARE_DEFAULT = 4,
}

export declare enum SquareChatState {
	ALIVE = 0,
	DELETED = 1,
	SUSPENDED = 2,
}

export declare enum MessageStatusType {}

export declare enum NotifiedMessageType {
	MENTION = 1,
	REPLY = 2,
}

export declare enum SquareChatMembershipState {
	JOINED = 1,
	LEFT = 2,
}

export declare enum SquareFeatureControlState {
	DISABLED = 1,
	ENABLED = 2,
}

export declare enum SquareChatFeatureControlState {
	DISABLED = 1,
	ENABLED = 2,
}

export declare enum NotificationPostType {
	POST_MENTION = 2,
	POST_LIKE = 3,
	POST_COMMENT = 4,
	POST_COMMENT_MENTION = 5,
	POST_COMMENT_LIKE = 6,
	POST_RELAY_JOIN = 7,
}

export declare enum SquareChatThreadState {
	ACTIVE = 1,
	INACTIVE = 2,
}

export declare enum SquareChatThreadeMembershipState {
	ACTIVATED = 1,
	DEACTIVATED = 2,
}

export declare enum LiveTalkEventType {
	NOTIFIED_UPDATE_LIVE_TALK_TITLE = 1,
	NOTIFIED_UPDATE_LIVE_TALK_SPEAKER_SETTING = 2,
	NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT = 3,
	NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE = 4,
	NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK = 5,
}

export declare enum LiveTalkSpeakerSetting {
	LIMITED_SPEAKERS = 1,
	ALL_AS_SPEAKERS = 2,
}

export declare enum LiveTalkType {
	PUBLIC = 1,
	PRIVATE = 2,
}

export declare enum UserType {
	USER = 1,
	BOT = 2,
}

export declare enum ProductType {
	STICKER = 1,
	THEME = 2,
	STICON = 3,
}

export declare enum StickerResourceType {
	STATIC = 1,
	ANIMATION = 2,
	SOUND = 3,
	ANIMATION_SOUND = 4,
	POPUP = 5,
	POPUP_SOUND = 6,
	NAME_TEXT = 7,
	PER_STICKER_TEXT = 8,
}

export declare enum ThemeResourceType {
	STATIC = 1,
	ANIMATION = 2,
}

export declare enum SticonResourceType {
	STATIC = 1,
	ANIMATION = 2,
}

export declare enum ImageTextStatus {
	OK = 0,
	PRODUCT_UNSUPPORTED = 1,
	TEXT_NOT_SPECIFIED = 2,
	TEXT_STYLE_UNAVAILABLE = 3,
	CHARACTER_COUNT_LIMIT_EXCEEDED = 4,
	CONTAINS_INVALID_WORD = 5,
}

export declare enum SubType {
	GENERAL = 0,
	CREATORS = 1,
	STICON = 2,
}

export declare enum StickerSize {
	NORMAL = 0,
	BIG = 1,
}

export declare enum PopupLayer {
	FOREGROUND = 0,
	BACKGROUND = 1,
}

export declare enum ProductSalesState {
	ON_SALE = 0,
	OUTDATED_VERSION = 1,
	NOT_ON_SALE = 2,
}

export declare enum PromotionType {
	NONE = 0,
	CARRIER = 1,
	BUDDY = 2,
	INSTALL = 3,
	MISSION = 4,
	MUSTBUY = 5,
}

export declare enum PromotionMissionType {
	DEFAULT = 1,
	VIEW_VIDEO = 2,
}

export declare enum BrandType {
	PREMIUM = 1,
	VERIFIED = 2,
	UNVERIFIED = 3,
}

export declare enum EditorsPickShowcaseType {
	STATIC = 0,
	POPULAR = 1,
	NEW_RELEASE = 2,
}

export declare enum ProductAvailability {
	PURCHASE_ONLY = 0,
	PURCHASE_OR_SUBSCRIPTION = 1,
	SUBSCRIPTION_ONLY = 2,
}

export declare enum DemographicGenderType {
	ALL = 0,
	MALE = 1,
	FEMALE = 2,
}

export declare enum DemographicAgeType {
	ALL = 0,
	AGE_0_19 = 1,
	AGE_20_29 = 2,
	AGE_30_39 = 3,
	AGE_40_INF = 4,
	AGE_40_49 = 5,
	AGE_50_INF = 6,
}

export declare enum ShowcaseType {
	POPULAR = 0,
	NEW_RELEASE = 1,
	EVENT = 2,
	RECOMMENDED = 3,
	POPULAR_WEEKLY = 4,
	POPULAR_MONTHLY = 5,
	POPULAR_RECENTLY_PUBLISHED = 6,
	BUDDY = 7,
	EXTRA_EVENT = 8,
	BROWSING_HISTORY = 9,
	POPULAR_TOTAL_SALES = 10,
	NEW_SUBSCRIPTION = 11,
	POPULAR_SUBSCRIPTION_30D = 12,
	CPD_STICKER = 13,
	POPULAR_WITH_FREE = 14,
}

export declare enum EditorsPickContentType {
	STICKER = 1,
	URL = 2,
	THEME = 3,
	EMOJI = 4,
}

export declare enum TagType {
	UNKNOWN = 0,
	CHARACTER = 1,
	TASTE = 2,
}

export declare enum CategoryType {
	GENERAL_CATEGORY = 1,
	CREATORS_TAG = 2,
}

export declare enum SubscriptionPlanAvailability {
	AVAILABLE = 0,
	DIFFERENT_STORE = 1,
	NOT_STUDENT = 2,
	ALREADY_PURCHASED = 3,
}

export declare enum SubscriptionServiceType {
	STICKERS_PREMIUM = 1,
}

export declare enum SubscriptionPlanTarget {
	GENERAL = 1,
	STUDENT = 2,
}

export declare enum SubscriptionPlanType {
	MONTHLY = 1,
	YEARLY = 2,
}

export declare enum SubscriptionPlanTier {
	BASIC = 1,
	DELUXE = 2,
}

export declare enum SubscriptionSlotModificationResult {
	OK = 0,
	UNKNOWN = 1,
	NO_SUBSCRIPTION = 2,
	EXISTS = 3,
	NOT_FOUND = 4,
	EXCEEDS_LIMIT = 5,
	NOT_AVAILABLE = 6,
}

export declare enum SubscriptionBillingResult {
	OK = 0,
	UNKNOWN = 1,
	NOT_SUPPORTED = 2,
	NO_SUBSCRIPTION = 3,
	SUBSCRIPTION_EXISTS = 4,
	NOT_AVAILABLE = 5,
	CONFLICT = 6,
	OUTDATED_VERSION = 7,
	NO_STUDENT_INFORMATION = 8,
	ACCOUNT_HOLD = 9,
	RETRY_STATE = 10,
}

export declare enum SubscriptionCampaignType {
	MISSION = 1,
	FREE_TRIAL = 2,
}

export declare enum SubscriptionSortType {
	DATE_ASC = 1,
	DATE_DESC = 2,
}

export declare enum StartBundleSubscriptionResult {
	OK = 0,
	UNKNOWN = 1,
	INVALID_PARAMETER = 2,
	NOT_ELIGIBLE = 3,
	CONFLICT = 4,
	ACCOUNT_HOLD = 5,
	RETRY_STATE = 6,
}

export declare enum StopBundleSubscriptionResult {
	OK = 0,
	INVALID_PARAMETER = 1,
	NOT_FOUND = 2,
	NOT_SUPPORTED = 3,
	CONFLICT = 4,
	NOT_ELIGIBLE = 5,
}

export declare enum GetSubscriptionCouponCodeResult {
	OK = 0,
	UNKNOWN = 1,
	NOT_SUPPORTED = 2,
	NOT_AVAILABLE = 3,
	NOT_APPLICABLE = 4,
}

export declare enum GetFriendStatusWithPremiumOaResult {
	FRIEND = 0,
	BLOCKED = 1,
	NOT_FRIEND = 2,
	ERROR = 3,
}

export declare enum SubscriptionCouponCampaignStatus {
	OK = 0,
	UNKNOWN = 1,
	NOT_SUPPORTED = 2,
	NOT_ACTIVE = 3,
	NOT_APPLICABLE = 4,
}

export declare enum AcceptSubscriptionAgreementResult {
	OK = 0,
	UNKNOWN = 1,
	NOT_SUPPORTED = 2,
	NO_SUBSCRIPTION = 3,
}

export declare enum StoreCode {
	GOOGLE = 0,
	APPLE = 1,
	WEBSTORE = 2,
	LINEMO = 3,
	LINE_MUSIC = 4,
	LYP = 5,
	TW_CHT = 6,
	FREEMIUM = 7,
}

export declare enum BirthdayGiftAssociationVerifyTokenStatus {
	VALID = 0,
	INVALID = 1,
}

export declare enum PopupDesignTemplate {
	FIXED = 0,
}

export declare enum PopupDisplayCount {
	ONCE = 0,
}

export declare enum PopupVisualType {
	BASIC = 0,
	FULLSCREEN = 1,
}

export declare class TalkException extends Error {
	code: ErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: ErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class ChannelException extends Error {
	code: ChannelErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: ChannelErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class SquareException extends Error {
	errorCode: SquareErrorCode;
	errorExtraInfo: ErrorExtraInfo;
	reason: string;

	constructor(args?: {
		errorCode: SquareErrorCode;
		errorExtraInfo: ErrorExtraInfo;
		reason: string;
	});
}

export declare class LiffException extends Error {
	code: LiffErrorCode;
	message: string;
	payload: LiffErrorPayload;

	constructor(args?: {
		code: LiffErrorCode;
		message: string;
		payload: LiffErrorPayload;
	});
}

export declare class HomeException extends Error {
	exceptionCode: HomeExceptionCode;
	message: string;
	retryTimeMillis: Int64;

	constructor(args?: {
		exceptionCode: HomeExceptionCode;
		message: string;
		retryTimeMillis: Int64;
	});
}

export declare class ChatappException extends Error {
	code: ChatappErrorCode;
	reason: string;

	constructor(args?: { code: ChatappErrorCode; reason: string });
}

export declare class MembershipException extends Error {
	code: MembershipErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: MembershipErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class BotException extends Error {
	errorCode: BotErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		errorCode: BotErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class BotExternalException extends Error {
	errorCode: BotExternalErrorCode;
	reason: string;

	constructor(args?: { errorCode: BotExternalErrorCode; reason: string });
}

export declare class LiffChannelException extends Error {
	code: ChannelErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: ChannelErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class AccessTokenRefreshException extends Error {
	errorCode: AccessTokenRefreshErrorCode;
	reasonCode: Int64;

	constructor(args?: {
		errorCode: AccessTokenRefreshErrorCode;
		reasonCode: Int64;
	});
}

export declare class AccountEapConnectException extends Error {
	code: AccountEapConnectErrorCode;
	alertMessage: string;
	webAuthDetails: WebAuthDetails;

	constructor(args?: {
		code: AccountEapConnectErrorCode;
		alertMessage: string;
		webAuthDetails: WebAuthDetails;
	});
}

export declare class PwlessCredentialException extends Error {
	code: PwlessCredentialErrorCode;
	alertMessage: string;

	constructor(args?: { code: PwlessCredentialErrorCode; alertMessage: string });
}

export declare class SecondAuthFactorPinCodeException extends Error {
	code: SecondAuthFactorPinCodeErrorCode;
	alertMessage: string;

	constructor(args?: {
		code: SecondAuthFactorPinCodeErrorCode;
		alertMessage: string;
	});
}

export declare class AuthException extends Error {
	code: AuthErrorCode;
	alertMessage: string;
	webAuthDetails: WebAuthDetails;

	constructor(args?: {
		code: AuthErrorCode;
		alertMessage: string;
		webAuthDetails: WebAuthDetails;
	});
}

export declare class SecondaryPwlessLoginException extends Error {
	code: SecondaryPwlessLoginErrorCode;
	alertMessage: string;

	constructor(args?: {
		code: SecondaryPwlessLoginErrorCode;
		alertMessage: string;
	});
}

export declare class SecondaryQrCodeException extends Error {
	code: SecondaryQrCodeErrorCode;
	alertMessage: string;

	constructor(args?: { code: SecondaryQrCodeErrorCode; alertMessage: string });
}

export declare class PaymentException extends Error {
	errorCode: PaymentErrorCode;
	debugReason: string;
	serverDefinedMessage: string;
	errorDetailMap: { [k: string]: string };

	constructor(args?: {
		errorCode: PaymentErrorCode;
		debugReason: string;
		serverDefinedMessage: string;
		errorDetailMap: { [k: string]: string };
	});
}

export declare class SettingsException extends Error {
	code: SettingsErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: SettingsErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class TicketException extends Error {
	code: number;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: number;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class ThingsException extends Error {
	code: ThingsErrorCode;
	reason: string;

	constructor(args?: { code: ThingsErrorCode; reason: string });
}

export declare class SuggestTrialException extends Error {
	code: SuggestTrialErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: SuggestTrialErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class LFLPremiumException extends Error {
	code: LFLPremiumErrorCode;

	constructor(args?: { code: LFLPremiumErrorCode });
}

export declare class WalletException extends Error {
	code: WalletErrorCode;
	reason: string;
	attributes: { [k: string]: string };

	constructor(args?: {
		code: WalletErrorCode;
		reason: string;
		attributes: { [k: string]: string };
	});
}

export declare class ShopException extends Error {
	code: ShopErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: ShopErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class PointException extends Error {
	code: PointErrorCode;
	reason: string;
	extra: { [k: string]: string };

	constructor(args?: {
		code: PointErrorCode;
		reason: string;
		extra: { [k: string]: string };
	});
}

export declare class E2EEKeyBackupException extends Error {
	code: E2EEKeyBackupErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };

	constructor(args?: {
		code: E2EEKeyBackupErrorCode;
		reason: string;
		parameterMap: { [k: string]: string };
	});
}

export declare class RejectedException extends Error {
	rejectionReason: RejectionReason;
	hint: string;

	constructor(args?: { rejectionReason: RejectionReason; hint: string });
}

export declare class ServerFailureException extends Error {
	hint: string;

	constructor(args?: { hint: string });
}

export declare class UpdateChatRequest {
	reqSeq: number;
	chat: Chat;
	updatedAttribute: number;

	constructor(args?: { reqSeq: number; chat: Chat; updatedAttribute: number });
}

export declare class UpdateChatResponse {}

export declare class AcceptChatInvitationByTicketRequest {
	reqSeq: number;
	chatMid: string;
	ticketId: string;

	constructor(args?: { reqSeq: number; chatMid: string; ticketId: string });
}

export declare class AcceptChatInvitationByTicketResponse {}

export declare class AcceptChatInvitationRequest {
	reqSeq: number;
	chatMid: string;

	constructor(args?: { reqSeq: number; chatMid: string });
}

export declare class ReissueChatTicketRequest {
	reqSeq: number;
	groupMid: string;

	constructor(args?: { reqSeq: number; groupMid: string });
}

export declare class AcceptChatInvitationResponse {}

export declare class ReissueChatTicketResponse {
	ticketId: string;

	constructor(args?: { ticketId: string });
}

export declare class RejectChatInvitationRequest {
	reqSeq: number;
	chatMid: string;

	constructor(args?: { reqSeq: number; chatMid: string });
}

export declare class GetAllChatMidsRequest {
	withMemberChats?: boolean;
	withInvitedChats?: boolean;

	constructor(args?: { withMemberChats?: boolean; withInvitedChats?: boolean });
}

export declare class RejectChatInvitationResponse {}

export declare class GetAllChatMidsResponse {
	memberChatMids: string[];
	invitedChatMids: string[];

	constructor(args?: { memberChatMids: string[]; invitedChatMids: string[] });
}

export declare class CreateChatRequest {
	reqSeq: number;
	type: number;
	name?: string;
	targetUserMids: string[];
	picturePath?: string;

	constructor(args?: {
		reqSeq: number;
		type: number;
		name?: string;
		targetUserMids: string[];
		picturePath?: string;
	});
}

export declare class CreateChatResponse {
	chat: Chat;

	constructor(args?: { chat: Chat });
}

export declare class BeaconCondition {
	inFriends: string;
	notInFriends: string;
	termsAgreed: boolean;

	constructor(args?: {
		inFriends: string;
		notInFriends: string;
		termsAgreed: boolean;
	});
}

export declare class BeaconBackgroundNotification {
	actionInterval: Int64;
	actionAndConditions: BeaconCondition[];
	actionDelay: Int64;
	actionConditions: BeaconCondition[];

	constructor(args?: {
		actionInterval: Int64;
		actionAndConditions: BeaconCondition[];
		actionDelay: Int64;
		actionConditions: BeaconCondition[];
	});
}

export declare class LiffErrorPayload {
	consentRequired: LiffErrorConsentRequired;

	constructor(args?: { consentRequired: LiffErrorConsentRequired });
}

export declare class LiffErrorConsentRequired {
	channelId: string;
	consentUrl: string;

	constructor(args?: { channelId: string; consentUrl: string });
}

export declare class ErrorExtraInfo {
	preconditionFailedExtraInfo: PreconditionFailedExtraInfo;
	userRestrictionInfo: UserRestrictionExtraInfo;

	constructor(args?: {
		preconditionFailedExtraInfo: PreconditionFailedExtraInfo;
		userRestrictionInfo: UserRestrictionExtraInfo;
	});
}

export declare class UserRestrictionExtraInfo {
	linkUrl: string;

	constructor(args?: { linkUrl: string });
}

export declare class WebAuthDetails {
	baseUrl: string;
	token: string;

	constructor(args?: { baseUrl: string; token: string });
}

export declare class Profile {
	mid: string;
	userid: string;
	phone: string;
	email: string;
	regionCode: string;
	displayName: string;
	phoneticName: string;
	pictureStatus: string;
	thumbnailUrl: string;
	statusMessage: string;
	allowSearchByUserid: boolean;
	allowSearchByEmail: boolean;
	picturePath: string;
	musicProfile: string;
	videoProfile: string;
	statusMessageContentMetadata: { [k: string]: string };
	avatarProfile: AvatarProfile;
	nftProfile: boolean;
	pictureSource: PictureSource;

	constructor(args?: {
		mid: string;
		userid: string;
		phone: string;
		email: string;
		regionCode: string;
		displayName: string;
		phoneticName: string;
		pictureStatus: string;
		thumbnailUrl: string;
		statusMessage: string;
		allowSearchByUserid: boolean;
		allowSearchByEmail: boolean;
		picturePath: string;
		musicProfile: string;
		videoProfile: string;
		statusMessageContentMetadata: { [k: string]: string };
		avatarProfile: AvatarProfile;
		nftProfile: boolean;
		pictureSource: PictureSource;
	});
}

export declare class AvatarProfile {
	version: string;
	updatedMillis: Int64;
	thumbnail: string;
	usablePublicly: boolean;

	constructor(args?: {
		version: string;
		updatedMillis: Int64;
		thumbnail: string;
		usablePublicly: boolean;
	});
}

export declare class Operation {
	revision: Int64;
	createdTime: Int64;
	type: OpType;
	reqSeq: number;
	checksum: string;
	status: OpStatus;
	param1: string;
	param2: string;
	param3: string;
	message: Message;

	constructor(args?: {
		revision: Int64;
		createdTime: Int64;
		type: OpType;
		reqSeq: number;
		checksum: string;
		status: OpStatus;
		param1: string;
		param2: string;
		param3: string;
		message: Message;
	});
}

export declare class Message {
	_from: string;
	to: string;
	toType: MIDType;
	id: string;
	createdTime: Int64;
	deliveredTime: Int64;
	text: string;
	location: Location;
	hasContent: boolean;
	contentType: ContentType;
	contentPreview: Buffer | string;
	contentMetadata: { [k: string]: string };
	sessionId: any;
	chunks: Buffer[] | string[];
	relatedMessageId: string;
	messageRelationType: MessageRelationType;
	readCount: Int64;
	relatedMessageServiceCode: ServiceCode;
	appExtensionType: AppExtensionType;
	reactions: Reaction[];

	constructor(args?: {
		_from: string;
		to: string;
		toType: MIDType;
		id: string;
		createdTime: Int64;
		deliveredTime: Int64;
		text: string;
		location: Location;
		hasContent: boolean;
		contentType: ContentType;
		contentPreview: Buffer | string;
		contentMetadata: { [k: string]: string };
		sessionId: any;
		chunks: Buffer[] | string[];
		relatedMessageId: string;
		messageRelationType: MessageRelationType;
		readCount: Int64;
		relatedMessageServiceCode: ServiceCode;
		appExtensionType: AppExtensionType;
		reactions: Reaction[];
	});
}

export declare class Reaction {
	fromUserMid: string;
	atMillis: Int64;
	reactionType: ReactionType;

	constructor(args?: {
		fromUserMid: string;
		atMillis: Int64;
		reactionType: ReactionType;
	});
}

export declare class ReactionType {
	predefinedReactionType: PredefinedReactionType;

	constructor(args?: { predefinedReactionType: PredefinedReactionType });
}

export declare class ReactRequest {
	reqSeq: number;
	messageId: Int64;
	reactionType: ReactionType;

	constructor(args?: {
		reqSeq: number;
		messageId: Int64;
		reactionType: ReactionType;
	});
}

export declare class Location {
	title: string;
	address: string;
	latitude: number;
	longitude: number;
	phone: string;
	categoryId: string;
	provider: PlaceSearchProvider;
	accuracy: GeolocationAccuracy;
	altitudeMeters: number;

	constructor(args?: {
		title: string;
		address: string;
		latitude: number;
		longitude: number;
		phone: string;
		categoryId: string;
		provider: PlaceSearchProvider;
		accuracy: GeolocationAccuracy;
		altitudeMeters: number;
	});
}

export declare class GeolocationAccuracy {
	radiusMeters: number;
	radiusConfidence: number;
	altitudeAccuracy: number;
	velocityAccuracy: number;
	bearingAccuracy: number;
	accuracyMode: GeolocationAccuracyMode;

	constructor(args?: {
		radiusMeters: number;
		radiusConfidence: number;
		altitudeAccuracy: number;
		velocityAccuracy: number;
		bearingAccuracy: number;
		accuracyMode: GeolocationAccuracyMode;
	});
}

export declare class Contact {
	mid: string;
	createdTime: Int64;
	type: ContactType;
	status: ContactStatus;
	relation: ContactRelation;
	displayName: string;
	phoneticName: string;
	pictureStatus: string;
	thumbnailUrl: string;
	statusMessage: string;
	displayNameOverridden: string;
	favoriteTime: Int64;
	capableVoiceCall: boolean;
	capableVideoCall: boolean;
	capableMyhome: boolean;
	capableBuddy: boolean;
	attributes: number;
	settings: Int64;
	picturePath: string;
	recommendParams: string;
	friendRequestStatus: FriendRequestStatus;
	musicProfile: string;
	videoProfile: string;
	statusMessageContentMetadata: { [k: string]: string };
	avatarProfile: AvatarProfile;
	friendRingtone: string;
	friendRingbackTone: string;
	nftProfile: boolean;
	pictureSource: PictureSource;

	constructor(args?: {
		mid: string;
		createdTime: Int64;
		type: ContactType;
		status: ContactStatus;
		relation: ContactRelation;
		displayName: string;
		phoneticName: string;
		pictureStatus: string;
		thumbnailUrl: string;
		statusMessage: string;
		displayNameOverridden: string;
		favoriteTime: Int64;
		capableVoiceCall: boolean;
		capableVideoCall: boolean;
		capableMyhome: boolean;
		capableBuddy: boolean;
		attributes: number;
		settings: Int64;
		picturePath: string;
		recommendParams: string;
		friendRequestStatus: FriendRequestStatus;
		musicProfile: string;
		videoProfile: string;
		statusMessageContentMetadata: { [k: string]: string };
		avatarProfile: AvatarProfile;
		friendRingtone: string;
		friendRingbackTone: string;
		nftProfile: boolean;
		pictureSource: PictureSource;
	});
}

export declare class GetContactsV2Request {
	targetUserMids: string[];
	neededContactCalendarEvents: ContactCalendarEventType[];
	withUserStatus: boolean;

	constructor(args?: {
		targetUserMids: string[];
		neededContactCalendarEvents: ContactCalendarEventType[];
		withUserStatus: boolean;
	});
}

export declare class GetContactsV2Response {
	contacts: { [k: string]: ContactEntry };

	constructor(args?: { contacts: { [k: string]: ContactEntry } });
}

export declare class ContactEntry {
	userStatus: UserStatus;
	snapshotTimeMillis: Int64;
	contact: Contact;
	calendarEvents: ContactCalendarEvents;

	constructor(args?: {
		userStatus: UserStatus;
		snapshotTimeMillis: Int64;
		contact: Contact;
		calendarEvents: ContactCalendarEvents;
	});
}

export declare class ContactCalendarEvents {
	events: { [k: number /*ContactCalendarEventType*/]: ContactCalendarEvent };

	constructor(args?: {
		events: {
			[k: number /*ContactCalendarEventType*/]: ContactCalendarEvent;
		};
	});
}

export declare class ContactCalendarEvent {
	id: string;
	state: ContactCalendarEventState;
	year: number;
	month: number;
	day: number;

	constructor(args?: {
		id: string;
		state: ContactCalendarEventState;
		year: number;
		month: number;
		day: number;
	});
}

export declare class Configurations {
	revision: Int64;
	configMap: { [k: string]: string };

	constructor(args?: { revision: Int64; configMap: { [k: string]: string } });
}

export declare class E2EEPublicKey {
	version: number;
	keyId: number;
	keyData: Buffer | string;
	createdTime: Int64;

	constructor(args?: {
		version: number;
		keyId: number;
		keyData: Buffer | string;
		createdTime: Int64;
	});
}

export declare class RSAKey {
	keynm: string;
	nvalue: string;
	evalue: string;
	sessionKey: string;

	constructor(args?: {
		keynm: string;
		nvalue: string;
		evalue: string;
		sessionKey: string;
	});
}

export declare class Settings {
	notificationEnable: boolean;
	notificationMuteExpiration: Int64;
	notificationNewMessage: boolean;
	notificationGroupInvitation: boolean;
	notificationShowMessage: boolean;
	notificationIncomingCall: boolean;
	notificationSoundMessage: string;
	notificationSoundGroup: string;
	notificationDisabledWithSub: boolean;
	notificationPayment: boolean;
	privacySyncContacts: boolean;
	privacySearchByPhoneNumber: boolean;
	privacySearchByUserid: boolean;
	privacySearchByEmail: boolean;
	privacyAllowSecondaryDeviceLogin: boolean;
	privacyProfileImagePostToMyhome: boolean;
	privacyReceiveMessagesFromNotFriend: boolean;
	privacyAgreeUseLineCoinToPaidCall: boolean;
	privacyAgreeUsePaidCall: boolean;
	privacyAllowFriendRequest: boolean;
	contactMyTicket: string;
	identityProvider: IdentityProvider;
	identityIdentifier: string;
	snsAccounts: { [k: number /*SnsIdType*/]: string };
	phoneRegistration: boolean;
	emailConfirmationStatus: EmailConfirmationStatus;
	accountMigrationPincodeType: AccountMigrationPincodeType;
	enforcedInputAccountMigrationPincode: boolean;
	securityCenterSettingsType: SecurityCenterSettingsType;
	allowUnregistrationSecondaryDevice: boolean;
	pwlessPrimaryCredentialRegistration: boolean;
	preferenceLocale: string;
	customModes: { [k: number /*CustomMode*/]: string };
	e2eeEnable: boolean;
	hitokotoBackupRequested: boolean;
	privacyProfileMusicPostToMyhome: boolean;
	privacyAllowNearby: boolean;
	agreementNearbyTime: Int64;
	agreementSquareTime: Int64;
	notificationMention: boolean;
	botUseAgreementAcceptedAt: Int64;
	agreementShakeFunction: Int64;
	agreementMobileContactName: Int64;
	agreementSoundToText: Int64;
	privacyPolicyVersion: string;
	agreementAdByWebAccess: Int64;
	agreementPhoneNumberMatching: Int64;
	agreementCommunicationInfo: Int64;
	privacySharePersonalInfoToFriends: UserSharePersonalInfoToFriendsType;
	agreementThingsWirelessCommunication: Int64;
	agreementGdpr: Int64;
	privacyStatusMessageHistory: UserStatusMessageHistoryType;
	agreementProvideLocation: Int64;
	agreementBeacon: Int64;
	privacyAllowProfileHistory: UserAllowProfileHistoryType;
	agreementContentsSuggest: Int64;
	agreementContentsSuggestDataCollection: Int64;
	privacyAgeResult: UserAgeType;
	privacyAgeResultReceived: boolean;
	notificationThumbnail: boolean;
	agreementOcrImageCollection: Int64;
	privacyAllowFollow: boolean;
	privacyShowFollowList: boolean;
	notificationBadgeTalkOnly: boolean;
	agreementIcna: Int64;
	notificationReaction: boolean;
	agreementMid: Int64;
	homeNotificationNewFriend: boolean;
	homeNotificationFavoriteFriendUpdate: boolean;
	homeNotificationGroupMemberUpdate: boolean;
	homeNotificationBirthday: boolean;
	eapAllowedToConnect: { [k: number /*SnsIdType*/]: boolean };
	agreementLineOutUse: Int64;
	agreementLineOutProvideInfo: Int64;
	notificationShowProfileImage: boolean;
	agreementPdpa: Int64;
	agreementLocationVersion: string;
	zhdPageAllowedToShow: boolean;

	constructor(args?: {
		notificationEnable: boolean;
		notificationMuteExpiration: Int64;
		notificationNewMessage: boolean;
		notificationGroupInvitation: boolean;
		notificationShowMessage: boolean;
		notificationIncomingCall: boolean;
		notificationSoundMessage: string;
		notificationSoundGroup: string;
		notificationDisabledWithSub: boolean;
		notificationPayment: boolean;
		privacySyncContacts: boolean;
		privacySearchByPhoneNumber: boolean;
		privacySearchByUserid: boolean;
		privacySearchByEmail: boolean;
		privacyAllowSecondaryDeviceLogin: boolean;
		privacyProfileImagePostToMyhome: boolean;
		privacyReceiveMessagesFromNotFriend: boolean;
		privacyAgreeUseLineCoinToPaidCall: boolean;
		privacyAgreeUsePaidCall: boolean;
		privacyAllowFriendRequest: boolean;
		contactMyTicket: string;
		identityProvider: IdentityProvider;
		identityIdentifier: string;
		snsAccounts: { [k: number /*SnsIdType*/]: string };
		phoneRegistration: boolean;
		emailConfirmationStatus: EmailConfirmationStatus;
		accountMigrationPincodeType: AccountMigrationPincodeType;
		enforcedInputAccountMigrationPincode: boolean;
		securityCenterSettingsType: SecurityCenterSettingsType;
		allowUnregistrationSecondaryDevice: boolean;
		pwlessPrimaryCredentialRegistration: boolean;
		preferenceLocale: string;
		customModes: { [k: number /*CustomMode*/]: string };
		e2eeEnable: boolean;
		hitokotoBackupRequested: boolean;
		privacyProfileMusicPostToMyhome: boolean;
		privacyAllowNearby: boolean;
		agreementNearbyTime: Int64;
		agreementSquareTime: Int64;
		notificationMention: boolean;
		botUseAgreementAcceptedAt: Int64;
		agreementShakeFunction: Int64;
		agreementMobileContactName: Int64;
		agreementSoundToText: Int64;
		privacyPolicyVersion: string;
		agreementAdByWebAccess: Int64;
		agreementPhoneNumberMatching: Int64;
		agreementCommunicationInfo: Int64;
		privacySharePersonalInfoToFriends: UserSharePersonalInfoToFriendsType;
		agreementThingsWirelessCommunication: Int64;
		agreementGdpr: Int64;
		privacyStatusMessageHistory: UserStatusMessageHistoryType;
		agreementProvideLocation: Int64;
		agreementBeacon: Int64;
		privacyAllowProfileHistory: UserAllowProfileHistoryType;
		agreementContentsSuggest: Int64;
		agreementContentsSuggestDataCollection: Int64;
		privacyAgeResult: UserAgeType;
		privacyAgeResultReceived: boolean;
		notificationThumbnail: boolean;
		agreementOcrImageCollection: Int64;
		privacyAllowFollow: boolean;
		privacyShowFollowList: boolean;
		notificationBadgeTalkOnly: boolean;
		agreementIcna: Int64;
		notificationReaction: boolean;
		agreementMid: Int64;
		homeNotificationNewFriend: boolean;
		homeNotificationFavoriteFriendUpdate: boolean;
		homeNotificationGroupMemberUpdate: boolean;
		homeNotificationBirthday: boolean;
		eapAllowedToConnect: { [k: number /*SnsIdType*/]: boolean };
		agreementLineOutUse: Int64;
		agreementLineOutProvideInfo: Int64;
		notificationShowProfileImage: boolean;
		agreementPdpa: Int64;
		agreementLocationVersion: string;
		zhdPageAllowedToShow: boolean;
	});
}

export declare class E2EENegotiationResult {
	allowedTypes: ContentType[];
	publicKey: E2EEPublicKey;
	specVersion: number;

	constructor(args?: {
		allowedTypes: ContentType[];
		publicKey: E2EEPublicKey;
		specVersion: number;
	});
}

export declare class ContactRegistration {
	contact: Contact;
	luid: string;
	contactType: ContactType;
	contactKey: string;

	constructor(args?: {
		contact: Contact;
		luid: string;
		contactType: ContactType;
		contactKey: string;
	});
}

export declare class E2EEGroupSharedKey {
	keyVersion: number;
	groupKeyId: number;
	creator: string;
	creatorKeyId: number;
	receiver: string;
	receiverKeyId: number;
	encryptedSharedKey: Buffer | string;
	allowedTypes: ContentType[];
	specVersion: number;

	constructor(args?: {
		keyVersion: number;
		groupKeyId: number;
		creator: string;
		creatorKeyId: number;
		receiver: string;
		receiverKeyId: number;
		encryptedSharedKey: Buffer | string;
		allowedTypes: ContentType[];
		specVersion: number;
	});
}

export declare class VerificationSessionData {
	sessionId: string;
	method: VerificationMethod;
	callback: string;
	normalizedPhone: string;
	countryCode: string;
	nationalSignificantNumber: string;
	availableVerificationMethods: VerificationMethod[];
	callerIdMask: string;

	constructor(args?: {
		sessionId: string;
		method: VerificationMethod;
		callback: string;
		normalizedPhone: string;
		countryCode: string;
		nationalSignificantNumber: string;
		availableVerificationMethods: VerificationMethod[];
		callerIdMask: string;
	});
}

export declare class FollowRequest {
	followMid: FollowMid;

	constructor(args?: { followMid: FollowMid });
}

export declare class FollowMid {
	mid: string;
	eMid: string;

	constructor(args?: { mid: string; eMid: string });
}

export declare class UnfollowRequest {
	followMid: FollowMid;

	constructor(args?: { followMid: FollowMid });
}

export declare class Ticket {
	id: string;
	expirationTime: Int64;
	maxUseCount: number;

	constructor(args?: {
		id: string;
		expirationTime: Int64;
		maxUseCount: number;
	});
}

export declare class GetChatsRequest {
	chatMids: string[];
	withMembers: boolean;
	withInvitees: boolean;

	constructor(args?: {
		chatMids: string[];
		withMembers: boolean;
		withInvitees: boolean;
	});
}

export declare class GetChatsResponse {
	chats: Chat[];

	constructor(args?: { chats: Chat[] });
}

export declare class Chat {
	type: CharType;
	chatMid: string;
	createdTime: Int64;
	notificationDisabled: boolean;
	favoriteTimestamp: Int64;
	chatName: string;
	picturePath: string;
	extra: Extra;

	constructor(args?: {
		type: CharType;
		chatMid: string;
		createdTime: Int64;
		notificationDisabled: boolean;
		favoriteTimestamp: Int64;
		chatName: string;
		picturePath: string;
		extra: Extra;
	});
}

export declare class Extra {
	groupExtra: GroupExtra;
	peerExtra: PeerExtra;

	constructor(args?: { groupExtra: GroupExtra; peerExtra: PeerExtra });
}

export declare class GroupExtra {
	creator: string;
	preventedJoinByTicket: boolean;
	invitationTicket: string;
	memberMids: { [k: string]: Int64 };
	inviteeMids: { [k: string]: Int64 };
	addFriendDisabled: boolean;
	ticketDisabled: boolean;

	constructor(args?: {
		creator: string;
		preventedJoinByTicket: boolean;
		invitationTicket: string;
		memberMids: { [k: string]: Int64 };
		inviteeMids: { [k: string]: Int64 };
		addFriendDisabled: boolean;
		ticketDisabled: boolean;
	});
}

export declare class PeerExtra {}

export declare class GetFollowersRequest {
	followMid: FollowMid;
	cursor: string;

	constructor(args?: { followMid: FollowMid; cursor: string });
}

export declare class GetFollowersResponse {
	profiles: FollowProfile[];
	cursor: string;
	followingCount: Int64;
	followerCount: Int64;

	constructor(args?: {
		profiles: FollowProfile[];
		cursor: string;
		followingCount: Int64;
		followerCount: Int64;
	});
}

export declare class FollowProfile {
	followMid: FollowMid;
	displayName: string;
	picturePath: string;
	following: boolean;
	allowFollow: boolean;
	followBuddyDetail: FollowBuddyDetail;

	constructor(args?: {
		followMid: FollowMid;
		displayName: string;
		picturePath: string;
		following: boolean;
		allowFollow: boolean;
		followBuddyDetail: FollowBuddyDetail;
	});
}

export declare class FollowBuddyDetail {
	iconType: number;

	constructor(args?: { iconType: number });
}

export declare class GetFollowingsRequest {
	followMid: FollowMid;
	cursor: string;

	constructor(args?: { followMid: FollowMid; cursor: string });
}

export declare class GetFollowingsResponse {
	profiles: FollowProfile[];
	cursor: string;
	followingCount: Int64;
	followerCount: Int64;

	constructor(args?: {
		profiles: FollowProfile[];
		cursor: string;
		followingCount: Int64;
		followerCount: Int64;
	});
}

export declare class Room {
	mid: string;
	createdTime: Int64;
	contacts: Contact[];
	notificationDisabled: boolean;
	memberMids: string[];

	constructor(args?: {
		mid: string;
		createdTime: Int64;
		contacts: Contact[];
		notificationDisabled: boolean;
		memberMids: string[];
	});
}

export declare class ContactModification {
	type: ModificationType;
	luid: string;
	phones: string[];
	emails: string[];
	userids: string[];

	constructor(args?: {
		type: ModificationType;
		luid: string;
		phones: string[];
		emails: string[];
		userids: string[];
	});
}

export declare class GetE2EEKeyBackupCertificatesRequest {}

export declare class GetE2EEKeyBackupCertificatesResponse {
	urlHashList: string[];

	constructor(args?: { urlHashList: string[] });
}

export declare class DeleteOtherFromChatRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];

	constructor(args?: {
		reqSeq: number;
		chatMid: string;
		targetUserMids: string[];
	});
}

export declare class DeleteOtherFromChatResponse {}

export declare class InviteIntoChatRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];

	constructor(args?: {
		reqSeq: number;
		chatMid: string;
		targetUserMids: string[];
	});
}

export declare class InviteIntoChatResponse {}

export declare class CancelChatInvitationRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];

	constructor(args?: {
		reqSeq: number;
		chatMid: string;
		targetUserMids: string[];
	});
}

export declare class CancelChatInvitationResponse {}

export declare class DeleteSelfFromChatRequest {
	reqSeq: number;
	chatMid: string;
	lastSeenMessageDeliveredTime: Int64;
	lastSeenMessageId: string;
	lastMessageDeliveredTime: Int64;
	lastMessageId: string;

	constructor(args?: {
		reqSeq: number;
		chatMid: string;
		lastSeenMessageDeliveredTime: Int64;
		lastSeenMessageId: string;
		lastMessageDeliveredTime: Int64;
		lastMessageId: string;
	});
}

export declare class DeleteSelfFromChatResponse {}

export declare class FindChatByTicketRequest {
	ticketId: string;

	constructor(args?: { ticketId: string });
}

export declare class FindChatByTicketResponse {
	chat: Chat;

	constructor(args?: { chat: Chat });
}

export declare class RefreshAccessTokenRequest {
	refreshToken: string;

	constructor(args?: { refreshToken: string });
}

export declare class RefreshAccessTokenResponse {
	accessToken: string;
	durationUntilRefreshInSec: Int64;
	retryPolicy: RetryPolicy;
	tokenIssueTimeEpochSec: Int64;
	refreshToken: string;

	constructor(args?: {
		accessToken: string;
		durationUntilRefreshInSec: Int64;
		retryPolicy: RetryPolicy;
		tokenIssueTimeEpochSec: Int64;
		refreshToken: string;
	});
}

export declare class RetryPolicy {
	initialDelayInMillis: Int64;
	maxDelayInMillis: Int64;
	multiplier: number;
	jitterRate: number;

	constructor(args?: {
		initialDelayInMillis: Int64;
		maxDelayInMillis: Int64;
		multiplier: number;
		jitterRate: number;
	});
}

export declare class TMessageReadRange {
	chatId: string;
	ranges: { [k: string]: TMessageReadRangeEntry[] };

	constructor(args?: {
		chatId: string;
		ranges: { [k: string]: TMessageReadRangeEntry[] };
	});
}

export declare class TMessageReadRangeEntry {
	startMessageId: Int64;
	endMessageId: Int64;
	startTime: Int64;
	endTime: Int64;

	constructor(args?: {
		startMessageId: Int64;
		endMessageId: Int64;
		startTime: Int64;
		endTime: Int64;
	});
}

export declare class BuddyDetail {
	mid: string;
	memberCount: Int64;
	onAir: boolean;
	businessAccount: boolean;
	addable: boolean;
	acceptableContentTypes: ContentType[];
	capableMyhome: boolean;
	freePhoneCallable: boolean;
	phoneNumberToDial: string;
	needPermissionApproval: boolean;
	channelId: string;
	channelProviderName: string;
	iconType: number;
	botType: BotType;
	showRichMenu: boolean;
	richMenuRevision: Int64;
	onAirLabel: BuddyOnAirLabel;
	useTheme: boolean;
	themeId: string;
	useBar: boolean;
	barRevision: Int64;
	useBackground: boolean;
	backgroundId: string;
	statusBarEnabled: boolean;
	statusBarRevision: Int64;
	searchId: string;
	onAirVersion: number;
	blockable: boolean;
	botActiveStatus: BuddyBotActiveStatus;
	membershipEnabled: boolean;

	constructor(args?: {
		mid: string;
		memberCount: Int64;
		onAir: boolean;
		businessAccount: boolean;
		addable: boolean;
		acceptableContentTypes: ContentType[];
		capableMyhome: boolean;
		freePhoneCallable: boolean;
		phoneNumberToDial: string;
		needPermissionApproval: boolean;
		channelId: string;
		channelProviderName: string;
		iconType: number;
		botType: BotType;
		showRichMenu: boolean;
		richMenuRevision: Int64;
		onAirLabel: BuddyOnAirLabel;
		useTheme: boolean;
		themeId: string;
		useBar: boolean;
		barRevision: Int64;
		useBackground: boolean;
		backgroundId: string;
		statusBarEnabled: boolean;
		statusBarRevision: Int64;
		searchId: string;
		onAirVersion: number;
		blockable: boolean;
		botActiveStatus: BuddyBotActiveStatus;
		membershipEnabled: boolean;
	});
}

export declare class MessageBoxV2MessageId {
	deliveredTime: Int64;
	messageId: Int64;

	constructor(args?: { deliveredTime: Int64; messageId: Int64 });
}

export declare class GetPreviousMessagesV2Request {
	messageBoxId: string;
	endMessageId: MessageBoxV2MessageId;
	messagesCount: number;
	withReadCount: boolean;
	receivedOnly: boolean;

	constructor(args?: {
		messageBoxId: string;
		endMessageId: MessageBoxV2MessageId;
		messagesCount: number;
		withReadCount: boolean;
		receivedOnly: boolean;
	});
}

export declare class ChannelToken {
	token: string;
	obsToken: string;
	expiration: Int64;
	refreshToken: string;
	channelAccessToken: string;

	constructor(args?: {
		token: string;
		obsToken: string;
		expiration: Int64;
		refreshToken: string;
		channelAccessToken: string;
	});
}

export declare class GroupCall {
	online: boolean;
	chatMid: string;
	hostMids: string;
	memberMids: string[];
	started: Int64;
	mediaType: GroupCallMediaType;
	protocol: GroupCallProtocol;

	constructor(args?: {
		online: boolean;
		chatMid: string;
		hostMids: string;
		memberMids: string[];
		started: Int64;
		mediaType: GroupCallMediaType;
		protocol: GroupCallProtocol;
	});
}

export declare class SyncResponse {
	operationResponse: OperationResponse;
	fullSyncResponse: FullSyncResponse;
	partialFullSyncResponse: PartialFullSyncResponse;

	constructor(args?: {
		operationResponse: OperationResponse;
		fullSyncResponse: FullSyncResponse;
		partialFullSyncResponse: PartialFullSyncResponse;
	});
}

export declare class OperationResponse {
	operations: Operation[];
	hasMoreOps: boolean;
	globalEvents: TGlobalEvents;
	individualEvents: TIndividualEvents;

	constructor(args?: {
		operations: Operation[];
		hasMoreOps: boolean;
		globalEvents: TGlobalEvents;
		individualEvents: TIndividualEvents;
	});
}

export declare class FullSyncResponse {
	reasons: SyncTriggerReason[];
	nextRevision: Int64;

	constructor(args?: { reasons: SyncTriggerReason[]; nextRevision: Int64 });
}

export declare class PartialFullSyncResponse {
	targetCategories: { [k: number /*SyncCategories*/]: Int64 };

	constructor(args?: {
		targetCategories: { [k: number /*SyncCategories*/]: Int64 };
	});
}

export declare class TGlobalEvents {
	events: { [k: number /*GlobalEventType*/]: GlobalEvent };
	lastRevision: Int64;

	constructor(args?: {
		events: { [k: number /*GlobalEventType*/]: GlobalEvent };
		lastRevision: Int64;
	});
}

export declare class TIndividualEvents {
	events: NotificationStatus[];
	lastRevision: Int64;

	constructor(args?: { events: NotificationStatus[]; lastRevision: Int64 });
}

export declare class GlobalEvent {
	type: GlobalEventType;
	minDelayInMinutes: number;
	maxDelayInMinutes: number;
	createTimeMillis: Int64;
	maxDelayHardLimit: boolean;

	constructor(args?: {
		type: GlobalEventType;
		minDelayInMinutes: number;
		maxDelayInMinutes: number;
		createTimeMillis: Int64;
		maxDelayHardLimit: boolean;
	});
}

export declare class DetermineMediaMessageFlowResponse {
	flowMap: { [k: number /*ContentType*/]: MediaMessageFlow };
	cacheTtlMillis: Int64;

	constructor(args?: {
		flowMap: { [k: number /*ContentType*/]: MediaMessageFlow };
		cacheTtlMillis: Int64;
	});
}

export declare class ChatRoomAnnouncementContentMetadata {
	replace: string;
	sticonOwnership: string;
	postNotificationMetadata: string;

	constructor(args?: {
		replace: string;
		sticonOwnership: string;
		postNotificationMetadata: string;
	});
}

export declare class ChatRoomAnnouncementContents {
	displayFields: number;
	text: string;
	link: string;
	thumbnail: string;
	contentMetadata: ChatRoomAnnouncementContentMetadata;

	constructor(args?: {
		displayFields: number;
		text: string;
		link: string;
		thumbnail: string;
		contentMetadata: ChatRoomAnnouncementContentMetadata;
	});
}

export declare class ChatRoomAnnouncement {
	announcementSeq: Int64;
	type: number;
	contents: ChatRoomAnnouncementContents;
	creatorMid: string;
	createdTime: Int64;
	deletePermission: number;

	constructor(args?: {
		announcementSeq: Int64;
		type: number;
		contents: ChatRoomAnnouncementContents;
		creatorMid: string;
		createdTime: Int64;
		deletePermission: number;
	});
}

export declare class DisasterInfo {
	disasterId: string;
	title: string;
	region: string;
	disasterDescription: string;
	seeMoreUrl: string;
	status: number;

	constructor(args?: {
		disasterId: string;
		title: string;
		region: string;
		disasterDescription: string;
		seeMoreUrl: string;
		status: number;
	});
}

export declare class GetDisasterCasesRequest {}

export declare class GetDisasterCasesResponse {
	disasters: DisasterInfo[];
	messageTemplate: string[];
	ttlInMillis: Int64;

	constructor(args?: {
		disasters: DisasterInfo[];
		messageTemplate: string[];
		ttlInMillis: Int64;
	});
}

export declare class SquareMessage {
	message: Message;
	fromType: MIDType;
	squareMessageRevision: Int64;
	state: SquareMessageState;

	constructor(args?: {
		message: Message;
		fromType: MIDType;
		squareMessageRevision: Int64;
		state: SquareMessageState;
	});
}

export declare class SquarePreference {
	favoriteTimestamp: Int64;
	notiForNewJoinRequest: boolean;

	constructor(args?: {
		favoriteTimestamp: Int64;
		notiForNewJoinRequest: boolean;
	});
}

export declare class SquareMember {
	squareMemberMid: string;
	squareMid: string;
	displayName: string;
	profileImageObsHash: string;
	ableToReceiveMessage: boolean;
	membershipState: SquareMembershipState;
	role: SquareMemberRole;
	revision: Int64;
	preference: SquarePreference;
	joinMessage: string;

	constructor(args?: {
		squareMemberMid: string;
		squareMid: string;
		displayName: string;
		profileImageObsHash: string;
		ableToReceiveMessage: boolean;
		membershipState: SquareMembershipState;
		role: SquareMemberRole;
		revision: Int64;
		preference: SquarePreference;
		joinMessage: string;
	});
}

export declare class SquareMessageReaction {
	type: MessageReactionType;
	reactor: SquareMember;
	createdAt: Int64;
	updatedAt: Int64;

	constructor(args?: {
		type: MessageReactionType;
		reactor: SquareMember;
		createdAt: Int64;
		updatedAt: Int64;
	});
}

export declare class SquareMessageReactionStatus {
	totalCount: number;
	countByReactionType: { [k: number /*MessageReactionType*/]: number };
	myReaction: SquareMessageReaction;

	constructor(args?: {
		totalCount: number;
		countByReactionType: { [k: number /*MessageReactionType*/]: number };
		myReaction: SquareMessageReaction;
	});
}

export declare class SquareEventReceiveMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	senderDisplayName: string;
	messageReactionStatus: SquareMessageReactionStatus;
	senderRevision: Int64;
	squareMid: string;

	constructor(args?: {
		squareChatMid: string;
		squareMessage: SquareMessage;
		senderDisplayName: string;
		messageReactionStatus: SquareMessageReactionStatus;
		senderRevision: Int64;
		squareMid: string;
	});
}

export declare class SquareEventSendMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	reqSeq: number;
	senderDisplayName: string;
	messageReactionStatus: SquareMessageReactionStatus;

	constructor(args?: {
		squareChatMid: string;
		squareMessage: SquareMessage;
		reqSeq: number;
		senderDisplayName: string;
		messageReactionStatus: SquareMessageReactionStatus;
	});
}

export declare class SquareEventMutateMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	reqSeq: number;
	senderDisplayName: string;

	constructor(args?: {
		squareChatMid: string;
		squareMessage: SquareMessage;
		reqSeq: number;
		senderDisplayName: string;
	});
}

export declare class SquareEventNotifiedJoinSquareChat {
	squareChatMid: string;
	joinedMember: SquareMember;

	constructor(args?: { squareChatMid: string; joinedMember: SquareMember });
}

export declare class SquareMemberRelation {
	state: SquareMemberRelationState;
	revision: Int64;

	constructor(args?: { state: SquareMemberRelationState; revision: Int64 });
}

export declare class SquareEventNotifiedInviteIntoSquareChat {
	squareChatMid: string;
	invitees: SquareMember[];
	invitor: SquareMember;
	invitorRelation: SquareMemberRelation;

	constructor(args?: {
		squareChatMid: string;
		invitees: SquareMember[];
		invitor: SquareMember;
		invitorRelation: SquareMemberRelation;
	});
}

export declare class SquareEventNotifiedLeaveSquareChat {
	squareChatMid: string;
	squareMemberMid: string;
	sayGoodbye: boolean;
	squareMember: SquareMember;

	constructor(args?: {
		squareChatMid: string;
		squareMemberMid: string;
		sayGoodbye: boolean;
		squareMember: SquareMember;
	});
}

export declare class SquareEventNotifiedDestroyMessage {
	squareChatMid: string;
	messageId: string;

	constructor(args?: { squareChatMid: string; messageId: string });
}

export declare class SquareEventNotifiedMarkAsRead {
	squareChatMid: string;
	sMemberMid: string;
	messageId: string;

	constructor(args?: {
		squareChatMid: string;
		sMemberMid: string;
		messageId: string;
	});
}

export declare class SquareEventNotifiedUpdateSquareMemberProfile {
	squareChatMid: string;
	squareMember: SquareMember;

	constructor(args?: { squareChatMid: string; squareMember: SquareMember });
}

export declare class SquareEventNotifiedKickoutFromSquare {
	squareChatMid: string;
	kickees: SquareMember[];
	kicker: SquareMember;

	constructor(args?: {
		squareChatMid: string;
		kickees: SquareMember[];
		kicker: SquareMember;
	});
}

export declare class ApprovalValue {
	message: string;

	constructor(args?: { message: string });
}

export declare class CodeValue {
	code: string;

	constructor(args?: { code: string });
}

export declare class SquareJoinMethodValue {
	approvalValue: ApprovalValue;
	codeValue: CodeValue;

	constructor(args?: { approvalValue: ApprovalValue; codeValue: CodeValue });
}

export declare class SquareJoinMethod {
	type: SquareJoinMethodType;
	value: SquareJoinMethodValue;

	constructor(args?: {
		type: SquareJoinMethodType;
		value: SquareJoinMethodValue;
	});
}

export declare class Square {
	mid: string;
	name: string;
	welcomeMessage: string;
	profileImageObsHash: string;
	desc: string;
	searchable: boolean;
	type: SquareType;
	categoryId: number;
	invitationURL: string;
	revision: Int64;
	ableToUseInvitationTicket: boolean;
	state: SquareState;
	emblems: SquareEmblem[];
	joinMethod: SquareJoinMethod;
	adultOnly: BooleanState;
	svcTags: string[];
	createdAt: Int64;

	constructor(args?: {
		mid: string;
		name: string;
		welcomeMessage: string;
		profileImageObsHash: string;
		desc: string;
		searchable: boolean;
		type: SquareType;
		categoryId: number;
		invitationURL: string;
		revision: Int64;
		ableToUseInvitationTicket: boolean;
		state: SquareState;
		emblems: SquareEmblem[];
		joinMethod: SquareJoinMethod;
		adultOnly: BooleanState;
		svcTags: string[];
		createdAt: Int64;
	});
}

export declare class SquareEventNotifiedShutdownSquare {
	squareChatMid: string;
	square: Square;

	constructor(args?: { squareChatMid: string; square: Square });
}

export declare class MessageVisibility {
	showJoinMessage: boolean;
	showLeaveMessage: boolean;
	showKickoutMessage: boolean;

	constructor(args?: {
		showJoinMessage: boolean;
		showLeaveMessage: boolean;
		showKickoutMessage: boolean;
	});
}

export declare class SquareChat {
	squareChatMid: string;
	squareMid: string;
	type: SquareChatType;
	name: string;
	chatImageObsHash: string;
	squareChatRevision: Int64;
	maxMemberCount: number;
	state: SquareChatState;
	invitationUrl: string;
	messageVisibility: MessageVisibility;
	ableToSearchMessage: BooleanState;

	constructor(args?: {
		squareChatMid: string;
		squareMid: string;
		type: SquareChatType;
		name: string;
		chatImageObsHash: string;
		squareChatRevision: Int64;
		maxMemberCount: number;
		state: SquareChatState;
		invitationUrl: string;
		messageVisibility: MessageVisibility;
		ableToSearchMessage: BooleanState;
	});
}

export declare class SquareEventNotifiedDeleteSquareChat {
	squareChat: SquareChat;

	constructor(args?: { squareChat: SquareChat });
}

export declare class SquareEventNotifiedUpdateSquareChatProfileName {
	squareChatMid: string;
	editor: SquareMember;
	updatedChatName: string;

	constructor(args?: {
		squareChatMid: string;
		editor: SquareMember;
		updatedChatName: string;
	});
}

export declare class SquareEventNotifiedUpdateSquareChatProfileImage {
	squareChatMid: string;
	editor: SquareMember;

	constructor(args?: { squareChatMid: string; editor: SquareMember });
}

export declare class SquareEventNotifiedUpdateSquareChatMaxMemberCount {
	squareChatMid: string;
	maxMemberCount: number;
	editor: SquareMember;

	constructor(args?: {
		squareChatMid: string;
		maxMemberCount: number;
		editor: SquareMember;
	});
}

export declare class SquareEventNotifiedAddBot {
	squareChatMid: string;
	squareMember: SquareMember;
	botMid: string;
	botDisplayName: string;

	constructor(args?: {
		squareChatMid: string;
		squareMember: SquareMember;
		botMid: string;
		botDisplayName: string;
	});
}

export declare class SquareEventNotifiedRemoveBot {
	squareChatMid: string;
	squareMember: SquareMember;
	botMid: string;
	botDisplayName: string;

	constructor(args?: {
		squareChatMid: string;
		squareMember: SquareMember;
		botMid: string;
		botDisplayName: string;
	});
}

export declare class SquareEventNotifiedUpdateReadonlyChat {
	squareChatMid: string;
	readonly: boolean;

	constructor(args?: { squareChatMid: string; readonly: boolean });
}

export declare class MessageStatusContents {
	messageReactionStatus: SquareMessageReactionStatus;

	constructor(args?: { messageReactionStatus: SquareMessageReactionStatus });
}

export declare class SquareMessageStatus {
	squareChatMid: string;
	globalMessageId: string;
	type: MessageStatusType;
	contents: MessageStatusContents;
	publishedAt: Int64;

	constructor(args?: {
		squareChatMid: string;
		globalMessageId: string;
		type: MessageStatusType;
		contents: MessageStatusContents;
		publishedAt: Int64;
	});
}

export declare class SquareEventNotifiedUpdateMessageStatus {
	squareChatMid: string;
	messageId: string;
	messageStatus: SquareMessageStatus;

	constructor(args?: {
		squareChatMid: string;
		messageId: string;
		messageStatus: SquareMessageStatus;
	});
}

export declare class UrlButton {
	text: string;
	url: string;

	constructor(args?: { text: string; url: string });
}

export declare class TextButton {
	text: string;

	constructor(args?: { text: string });
}

export declare class OkButton {
	text: string;

	constructor(args?: { text: string });
}

export declare class ButtonContent {
	urlButton: UrlButton;
	textButton: TextButton;
	okButton: OkButton;

	constructor(args?: {
		urlButton: UrlButton;
		textButton: TextButton;
		okButton: OkButton;
	});
}

export declare class SquareEventChatPopup {
	squareChatMid: string;
	popupId: Int64;
	flexJson: string;
	button: ButtonContent;

	constructor(args?: {
		squareChatMid: string;
		popupId: Int64;
		flexJson: string;
		button: ButtonContent;
	});
}

export declare class SquareEventNotifiedSystemMessage {
	squareChatMid: string;
	text: string;

	constructor(args?: { squareChatMid: string; text: string });
}

export declare class SquareEventNotifiedUpdateSquare {
	squareChatMid: string;
	square: Square;

	constructor(args?: { squareChatMid: string; square: Square });
}

export declare class SquareStatus {
	memberCount: number;
	joinRequestCount: number;
	lastJoinRequestAt: Int64;
	openChatCount: number;

	constructor(args?: {
		memberCount: number;
		joinRequestCount: number;
		lastJoinRequestAt: Int64;
		openChatCount: number;
	});
}

export declare class SquareEventNotifiedUpdateSquareStatus {
	squareChatMid: string;
	squareStatus: SquareStatus;

	constructor(args?: { squareChatMid: string; squareStatus: SquareStatus });
}

export declare class SquareEventNotifiedUpdateSquareMember {
	squareChatMid: string;
	squareMemberMid: string;
	squareMember: SquareMember;

	constructor(args?: {
		squareChatMid: string;
		squareMemberMid: string;
		squareMember: SquareMember;
	});
}

export declare class SquareEventNotifiedUpdateSquareChat {
	squareMid: string;
	squareChatMid: string;
	squareChat: SquareChat;

	constructor(args?: {
		squareMid: string;
		squareChatMid: string;
		squareChat: SquareChat;
	});
}

export declare class SquareChatStatusWithoutMessage {
	memberCount: number;
	unreadMessageCount: number;
	markedAsReadMessageId: string;
	mentionedMessageId: string;
	notifiedMessageType: NotifiedMessageType;

	constructor(args?: {
		memberCount: number;
		unreadMessageCount: number;
		markedAsReadMessageId: string;
		mentionedMessageId: string;
		notifiedMessageType: NotifiedMessageType;
	});
}

export declare class SquareEventNotifiedUpdateSquareChatStatus {
	squareChatMid: string;
	statusWithoutMessage: SquareChatStatusWithoutMessage;

	constructor(args?: {
		squareChatMid: string;
		statusWithoutMessage: SquareChatStatusWithoutMessage;
	});
}

export declare class SquareChatMember {
	squareMemberMid: string;
	squareChatMid: string;
	revision: Int64;
	membershipState: SquareChatMembershipState;
	notificationForMessage: boolean;
	notificationForNewMember: boolean;

	constructor(args?: {
		squareMemberMid: string;
		squareChatMid: string;
		revision: Int64;
		membershipState: SquareChatMembershipState;
		notificationForMessage: boolean;
		notificationForNewMember: boolean;
	});
}

export declare class SquareEventNotifiedUpdateSquareChatMember {
	squareChatMid: string;
	squareChatMember: SquareChatMember;

	constructor(args?: {
		squareChatMid: string;
		squareChatMember: SquareChatMember;
	});
}

export declare class SquareAuthority {
	squareMid: string;
	updateSquareProfile: SquareMemberRole;
	inviteNewMember: SquareMemberRole;
	approveJoinRequest: SquareMemberRole;
	createPost: SquareMemberRole;
	createOpenSquareChat: SquareMemberRole;
	deleteSquareChatOrPost: SquareMemberRole;
	removeSquareMember: SquareMemberRole;
	grantRole: SquareMemberRole;
	enableInvitationTicket: SquareMemberRole;
	revision: Int64;
	createSquareChatAnnouncement: SquareMemberRole;
	updateMaxChatMemberCount: SquareMemberRole;
	useReadonlyDefaultChat: SquareMemberRole;

	constructor(args?: {
		squareMid: string;
		updateSquareProfile: SquareMemberRole;
		inviteNewMember: SquareMemberRole;
		approveJoinRequest: SquareMemberRole;
		createPost: SquareMemberRole;
		createOpenSquareChat: SquareMemberRole;
		deleteSquareChatOrPost: SquareMemberRole;
		removeSquareMember: SquareMemberRole;
		grantRole: SquareMemberRole;
		enableInvitationTicket: SquareMemberRole;
		revision: Int64;
		createSquareChatAnnouncement: SquareMemberRole;
		updateMaxChatMemberCount: SquareMemberRole;
		useReadonlyDefaultChat: SquareMemberRole;
	});
}

export declare class SquareEventNotifiedUpdateSquareAuthority {
	squareMid: string;
	squareAuthority: SquareAuthority;

	constructor(args?: { squareMid: string; squareAuthority: SquareAuthority });
}

export declare class SquareFeature {
	controlState: SquareFeatureControlState;
	booleanValue: BooleanState;

	constructor(args?: {
		controlState: SquareFeatureControlState;
		booleanValue: BooleanState;
	});
}

export declare class SquareFeatureSet {
	squareMid: string;
	revision: Int64;
	creatingSecretSquareChat: SquareFeature;
	invitingIntoOpenSquareChat: SquareFeature;
	creatingSquareChat: SquareFeature;
	readonlyDefaultChat: SquareFeature;
	showingAdvertisement: SquareFeature;
	delegateJoinToPlug: SquareFeature;
	delegateKickOutToPlug: SquareFeature;
	disableUpdateJoinMethod: SquareFeature;
	disableTransferAdmin: SquareFeature;
	creatingLiveTalk: SquareFeature;
	disableUpdateSearchable: SquareFeature;

	constructor(args?: {
		squareMid: string;
		revision: Int64;
		creatingSecretSquareChat: SquareFeature;
		invitingIntoOpenSquareChat: SquareFeature;
		creatingSquareChat: SquareFeature;
		readonlyDefaultChat: SquareFeature;
		showingAdvertisement: SquareFeature;
		delegateJoinToPlug: SquareFeature;
		delegateKickOutToPlug: SquareFeature;
		disableUpdateJoinMethod: SquareFeature;
		disableTransferAdmin: SquareFeature;
		creatingLiveTalk: SquareFeature;
		disableUpdateSearchable: SquareFeature;
	});
}

export declare class NoteStatus {
	noteCount: number;
	latestCreatedAt: Int64;

	constructor(args?: { noteCount: number; latestCreatedAt: Int64 });
}

export declare class SquareEventNotifiedCreateSquareMember {
	square: Square;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareMember: SquareMember;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;

	constructor(args?: {
		square: Square;
		squareAuthority: SquareAuthority;
		squareStatus: SquareStatus;
		squareMember: SquareMember;
		squareFeatureSet: SquareFeatureSet;
		noteStatus: NoteStatus;
	});
}

export declare class SquareChatStatus {
	lastMessage: SquareMessage;
	senderDisplayName: string;
	otherStatus: SquareChatStatusWithoutMessage;

	constructor(args?: {
		lastMessage: SquareMessage;
		senderDisplayName: string;
		otherStatus: SquareChatStatusWithoutMessage;
	});
}

export declare class SquareChatFeature {
	controlState: SquareChatFeatureControlState;
	booleanValue: BooleanState;

	constructor(args?: {
		controlState: SquareChatFeatureControlState;
		booleanValue: BooleanState;
	});
}

export declare class SquareChatFeatureSet {
	squareChatMid: string;
	revision: Int64;
	disableUpdateMaxChatMemberCount: SquareChatFeature;
	disableMarkAsReadEvent: SquareChatFeature;

	constructor(args?: {
		squareChatMid: string;
		revision: Int64;
		disableUpdateMaxChatMemberCount: SquareChatFeature;
		disableMarkAsReadEvent: SquareChatFeature;
	});
}

export declare class SquareEventNotifiedCreateSquareChatMember {
	chat: SquareChat;
	chatStatus: SquareChatStatus;
	chatMember: SquareChatMember;
	joinedAt: Int64;
	peerSquareMember: SquareMember;
	squareChatFeatureSet: SquareChatFeatureSet;

	constructor(args?: {
		chat: SquareChat;
		chatStatus: SquareChatStatus;
		chatMember: SquareChatMember;
		joinedAt: Int64;
		peerSquareMember: SquareMember;
		squareChatFeatureSet: SquareChatFeatureSet;
	});
}

export declare class SquareEventNotifiedUpdateSquareMemberRelation {
	squareMid: string;
	myMemberMid: string;
	targetSquareMemberMid: string;
	squareMemberRelation: SquareMemberRelation;

	constructor(args?: {
		squareMid: string;
		myMemberMid: string;
		targetSquareMemberMid: string;
		squareMemberRelation: SquareMemberRelation;
	});
}

export declare class SquareEventNotifiedUpdateSquareFeatureSet {
	squareFeatureSet: SquareFeatureSet;

	constructor(args?: { squareFeatureSet: SquareFeatureSet });
}

export declare class SquareEventNotifiedUpdateSquareChatFeatureSet {
	squareChatFeatureSet: SquareChatFeatureSet;

	constructor(args?: { squareChatFeatureSet: SquareChatFeatureSet });
}

export declare class SquareEventNotifiedUpdateSquareNoteStatus {
	squareMid: string;
	noteStatus: NoteStatus;

	constructor(args?: { squareMid: string; noteStatus: NoteStatus });
}

export declare class SquareEventNotifiedUpdateSquareChatAnnouncement {
	squareChatMid: string;
	announcementSeq: Int64;

	constructor(args?: { squareChatMid: string; announcementSeq: Int64 });
}

export declare class SquareEventNotificationJoinRequest {
	squareMid: string;
	squareName: string;
	requestMemberName: string;
	profileImageObsHash: string;

	constructor(args?: {
		squareMid: string;
		squareName: string;
		requestMemberName: string;
		profileImageObsHash: string;
	});
}

export declare class SquareEventNotificationMemberUpdate {
	squareMid: string;
	squareName: string;
	profileImageObsHash: string;

	constructor(args?: {
		squareMid: string;
		squareName: string;
		profileImageObsHash: string;
	});
}

export declare class SquareEventNotificationSquareDelete {
	squareMid: string;
	squareName: string;
	profileImageObsHash: string;

	constructor(args?: {
		squareMid: string;
		squareName: string;
		profileImageObsHash: string;
	});
}

export declare class SquareEventNotificationSquareChatDelete {
	squareChatMid: string;
	squareChatName: string;
	profileImageObsHash: string;

	constructor(args?: {
		squareChatMid: string;
		squareChatName: string;
		profileImageObsHash: string;
	});
}

export declare class SquareEventNotificationMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	senderDisplayName: string;
	unreadCount: number;
	requiredToFetchChatEvents: boolean;
	mentionedMessageId: string;
	notifiedMessageType: NotifiedMessageType;
	reqSeq: number;

	constructor(args?: {
		squareChatMid: string;
		squareMessage: SquareMessage;
		senderDisplayName: string;
		unreadCount: number;
		requiredToFetchChatEvents: boolean;
		mentionedMessageId: string;
		notifiedMessageType: NotifiedMessageType;
		reqSeq: number;
	});
}

export declare class SquareEventNotificationPostAnnouncement {
	squareMid: string;
	squareName: string;
	squareProfileImageObsHash: string;
	actionUri: string;

	constructor(args?: {
		squareMid: string;
		squareName: string;
		squareProfileImageObsHash: string;
		actionUri: string;
	});
}

export declare class SquareEventNotificationPost {
	squareMid: string;
	notificationPostType: NotificationPostType;
	thumbnailObsHash: string;
	text: string;
	actionUri: string;

	constructor(args?: {
		squareMid: string;
		notificationPostType: NotificationPostType;
		thumbnailObsHash: string;
		text: string;
		actionUri: string;
	});
}

export declare class SquareEventNotificationNewChatMember {
	squareChatMid: string;
	squareChatName: string;

	constructor(args?: { squareChatMid: string; squareChatName: string });
}

export declare class SquareEventNotificationMessageReaction {
	squareChatMid: string;
	messageId: string;
	squareChatName: string;
	reactorName: string;
	thumbnailObsHash: string;
	messageText: string;
	type: MessageReactionType;

	constructor(args?: {
		squareChatMid: string;
		messageId: string;
		squareChatName: string;
		reactorName: string;
		thumbnailObsHash: string;
		messageText: string;
		type: MessageReactionType;
	});
}

export declare class SquareEventPayload {
	receiveMessage: SquareEventReceiveMessage;
	sendMessage: SquareEventSendMessage;
	notifiedJoinSquareChat: SquareEventNotifiedJoinSquareChat;
	notifiedInviteIntoSquareChat: SquareEventNotifiedInviteIntoSquareChat;
	notifiedLeaveSquareChat: SquareEventNotifiedLeaveSquareChat;
	notifiedDestroyMessage: SquareEventNotifiedDestroyMessage;
	notifiedMarkAsRead: SquareEventNotifiedMarkAsRead;
	notifiedUpdateSquareMemberProfile: SquareEventNotifiedUpdateSquareMemberProfile;
	notifiedUpdateSquare: SquareEventNotifiedUpdateSquare;
	notifiedUpdateSquareMember: SquareEventNotifiedUpdateSquareMember;
	notifiedUpdateSquareChat: SquareEventNotifiedUpdateSquareChat;
	notifiedUpdateSquareChatMember: SquareEventNotifiedUpdateSquareChatMember;
	notifiedUpdateSquareAuthority: SquareEventNotifiedUpdateSquareAuthority;
	notifiedUpdateSquareStatus: SquareEventNotifiedUpdateSquareStatus;
	notifiedUpdateSquareChatStatus: SquareEventNotifiedUpdateSquareChatStatus;
	notifiedCreateSquareMember: SquareEventNotifiedCreateSquareMember;
	notifiedCreateSquareChatMember: SquareEventNotifiedCreateSquareChatMember;
	notifiedUpdateSquareMemberRelation: SquareEventNotifiedUpdateSquareMemberRelation;
	notifiedShutdownSquare: SquareEventNotifiedShutdownSquare;
	notifiedKickoutFromSquare: SquareEventNotifiedKickoutFromSquare;
	notifiedDeleteSquareChat: SquareEventNotifiedDeleteSquareChat;
	notificationJoinRequest: SquareEventNotificationJoinRequest;
	notificationJoined: SquareEventNotificationMemberUpdate;
	notificationPromoteCoadmin: SquareEventNotificationMemberUpdate;
	notificationPromoteAdmin: SquareEventNotificationMemberUpdate;
	notificationDemoteMember: SquareEventNotificationMemberUpdate;
	notificationKickedOut: SquareEventNotificationMemberUpdate;
	notificationSquareDelete: SquareEventNotificationSquareDelete;
	notificationSquareChatDelete: SquareEventNotificationSquareChatDelete;
	notificationMessage: SquareEventNotificationMessage;
	notifiedUpdateSquareChatProfileName: SquareEventNotifiedUpdateSquareChatProfileName;
	notifiedUpdateSquareChatProfileImage: SquareEventNotifiedUpdateSquareChatProfileImage;
	notifiedUpdateSquareFeatureSet: SquareEventNotifiedUpdateSquareFeatureSet;
	notifiedAddBot: SquareEventNotifiedAddBot;
	notifiedRemoveBot: SquareEventNotifiedRemoveBot;
	notifiedUpdateSquareNoteStatus: SquareEventNotifiedUpdateSquareNoteStatus;
	notifiedUpdateSquareChatAnnouncement: SquareEventNotifiedUpdateSquareChatAnnouncement;
	notifiedUpdateSquareChatMaxMemberCount: SquareEventNotifiedUpdateSquareChatMaxMemberCount;
	notificationPostAnnouncement: SquareEventNotificationPostAnnouncement;
	notificationPost: SquareEventNotificationPost;
	mutateMessage: SquareEventMutateMessage;
	notificationNewChatMember: SquareEventNotificationNewChatMember;
	notifiedUpdateReadonlyChat: SquareEventNotifiedUpdateReadonlyChat;
	notifiedUpdateMessageStatus: SquareEventNotifiedUpdateMessageStatus;
	notificationMessageReaction: SquareEventNotificationMessageReaction;
	chatPopup: SquareEventChatPopup;
	notifiedSystemMessage: SquareEventNotifiedSystemMessage;
	notifiedUpdateSquareChatFeatureSet: SquareEventNotifiedUpdateSquareChatFeatureSet;

	constructor(args?: {
		receiveMessage: SquareEventReceiveMessage;
		sendMessage: SquareEventSendMessage;
		notifiedJoinSquareChat: SquareEventNotifiedJoinSquareChat;
		notifiedInviteIntoSquareChat: SquareEventNotifiedInviteIntoSquareChat;
		notifiedLeaveSquareChat: SquareEventNotifiedLeaveSquareChat;
		notifiedDestroyMessage: SquareEventNotifiedDestroyMessage;
		notifiedMarkAsRead: SquareEventNotifiedMarkAsRead;
		notifiedUpdateSquareMemberProfile: SquareEventNotifiedUpdateSquareMemberProfile;
		notifiedUpdateSquare: SquareEventNotifiedUpdateSquare;
		notifiedUpdateSquareMember: SquareEventNotifiedUpdateSquareMember;
		notifiedUpdateSquareChat: SquareEventNotifiedUpdateSquareChat;
		notifiedUpdateSquareChatMember: SquareEventNotifiedUpdateSquareChatMember;
		notifiedUpdateSquareAuthority: SquareEventNotifiedUpdateSquareAuthority;
		notifiedUpdateSquareStatus: SquareEventNotifiedUpdateSquareStatus;
		notifiedUpdateSquareChatStatus: SquareEventNotifiedUpdateSquareChatStatus;
		notifiedCreateSquareMember: SquareEventNotifiedCreateSquareMember;
		notifiedCreateSquareChatMember: SquareEventNotifiedCreateSquareChatMember;
		notifiedUpdateSquareMemberRelation: SquareEventNotifiedUpdateSquareMemberRelation;
		notifiedShutdownSquare: SquareEventNotifiedShutdownSquare;
		notifiedKickoutFromSquare: SquareEventNotifiedKickoutFromSquare;
		notifiedDeleteSquareChat: SquareEventNotifiedDeleteSquareChat;
		notificationJoinRequest: SquareEventNotificationJoinRequest;
		notificationJoined: SquareEventNotificationMemberUpdate;
		notificationPromoteCoadmin: SquareEventNotificationMemberUpdate;
		notificationPromoteAdmin: SquareEventNotificationMemberUpdate;
		notificationDemoteMember: SquareEventNotificationMemberUpdate;
		notificationKickedOut: SquareEventNotificationMemberUpdate;
		notificationSquareDelete: SquareEventNotificationSquareDelete;
		notificationSquareChatDelete: SquareEventNotificationSquareChatDelete;
		notificationMessage: SquareEventNotificationMessage;
		notifiedUpdateSquareChatProfileName: SquareEventNotifiedUpdateSquareChatProfileName;
		notifiedUpdateSquareChatProfileImage: SquareEventNotifiedUpdateSquareChatProfileImage;
		notifiedUpdateSquareFeatureSet: SquareEventNotifiedUpdateSquareFeatureSet;
		notifiedAddBot: SquareEventNotifiedAddBot;
		notifiedRemoveBot: SquareEventNotifiedRemoveBot;
		notifiedUpdateSquareNoteStatus: SquareEventNotifiedUpdateSquareNoteStatus;
		notifiedUpdateSquareChatAnnouncement: SquareEventNotifiedUpdateSquareChatAnnouncement;
		notifiedUpdateSquareChatMaxMemberCount: SquareEventNotifiedUpdateSquareChatMaxMemberCount;
		notificationPostAnnouncement: SquareEventNotificationPostAnnouncement;
		notificationPost: SquareEventNotificationPost;
		mutateMessage: SquareEventMutateMessage;
		notificationNewChatMember: SquareEventNotificationNewChatMember;
		notifiedUpdateReadonlyChat: SquareEventNotifiedUpdateReadonlyChat;
		notifiedUpdateMessageStatus: SquareEventNotifiedUpdateMessageStatus;
		notificationMessageReaction: SquareEventNotificationMessageReaction;
		chatPopup: SquareEventChatPopup;
		notifiedSystemMessage: SquareEventNotifiedSystemMessage;
		notifiedUpdateSquareChatFeatureSet: SquareEventNotifiedUpdateSquareChatFeatureSet;
	});
}

export declare class SquareEvent {
	createdTime: Int64;
	type: SquareEventType;
	payload: SquareEventPayload;
	syncToken: string;
	eventStatus: SquareEventStatus;

	constructor(args?: {
		createdTime: Int64;
		type: SquareEventType;
		payload: SquareEventPayload;
		syncToken: string;
		eventStatus: SquareEventStatus;
	});
}

export declare class SendMessageResponse {
	createdSquareMessage: SquareMessage;

	constructor(args?: { createdSquareMessage: SquareMessage });
}

export declare class UnsendMessageResponse {
	unsentMessage: SquareMessage;

	constructor(args?: { unsentMessage: SquareMessage });
}

export declare class FetchMyEventsResponse {
	subscription: SubscriptionState;
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;

	constructor(args?: {
		subscription: SubscriptionState;
		events: SquareEvent[];
		syncToken: string;
		continuationToken: string;
	});
}

export declare class GetSquareEmidResponse {
	squareEmid: string;

	constructor(args?: { squareEmid: string });
}

export declare class GetSquareMembersBySquareResponse {
	members: SquareMember[];

	constructor(args?: { members: SquareMember[] });
}

export declare class ManualRepairResponse {
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;

	constructor(args?: {
		events: SquareEvent[];
		syncToken: string;
		continuationToken: string;
	});
}

export declare class InviteIntoSquareChatResponse {
	inviteeMids: string[];

	constructor(args?: { inviteeMids: string[] });
}

export declare class InviteToSquareResponse {}

export declare class GetJoinedSquaresResponse {
	squares: Square[];
	members: { [k: string]: SquareMember };
	authorities: { [k: string]: SquareAuthority };
	statuses: { [k: string]: SquareStatus };
	continuationToken: string;
	noteStatuses: { [k: string]: NoteStatus };

	constructor(args?: {
		squares: Square[];
		members: { [k: string]: SquareMember };
		authorities: { [k: string]: SquareAuthority };
		statuses: { [k: string]: SquareStatus };
		continuationToken: string;
		noteStatuses: { [k: string]: NoteStatus };
	});
}

export declare class MarkAsReadResponse {}

export declare class ReactToMessageResponse {
	reaction: SquareMessageReaction;
	status: SquareMessageReactionStatus;

	constructor(args?: {
		reaction: SquareMessageReaction;
		status: SquareMessageReactionStatus;
	});
}

export declare class FindSquareByInvitationTicketResponse {
	square: Square;
	myMembership: SquareMember;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
	chat: SquareChat;
	chatStatus: SquareChatStatus;

	constructor(args?: {
		square: Square;
		myMembership: SquareMember;
		squareAuthority: SquareAuthority;
		squareStatus: SquareStatus;
		squareFeatureSet: SquareFeatureSet;
		noteStatus: NoteStatus;
		chat: SquareChat;
		chatStatus: SquareChatStatus;
	});
}

export declare class SubscriptionState {
	subscriptionId: Int64;
	ttlMillis: Int64;

	constructor(args?: { subscriptionId: Int64; ttlMillis: Int64 });
}

export declare class FetchSquareChatEventsResponse {
	subscription: SubscriptionState;
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;

	constructor(args?: {
		subscription: SubscriptionState;
		events: SquareEvent[];
		syncToken: string;
		continuationToken: string;
	});
}

export declare class GetSquareResponse {
	square: Square;
	myMembership: SquareMember;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;

	constructor(args?: {
		square: Square;
		myMembership: SquareMember;
		squareAuthority: SquareAuthority;
		squareStatus: SquareStatus;
		squareFeatureSet: SquareFeatureSet;
		noteStatus: NoteStatus;
	});
}

export declare class GetJoinableSquareChatsResponse {
	squareChats: SquareChat[];
	continuationToken: string;
	totalSquareChatCount: number;
	squareChatStatuses: { [k: string]: SquareChatStatus };

	constructor(args?: {
		squareChats: SquareChat[];
		continuationToken: string;
		totalSquareChatCount: number;
		squareChatStatuses: { [k: string]: SquareChatStatus };
	});
}

export declare class CreateSquareResponse {
	square: Square;
	creator: SquareMember;
	authority: SquareAuthority;
	status: SquareStatus;
	featureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;
	squareChatFeatureSet: SquareChatFeatureSet;

	constructor(args?: {
		square: Square;
		creator: SquareMember;
		authority: SquareAuthority;
		status: SquareStatus;
		featureSet: SquareFeatureSet;
		noteStatus: NoteStatus;
		squareChat: SquareChat;
		squareChatStatus: SquareChatStatus;
		squareChatMember: SquareChatMember;
		squareChatFeatureSet: SquareChatFeatureSet;
	});
}

export declare class TextMessageAnnouncementContents {
	messageId: string;
	text: string;
	senderSquareMemberMid: string;
	createdAt: Int64;
	senderMid: string;

	constructor(args?: {
		messageId: string;
		text: string;
		senderSquareMemberMid: string;
		createdAt: Int64;
		senderMid: string;
	});
}

export declare class SquareChatAnnouncementContents {
	textMessageAnnouncementContents: TextMessageAnnouncementContents;

	constructor(args?: {
		textMessageAnnouncementContents: TextMessageAnnouncementContents;
	});
}

export declare class SquareChatAnnouncement {
	announcementSeq: Int64;
	type: SquareChatAnnouncementType;
	contents: SquareChatAnnouncementContents;
	createdAt: Int64;
	creator: string;

	constructor(args?: {
		announcementSeq: Int64;
		type: SquareChatAnnouncementType;
		contents: SquareChatAnnouncementContents;
		createdAt: Int64;
		creator: string;
	});
}

export declare class GetSquareChatAnnouncementsResponse {
	announcements: SquareChatAnnouncement[];

	constructor(args?: { announcements: SquareChatAnnouncement[] });
}

export declare class GetSquareFeatureSetResponse {
	squareFeatureSet: SquareFeatureSet;

	constructor(args?: { squareFeatureSet: SquareFeatureSet });
}

export declare class GetSquareChatFeatureSetResponse {
	squareChatFeatureSet: SquareChatFeatureSet;

	constructor(args?: { squareChatFeatureSet: SquareChatFeatureSet });
}

export declare class SyncSquareMembersResponse {
	updatedSquareMembers: SquareMember[];

	constructor(args?: { updatedSquareMembers: SquareMember[] });
}

export declare class SquareChatThread {
	squareChatThreadMid: string;
	squareChatMid: string;
	squareMid: string;
	messageId: string;
	state: SquareChatThreadState;

	constructor(args?: {
		squareChatThreadMid: string;
		squareChatMid: string;
		squareMid: string;
		messageId: string;
		state: SquareChatThreadState;
	});
}

export declare class GetJoinedSquareChatThreadsResponse {
	squareChatThreads: SquareChatThread[];
	continuationToken: string;

	constructor(args?: {
		squareChatThreads: SquareChatThread[];
		continuationToken: string;
	});
}

export declare class CreateSquareChatThreadResponse {
	squareChatThread: SquareChatThread;

	constructor(args?: { squareChatThread: SquareChatThread });
}

export declare class SquareChatThreadMember {
	squareMemberMid: string;
	squareChatThreadMid: string;
	revision: Int64;
	membershipState: SquareChatThreadeMembershipState;

	constructor(args?: {
		squareMemberMid: string;
		squareChatThreadMid: string;
		revision: Int64;
		membershipState: SquareChatThreadeMembershipState;
	});
}

export declare class GetSquareChatThreadResponse {
	squareChatThread: SquareChatThread;
	mySquareChatThreadMember: SquareChatThreadMember;

	constructor(args?: {
		squareChatThread: SquareChatThread;
		mySquareChatThreadMember: SquareChatThreadMember;
	});
}

export declare class JoinSquareChatThreadResponse {
	squareChatThread: SquareChatThread;

	constructor(args?: { squareChatThread: SquareChatThread });
}

export declare class AcceptSpeakersResponse {}

export declare class AcceptToChangeRoleResponse {}

export declare class AcceptToListenResponse {}

export declare class AcceptToSpeakResponse {}

export declare class CancelToSpeakResponse {}

export declare class EndLiveTalkResponse {}

export declare class LiveTalkEventNotifiedUpdateLiveTalkTitle {
	title: string;

	constructor(args?: { title: string });
}

export declare class LiveTalkEventNotifiedUpdateLiveTalkSpeakerSetting {
	speakerSetting: LiveTalkSpeakerSetting;

	constructor(args?: { speakerSetting: LiveTalkSpeakerSetting });
}

export declare class LiveTalkEventNotifiedUpdateLiveTalkAnnouncement {
	announcement: string;

	constructor(args?: { announcement: string });
}

export declare class LiveTalkEventNotifiedUpdateSquareMemberRole {
	squareMemberMid: string;
	role: SquareMemberRole;

	constructor(args?: { squareMemberMid: string; role: SquareMemberRole });
}

export declare class LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak {
	allowRequestToSpeak: boolean;

	constructor(args?: { allowRequestToSpeak: boolean });
}

export declare class LiveTalkEventPayload {
	notifiedUpdateLiveTalkTitle: LiveTalkEventNotifiedUpdateLiveTalkTitle;
	notifiedUpdateLiveTalkSpeakerSetting: LiveTalkEventNotifiedUpdateLiveTalkSpeakerSetting;
	notifiedUpdateLiveTalkAnnouncement: LiveTalkEventNotifiedUpdateLiveTalkAnnouncement;
	notifiedUpdateSquareMemberRole: LiveTalkEventNotifiedUpdateSquareMemberRole;
	notifiedUpdateLiveTalkAllowRequestToSpeak: LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak;

	constructor(args?: {
		notifiedUpdateLiveTalkTitle: LiveTalkEventNotifiedUpdateLiveTalkTitle;
		notifiedUpdateLiveTalkSpeakerSetting: LiveTalkEventNotifiedUpdateLiveTalkSpeakerSetting;
		notifiedUpdateLiveTalkAnnouncement: LiveTalkEventNotifiedUpdateLiveTalkAnnouncement;
		notifiedUpdateSquareMemberRole: LiveTalkEventNotifiedUpdateSquareMemberRole;
		notifiedUpdateLiveTalkAllowRequestToSpeak: LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak;
	});
}

export declare class LiveTalkEvent {
	type: LiveTalkEventType;
	payload: LiveTalkEventPayload;
	syncToken: string;

	constructor(args?: {
		type: LiveTalkEventType;
		payload: LiveTalkEventPayload;
		syncToken: string;
	});
}

export declare class FetchLiveTalkEventsResponse {
	events: LiveTalkEvent[];
	syncToken: string;
	hasMore: boolean;

	constructor(args?: {
		events: LiveTalkEvent[];
		syncToken: string;
		hasMore: boolean;
	});
}

export declare class LiveTalk {
	squareChatMid: string;
	sessionId: string;
	title: string;
	type: LiveTalkType;
	speakerSetting: LiveTalkSpeakerSetting;
	allowRequestToSpeak: boolean;
	announcement: string;
	participantCount: number;
	revision: Int64;
	startedAt: Int64;

	constructor(args?: {
		squareChatMid: string;
		sessionId: string;
		title: string;
		type: LiveTalkType;
		speakerSetting: LiveTalkSpeakerSetting;
		allowRequestToSpeak: boolean;
		announcement: string;
		participantCount: number;
		revision: Int64;
		startedAt: Int64;
	});
}

export declare class FindLiveTalkByInvitationTicketResponse {
	chatInvitationTicket: string;
	liveTalk: LiveTalk;
	chat: SquareChat;
	squareMember: SquareMember;
	chatMembershipState: SquareChatMembershipState;

	constructor(args?: {
		chatInvitationTicket: string;
		liveTalk: LiveTalk;
		chat: SquareChat;
		squareMember: SquareMember;
		chatMembershipState: SquareChatMembershipState;
	});
}

export declare class ForceEndLiveTalkResponse {}

export declare class LiveTalkSpeaker {
	displayName: string;
	profileImageObsHash: string;
	role: SquareMemberRole;

	constructor(args?: {
		displayName: string;
		profileImageObsHash: string;
		role: SquareMemberRole;
	});
}

export declare class GetLiveTalkInfoForNonMemberResponse {
	chatName: string;
	liveTalk: LiveTalk;
	speakers: LiveTalkSpeaker[];
	chatInvitationUrl: string;

	constructor(args?: {
		chatName: string;
		liveTalk: LiveTalk;
		speakers: LiveTalkSpeaker[];
		chatInvitationUrl: string;
	});
}

export declare class GetLiveTalkInvitationUrlResponse {
	invitationUrl: string;

	constructor(args?: { invitationUrl: string });
}

export declare class GetLiveTalkSpeakersForNonMemberResponse {
	speakers: LiveTalkSpeaker[];

	constructor(args?: { speakers: LiveTalkSpeaker[] });
}

export declare class GetSquareInfoByChatMidResponse {
	defaultChatMid: string;
	squareName: string;
	squareDesc: string;

	constructor(args?: {
		defaultChatMid: string;
		squareName: string;
		squareDesc: string;
	});
}

export declare class InviteToChangeRoleResponse {}

export declare class InviteToListenResponse {}

export declare class InviteToLiveTalkResponse {}

export declare class InviteToSpeakResponse {
	inviteRequestId: string;

	constructor(args?: { inviteRequestId: string });
}

export declare class JoinLiveTalkResponse {
	hostMemberMid: string;
	memberSessionId: string;
	token: string;
	proto: string;
	voipAddress: string;
	voipAddress6: string;
	voipUdpPort: number;
	voipTcpPort: number;
	fromZone: string;
	commParam: string;
	orionAddress: string;
	polarisAddress: string;
	polarisZone: string;
	polarisUdpPort: number;

	constructor(args?: {
		hostMemberMid: string;
		memberSessionId: string;
		token: string;
		proto: string;
		voipAddress: string;
		voipAddress6: string;
		voipUdpPort: number;
		voipTcpPort: number;
		fromZone: string;
		commParam: string;
		orionAddress: string;
		polarisAddress: string;
		polarisZone: string;
		polarisUdpPort: number;
	});
}

export declare class KickOutLiveTalkParticipantsResponse {}

export declare class RejectSpeakersResponse {}

export declare class RejectToSpeakResponse {}

export declare class ReportLiveTalkResponse {}

export declare class ReportLiveTalkSpeakerResponse {}

export declare class RequestToListenResponse {}

export declare class RequestToSpeakResponse {}

export declare class StartLiveTalkResponse {
	liveTalk: LiveTalk;

	constructor(args?: { liveTalk: LiveTalk });
}

export declare class UpdateLiveTalkAttrsResponse {}

export declare class AcquireLiveTalkResponse {
	liveTalk: LiveTalk;

	constructor(args?: { liveTalk: LiveTalk });
}

export declare class CreateQrCodeForSecureResponse {
	callbackUrl: string;
	longPollingMaxCount: number;
	longPollingIntervalSec: number;
	nonce: string;

	constructor(args?: {
		callbackUrl: string;
		longPollingMaxCount: number;
		longPollingIntervalSec: number;
		nonce: string;
	});
}

export declare class RefreshApiRetryPolicy {
	initialDelayInMillis: Int64;
	maxDelayInMillis: Int64;
	multiplier: number;
	jitterRate: number;

	constructor(args?: {
		initialDelayInMillis: Int64;
		maxDelayInMillis: Int64;
		multiplier: number;
		jitterRate: number;
	});
}

export declare class TokenV3IssueResult {
	accessToken: string;
	refreshToken: string;
	durationUntilRefreshInSec: Int64;
	refreshApiRetryPolicy: RefreshApiRetryPolicy;
	loginSessionId: string;
	tokenIssueTimeEpochSec: Int64;

	constructor(args?: {
		accessToken: string;
		refreshToken: string;
		durationUntilRefreshInSec: Int64;
		refreshApiRetryPolicy: RefreshApiRetryPolicy;
		loginSessionId: string;
		tokenIssueTimeEpochSec: Int64;
	});
}

export declare class QrCodeLoginV2Response {
	certificate: string;
	accessTokenV2: string;
	tokenV3IssueResult: TokenV3IssueResult;
	mid: string;
	lastBindTimestamp: Int64;
	metaData: { [k: string]: string };

	constructor(args?: {
		certificate: string;
		accessTokenV2: string;
		tokenV3IssueResult: TokenV3IssueResult;
		mid: string;
		lastBindTimestamp: Int64;
		metaData: { [k: string]: string };
	});
}

export declare class RichString {
	content: string;
	meta: { [k: string]: string };

	constructor(args?: { content: string; meta: { [k: string]: string } });
}

export declare class TargetProfileDetail {
	snapshotTimeMillis: Int64;
	profileName: string;
	picturePath: string;
	statusMessage: RichString;
	musicProfile: string;
	videoProfile: string;
	avatarProfile: AvatarProfile;
	pictureSource: PictureSource;
	pictureStatus: string;

	constructor(args?: {
		snapshotTimeMillis: Int64;
		profileName: string;
		picturePath: string;
		statusMessage: RichString;
		musicProfile: string;
		videoProfile: string;
		avatarProfile: AvatarProfile;
		pictureSource: PictureSource;
		pictureStatus: string;
	});
}

export declare class UserFriendDetail {
	createdTime: Int64;
	overriddenName: string;
	favoriteTime: Int64;
	hidden: boolean;
	ringtone: string;
	ringbackTone: string;

	constructor(args?: {
		createdTime: Int64;
		overriddenName: string;
		favoriteTime: Int64;
		hidden: boolean;
		ringtone: string;
		ringbackTone: string;
	});
}

export declare class BotFriendDetail {
	createdTime: Int64;
	favoriteTime: Int64;
	hidden: boolean;

	constructor(args?: {
		createdTime: Int64;
		favoriteTime: Int64;
		hidden: boolean;
	});
}

export declare class NotFriend {}

export declare class FriendDetail {
	user: UserFriendDetail;
	bot: BotFriendDetail;
	notFriend: NotFriend;

	constructor(args?: {
		user: UserFriendDetail;
		bot: BotFriendDetail;
		notFriend: NotFriend;
	});
}

export declare class UserBlockDetail {
	deletedFromBlockList: boolean;

	constructor(args?: { deletedFromBlockList: boolean });
}

export declare class BotBlockDetail {
	deletedFromBlockList: boolean;

	constructor(args?: { deletedFromBlockList: boolean });
}

export declare class NotBlocked {}

export declare class BlockDetail {
	user: UserBlockDetail;
	bot: BotBlockDetail;
	notBlocked: NotBlocked;

	constructor(args?: {
		user: UserBlockDetail;
		bot: BotBlockDetail;
		notBlocked: NotBlocked;
	});
}

export declare class RecommendationReasonSharedChat {
	chatMid: string;

	constructor(args?: { chatMid: string });
}

export declare class RecommendationReasonReverseFriendByUserId {}

export declare class RecommendationReasonReverseFriendByQRCode {}

export declare class RecommendationReasonReverseFriendByPhone {}

export declare class RecommendationReason {
	sharedChat: RecommendationReasonSharedChat;
	reverseFriendByUserId: RecommendationReasonReverseFriendByUserId;
	reverseFriendByQrCode: RecommendationReasonReverseFriendByQRCode;
	reverseFriendByPhone: RecommendationReasonReverseFriendByPhone;

	constructor(args?: {
		sharedChat: RecommendationReasonSharedChat;
		reverseFriendByUserId: RecommendationReasonReverseFriendByUserId;
		reverseFriendByQrCode: RecommendationReasonReverseFriendByQRCode;
		reverseFriendByPhone: RecommendationReasonReverseFriendByPhone;
	});
}

export declare class Recommended {
	createdTime: Int64;
	reasons: RecommendationReason[];
	hidden: boolean;

	constructor(args?: {
		createdTime: Int64;
		reasons: RecommendationReason[];
		hidden: boolean;
	});
}

export declare class NotRecommended {}

export declare class RecommendationDetail {
	recommendationDetail: Recommended;
	notRecommended: NotRecommended;

	constructor(args?: {
		recommendationDetail: Recommended;
		notRecommended: NotRecommended;
	});
}

export declare class NotificationSetting {
	mute: boolean;

	constructor(args?: { mute: boolean });
}

export declare class NotificationSettingEntry {
	notificationSetting: NotificationSetting;

	constructor(args?: { notificationSetting: NotificationSetting });
}

export declare class GetContactV3Response {
	targetUserMid: string;
	userType: UserType;
	targetProfileDetail: TargetProfileDetail;
	friendDetail: FriendDetail;
	blockDetail: BlockDetail;
	recommendationDetail: RecommendationDetail;
	notificationSettingEntry: NotificationSettingEntry;

	constructor(args?: {
		targetUserMid: string;
		userType: UserType;
		targetProfileDetail: TargetProfileDetail;
		friendDetail: FriendDetail;
		blockDetail: BlockDetail;
		recommendationDetail: RecommendationDetail;
		notificationSettingEntry: NotificationSettingEntry;
	});
}

export declare class GetContactsV3Response {
	responses: GetContactV3Response[];

	constructor(args?: { responses: GetContactV3Response[] });
}

export declare class AddFriendByMidResponse {}

export declare class GetContactCalendarEventResponse {
	targetUserMid: string;
	userType: UserType;
	contactCalendarEvents: ContactCalendarEvents;
	snapshotTimeMillis: Int64;

	constructor(args?: {
		targetUserMid: string;
		userType: UserType;
		contactCalendarEvents: ContactCalendarEvents;
		snapshotTimeMillis: Int64;
	});
}

export declare class GetContactCalendarEventsResponse {
	responses: GetContactCalendarEventResponse[];

	constructor(args?: { responses: GetContactCalendarEventResponse[] });
}

export declare class Locale {
	language: string;
	country: string;

	constructor(args?: { language: string; country: string });
}

export declare class GetProductRequest {
	productType: ProductType;
	productId: string;
	carrierCode: string;
	saveBrowsingHistory: boolean;

	constructor(args?: {
		productType: ProductType;
		productId: string;
		carrierCode: string;
		saveBrowsingHistory: boolean;
	});
}

export declare class GetProductResponse {
	productDetail: ProductDetail;

	constructor(args?: { productDetail: ProductDetail });
}

export declare class ProductDetail {
	id: string;
	billingItemId: string;
	type: string;
	subtype: SubType;
	billingCpId: string;
	name: string;
	author: string;
	details: string;
	copyright: string;
	notice: string;
	promotionInfo: PromotionInfo;
	latestVersion: Int64;
	latestVersionString: string;
	version: Int64;
	versionString: string;
	applicationVersionRange: ApplicationVersionRange;
	owned: boolean;
	grantedByDefault: boolean;
	validFor: number;
	validUntil: Int64;
	onSale: boolean;
	salesFlag: string[];
	availableForPresent: boolean;
	availableForMyself: boolean;
	priceTier: number;
	price: Price;
	priceInLineCoin: string;
	localizedPrice: Price;
	images: { [k: string]: string[] };
	attributes: { [k: string]: string };
	authorId: string;
	stickerResourceType: StickerResourceType;
	productProperty: ProductProperty;
	productSalesState: ProductSalesState;
	installedTime: Int64;
	wishProperty: ProductWishProperty;
	subscriptionProperty: ProductSubscriptionProperty;
	productPromotionProperty: ProductPromotionProperty;
	availableInCountry: boolean;
	editorsPickBanners: EditorsPickBannerForClient[];
	ableToBeGivenAsPresent: boolean;
	madeWithStickerMaker: boolean;
	customDownloadButtonLabel: string;

	constructor(args?: {
		id: string;
		billingItemId: string;
		type: string;
		subtype: SubType;
		billingCpId: string;
		name: string;
		author: string;
		details: string;
		copyright: string;
		notice: string;
		promotionInfo: PromotionInfo;
		latestVersion: Int64;
		latestVersionString: string;
		version: Int64;
		versionString: string;
		applicationVersionRange: ApplicationVersionRange;
		owned: boolean;
		grantedByDefault: boolean;
		validFor: number;
		validUntil: Int64;
		onSale: boolean;
		salesFlag: string[];
		availableForPresent: boolean;
		availableForMyself: boolean;
		priceTier: number;
		price: Price;
		priceInLineCoin: string;
		localizedPrice: Price;
		images: { [k: string]: string[] };
		attributes: { [k: string]: string };
		authorId: string;
		stickerResourceType: StickerResourceType;
		productProperty: ProductProperty;
		productSalesState: ProductSalesState;
		installedTime: Int64;
		wishProperty: ProductWishProperty;
		subscriptionProperty: ProductSubscriptionProperty;
		productPromotionProperty: ProductPromotionProperty;
		availableInCountry: boolean;
		editorsPickBanners: EditorsPickBannerForClient[];
		ableToBeGivenAsPresent: boolean;
		madeWithStickerMaker: boolean;
		customDownloadButtonLabel: string;
	});
}

export declare class ApplicationVersionRange {
	lowerBound: string;
	lowerBoundInclusive: boolean;
	upperBound: string;
	upperBoundInclusive: boolean;

	constructor(args?: {
		lowerBound: string;
		lowerBoundInclusive: boolean;
		upperBound: string;
		upperBoundInclusive: boolean;
	});
}

export declare class EditorsPickBannerForClient {
	id: Int64;
	endPageBannerImageUrl: string;
	defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
	showNewBadge: boolean;
	name: string;
	description: string;

	constructor(args?: {
		id: Int64;
		endPageBannerImageUrl: string;
		defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
		showNewBadge: boolean;
		name: string;
		description: string;
	});
}

export declare class Price {
	currency: string;
	amount: string;
	priceString: string;

	constructor(args?: { currency: string; amount: string; priceString: string });
}

export declare class ProductProperty {
	stickerProperty: StickerProperty;
	themeProperty: ThemeProperty;
	sticonProperty: SticonProperty;

	constructor(args?: {
		stickerProperty: StickerProperty;
		themeProperty: ThemeProperty;
		sticonProperty: SticonProperty;
	});
}

export declare class StickerProperty {
	hasAnimation: boolean;
	hasSound: boolean;
	hasPopup: boolean;
	stickerResourceType: StickerResourceType;
	stickerOptions: string;
	compactStickerOptions: number;
	stickerHash: string;
	stickerIds: string[];
	nameTextProperty: ImageTextProperty;
	availableForPhotoEdit: boolean;
	stickerDefaultTexts: { [k: string]: string };
	stickerSize: StickerSize;
	popupLayer: PopupLayer;
	cpdProduct: boolean;
	availableForCombinationSticker: boolean;

	constructor(args?: {
		hasAnimation: boolean;
		hasSound: boolean;
		hasPopup: boolean;
		stickerResourceType: StickerResourceType;
		stickerOptions: string;
		compactStickerOptions: number;
		stickerHash: string;
		stickerIds: string[];
		nameTextProperty: ImageTextProperty;
		availableForPhotoEdit: boolean;
		stickerDefaultTexts: { [k: string]: string };
		stickerSize: StickerSize;
		popupLayer: PopupLayer;
		cpdProduct: boolean;
		availableForCombinationSticker: boolean;
	});
}

export declare class ThemeProperty {
	thumbnail: string;
	themeResourceType: ThemeResourceType;

	constructor(args?: {
		thumbnail: string;
		themeResourceType: ThemeResourceType;
	});
}

export declare class SticonProperty {
	sticonIds: string[];
	availableForPhotoEdit: boolean;
	sticonResourceType: SticonResourceType;
	endPageMainImages: string[][];

	constructor(args?: {
		sticonIds: string[];
		availableForPhotoEdit: boolean;
		sticonResourceType: SticonResourceType;
		endPageMainImages: string[][];
	});
}

export declare class ImageTextProperty {
	status: ImageTextStatus;
	plaintext: string;
	nameTextMaxCharacterCount: number;
	encryptedText: string;

	constructor(args?: {
		status: ImageTextStatus;
		plaintext: string;
		nameTextMaxCharacterCount: number;
		encryptedText: string;
	});
}

export declare class LpPromotionProperty {
	landingPageUrl: string;
	label: string;
	buttonLabel: string;

	constructor(args?: {
		landingPageUrl: string;
		label: string;
		buttonLabel: string;
	});
}

export declare class ProductWishProperty {
	totalCount: Int64;

	constructor(args?: { totalCount: Int64 });
}

export declare class ProductSubscriptionProperty {
	availableForSubscribe: boolean;
	subscriptionAvailability: number;

	constructor(args?: {
		availableForSubscribe: boolean;
		subscriptionAvailability: number;
	});
}

export declare class ProductPromotionProperty {
	lpPromotionProperty: LpPromotionProperty;

	constructor(args?: { lpPromotionProperty: LpPromotionProperty });
}

export declare class PromotionDetail {
	promotionBuddyInfo: PromotionBuddyInfo;
	promotionInstallInfo: PromotionInstallInfo;
	promotionMissionInfo: PromotionMissionInfo;

	constructor(args?: {
		promotionBuddyInfo: PromotionBuddyInfo;
		promotionInstallInfo: PromotionInstallInfo;
		promotionMissionInfo: PromotionMissionInfo;
	});
}

export declare class PromotionInfo {
	promotionType: PromotionType;
	promotionDetail: PromotionDetail;
	buddyInfo: PromotionBuddyInfo;

	constructor(args?: {
		promotionType: PromotionType;
		promotionDetail: PromotionDetail;
		buddyInfo: PromotionBuddyInfo;
	});
}

export declare class PromotionBuddyInfo {
	buddyMid: string;
	promotionBuddyDetail: PromotionBuddyDetail;
	showBanner: boolean;

	constructor(args?: {
		buddyMid: string;
		promotionBuddyDetail: PromotionBuddyDetail;
		showBanner: boolean;
	});
}

export declare class PromotionInstallInfo {
	downloadUrl: string;
	customUrlSchema: string;

	constructor(args?: { downloadUrl: string; customUrlSchema: string });
}

export declare class PromotionMissionInfo {
	promotionMissionType: PromotionMissionType;
	missionCompleted: boolean;
	downloadUrl: string;
	customUrlSchema: string;
	oaMid: string;

	constructor(args?: {
		promotionMissionType: PromotionMissionType;
		missionCompleted: boolean;
		downloadUrl: string;
		customUrlSchema: string;
		oaMid: string;
	});
}

export declare class PromotionBuddyDetail {
	searchId: string;
	contactStatus: ContactStatus;
	name: string;
	pictureUrl: string;
	statusMessage: string;
	brandType: BrandType;

	constructor(args?: {
		searchId: string;
		contactStatus: ContactStatus;
		name: string;
		pictureUrl: string;
		statusMessage: string;
		brandType: BrandType;
	});
}

export declare class PurchaseOrder {
	shopId: string;
	productId: string;
	recipientMid: string;
	price: Price;
	enableLinePointAutoExchange: boolean;
	locale: Locale;
	presentAttributes: { [k: string]: string };

	constructor(args?: {
		shopId: string;
		productId: string;
		recipientMid: string;
		price: Price;
		enableLinePointAutoExchange: boolean;
		locale: Locale;
		presentAttributes: { [k: string]: string };
	});
}

export declare class PurchaseOrderResponse {
	orderId: string;
	attributes: { [k: string]: string };
	billingConfirmUrl: string;

	constructor(args?: {
		orderId: string;
		attributes: { [k: string]: string };
		billingConfirmUrl: string;
	});
}

export declare class PurchaseRecordList {
	purchaseRecords: PurchaseRecord[];
	offset: number;
	totalSize: number;

	constructor(args?: {
		purchaseRecords: PurchaseRecord[];
		offset: number;
		totalSize: number;
	});
}

export declare class PurchaseRecord {
	productDetail: ProductDetail;
	purchasedTime: Int64;
	giver: string;
	recipient: string;
	purchasedPrice: Price;

	constructor(args?: {
		productDetail: ProductDetail;
		purchasedTime: Int64;
		giver: string;
		recipient: string;
		purchasedPrice: Price;
	});
}

export declare class DetailedProductList {
	productList: ProductDetail[];
	offset: number;
	totalSize: number;

	constructor(args?: {
		productList: ProductDetail[];
		offset: number;
		totalSize: number;
	});
}

export declare class CreateCombinationStickerResponse {
	id: string;

	constructor(args?: { id: string });
}

export declare class ProductSearchSummary {
	id: string;
	type: ProductType;
	name: string;
	author: string;
	promotionInfo: PromotionInfo;
	version: Int64;
	newFlag: boolean;
	priceTier: number;
	priceInLineCoin: string;
	property: ProductProperty;
	subType: SubType;
	onSale: boolean;
	availableForPresent: boolean;
	availableForPurchase: boolean;
	validDays: number;
	authorId: string;
	bargainFlag: boolean;
	copyright: string;
	availability: ProductAvailability;
	interactionEventParameter: string;
	editorsPickIds: Int64[];

	constructor(args?: {
		id: string;
		type: ProductType;
		name: string;
		author: string;
		promotionInfo: PromotionInfo;
		version: Int64;
		newFlag: boolean;
		priceTier: number;
		priceInLineCoin: string;
		property: ProductProperty;
		subType: SubType;
		onSale: boolean;
		availableForPresent: boolean;
		availableForPurchase: boolean;
		validDays: number;
		authorId: string;
		bargainFlag: boolean;
		copyright: string;
		availability: ProductAvailability;
		interactionEventParameter: string;
		editorsPickIds: Int64[];
	});
}

export declare class DemographicType {
	demographicGenderType: DemographicGenderType;
	demographicAgeType: DemographicAgeType;
	defaultOrder: boolean;

	constructor(args?: {
		demographicGenderType: DemographicGenderType;
		demographicAgeType: DemographicAgeType;
		defaultOrder: boolean;
	});
}

export declare class ShowcaseV3 {
	productList: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
	showcaseType: ShowcaseType;
	productType: ProductType;
	subType: SubType;
	demographicType: DemographicType;

	constructor(args?: {
		productList: ProductSearchSummary[];
		continuationToken: string;
		totalSize: Int64;
		showcaseType: ShowcaseType;
		productType: ProductType;
		subType: SubType;
		demographicType: DemographicType;
	});
}

export declare class StickerIdRange {
	start: Int64;
	size: number;

	constructor(args?: { start: Int64; size: number });
}

export declare class StickerSummary {
	stickerIdRanges: StickerIdRange[];
	suggestVersion: Int64;
	stickerHash: string;
	defaultDisplayOnKeyboard: boolean;
	stickerResourceType: StickerResourceType;
	nameTextProperty: ImageTextProperty;
	availableForPhotoEdit: boolean;
	popupLayer: PopupLayer;
	stickerSize: StickerSize;
	availableForCombinationSticker: boolean;

	constructor(args?: {
		stickerIdRanges: StickerIdRange[];
		suggestVersion: Int64;
		stickerHash: string;
		defaultDisplayOnKeyboard: boolean;
		stickerResourceType: StickerResourceType;
		nameTextProperty: ImageTextProperty;
		availableForPhotoEdit: boolean;
		popupLayer: PopupLayer;
		stickerSize: StickerSize;
		availableForCombinationSticker: boolean;
	});
}

export declare class ThemeSummary {
	imagePath: string;
	version: Int64;
	versionString: string;

	constructor(args?: {
		imagePath: string;
		version: Int64;
		versionString: string;
	});
}

export declare class SticonSummary {
	suggestVersion: Int64;
	availableForPhotoEdit: boolean;
	sticonResourceType: SticonResourceType;

	constructor(args?: {
		suggestVersion: Int64;
		availableForPhotoEdit: boolean;
		sticonResourceType: SticonResourceType;
	});
}

export declare class ProductTypeSummary {
	stickerSummary: StickerSummary;
	themeSummary: ThemeSummary;
	sticonSummary: SticonSummary;

	constructor(args?: {
		stickerSummary: StickerSummary;
		themeSummary: ThemeSummary;
		sticonSummary: SticonSummary;
	});
}

export declare class ProductSummary {
	id: string;
	name: string;
	latestVersion: Int64;
	applicationVersionRange: ApplicationVersionRange;
	grantedByDefault: boolean;
	attributes: { [k: string]: string };
	productTypeSummary: ProductTypeSummary;
	validUntil: Int64;
	validFor: number;
	installedTime: Int64;
	availability: ProductAvailability;
	authorId: string;
	canAutoDownload: boolean;
	promotionInfo: PromotionInfo;

	constructor(args?: {
		id: string;
		name: string;
		latestVersion: Int64;
		applicationVersionRange: ApplicationVersionRange;
		grantedByDefault: boolean;
		attributes: { [k: string]: string };
		productTypeSummary: ProductTypeSummary;
		validUntil: Int64;
		validFor: number;
		installedTime: Int64;
		availability: ProductAvailability;
		authorId: string;
		canAutoDownload: boolean;
		promotionInfo: PromotionInfo;
	});
}

export declare class ProductSummaryList {
	productList: ProductSummary[];
	offset: number;
	totalSize: number;

	constructor(args?: {
		productList: ProductSummary[];
		offset: number;
		totalSize: number;
	});
}

export declare class ProductValidationScheme {
	key: string;
	offset: Int64;
	size: Int64;

	constructor(args?: { key: string; offset: Int64; size: Int64 });
}

export declare class ProductValidationResult {
	validated: boolean;

	constructor(args?: { validated: boolean });
}

export declare class ShopUpdates {
	shopId: string;
	latestUpdateTime: Int64;

	constructor(args?: { shopId: string; latestUpdateTime: Int64 });
}

export declare class SearchProductsV2Response {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;

	constructor(args?: {
		results: ProductSearchSummary[];
		continuationToken: string;
		totalSize: Int64;
	});
}

export declare class EditorsPickBanner {
	id: Int64;
	imageUrl: string;
	homeBannerImageUrl: string;
	showcaseBannerImageUrl: string;
	enableEditorsPickShowcaseTypes: EditorsPickShowcaseType[];
	defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
	homeBannerV2ImageUrl: string;
	name: string;
	containsProducts: boolean;
	displayPeriodBegin: Int64;
	description: string;
	showNewBadge: boolean;

	constructor(args?: {
		id: Int64;
		imageUrl: string;
		homeBannerImageUrl: string;
		showcaseBannerImageUrl: string;
		enableEditorsPickShowcaseTypes: EditorsPickShowcaseType[];
		defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
		homeBannerV2ImageUrl: string;
		name: string;
		containsProducts: boolean;
		displayPeriodBegin: Int64;
		description: string;
		showNewBadge: boolean;
	});
}

export declare class AuthorForShowcase {
	authorId: Int64;
	productList: ProductSearchSummary[];
	productTotalSize: Int64;

	constructor(args?: {
		authorId: Int64;
		productList: ProductSearchSummary[];
		productTotalSize: Int64;
	});
}

export declare class ImageSearchSummary {
	imageId: string;
	product: ProductSearchSummary;

	constructor(args?: { imageId: string; product: ProductSearchSummary });
}

export declare class KeywordImageList {
	tagId: string;
	keyword: string;
	imageList: ImageSearchSummary[];

	constructor(args?: {
		tagId: string;
		keyword: string;
		imageList: ImageSearchSummary[];
	});
}

export declare class URLItem {
	title: string;
	imageUrl: string;
	url: string;

	constructor(args?: { title: string; imageUrl: string; url: string });
}

export declare class EditorsPickContent {
	urlItem: URLItem;
	productDetail: ProductDetail;

	constructor(args?: { urlItem: URLItem; productDetail: ProductDetail });
}

export declare class EditorsPick {
	contentType: EditorsPickContentType;
	editorsPickContent: EditorsPickContent;

	constructor(args?: {
		contentType: EditorsPickContentType;
		editorsPickContent: EditorsPickContent;
	});
}

export declare class EditorsPickTab {
	editorsPickId: Int64;
	name: string;
	showcaseType: ShowcaseType;

	constructor(args?: {
		editorsPickId: Int64;
		name: string;
		showcaseType: ShowcaseType;
	});
}

export declare class EditorsPickShowcase {
	id: Int64;
	name: string;
	banner: EditorsPickBanner;
	editorsPicks: EditorsPick[];
	continuationToken: string;
	totalSize: number;
	description: string;
	type: EditorsPickShowcaseType;
	tabs: EditorsPickTab[];

	constructor(args?: {
		id: Int64;
		name: string;
		banner: EditorsPickBanner;
		editorsPicks: EditorsPick[];
		continuationToken: string;
		totalSize: number;
		description: string;
		type: EditorsPickShowcaseType;
		tabs: EditorsPickTab[];
	});
}

export declare class Category {
	id: Int64;
	name: string;
	newFlag: boolean;
	productCount: number;
	thumbnailUrl: string;

	constructor(args?: {
		id: Int64;
		name: string;
		newFlag: boolean;
		productCount: number;
		thumbnailUrl: string;
	});
}

export declare class Tag {
	id: Int64;
	name: string;
	tagType: TagType;
	productCount: number;
	thumbnailUrl: string;

	constructor(args?: {
		id: Int64;
		name: string;
		tagType: TagType;
		productCount: number;
		thumbnailUrl: string;
	});
}

export declare class ProductList {
	productList: ProductDetail[];
	offset: number;
	totalSize: number;
	title: string;

	constructor(args?: {
		productList: ProductDetail[];
		offset: number;
		totalSize: number;
		title: string;
	});
}

export declare class CategoryProductList {
	category: Category;
	productList: ProductList;

	constructor(args?: { category: Category; productList: ProductList });
}

export declare class AggregatedHomeV2Response {
	showcases: ShowcaseV3[];
	editorsPickBanners: EditorsPickBanner[];
	authorList: AuthorForShowcase[];
	keywordStickerList: KeywordImageList[];
	detailedEditorsPick: EditorsPickShowcase;
	detailedCategoryList: CategoryProductList[];
	categoryList: Category[];
	tagList: Tag[];

	constructor(args?: {
		showcases: ShowcaseV3[];
		editorsPickBanners: EditorsPickBanner[];
		authorList: AuthorForShowcase[];
		keywordStickerList: KeywordImageList[];
		detailedEditorsPick: EditorsPickShowcase;
		detailedCategoryList: CategoryProductList[];
		categoryList: Category[];
		tagList: Tag[];
	});
}

export declare class AggregatedCategory {
	id: Int64;
	categoryType: CategoryType;
	name: string;
	productCount: number;
	thumbnailUrl: string;

	constructor(args?: {
		id: Int64;
		categoryType: CategoryType;
		name: string;
		productCount: number;
		thumbnailUrl: string;
	});
}

export declare class ListContentData {
	showcase: ShowcaseV3;
	editorsPickBanners: EditorsPickBanner[];
	categories: AggregatedCategory[];

	constructor(args?: {
		showcase: ShowcaseV3;
		editorsPickBanners: EditorsPickBanner[];
		categories: AggregatedCategory[];
	});
}

export declare class ListContent {
	contentData: ListContentData;
	localizedTitle: string;
	tsKey: string;
	moreLinkFragment: string;

	constructor(args?: {
		contentData: ListContentData;
		localizedTitle: string;
		tsKey: string;
		moreLinkFragment: string;
	});
}

export declare class AggregatedHomeNativeResponse {
	listContents: ListContent[];

	constructor(args?: { listContents: ListContent[] });
}

export declare class DynamicHomeNativeResponse {
	listContents: ListContent[];

	constructor(args?: { listContents: ListContent[] });
}

export declare class TagsProductList {
	tasteTag: Tag;
	characterTag: Tag;
	products: ProductSearchSummary[];

	constructor(args?: {
		tasteTag: Tag;
		characterTag: Tag;
		products: ProductSearchSummary[];
	});
}

export declare class AggregatedPremiumHomeResponse {
	showcases: ShowcaseV3[];
	editorsPickBanners: EditorsPickBanner[];
	popularCreator: AuthorForShowcase;
	featuredCategory: TagsProductList;
	categoryList: TagsProductList[];
	browsingHistory: ShowcaseV3;
	subscriptionSlotHistory: ShowcaseV3;

	constructor(args?: {
		showcases: ShowcaseV3[];
		editorsPickBanners: EditorsPickBanner[];
		popularCreator: AuthorForShowcase;
		featuredCategory: TagsProductList;
		categoryList: TagsProductList[];
		browsingHistory: ShowcaseV3;
		subscriptionSlotHistory: ShowcaseV3;
	});
}

export declare class AggregatedShowcaseV4 {
	showcases: ShowcaseV3[];

	constructor(args?: { showcases: ShowcaseV3[] });
}

export declare class GetRecommendationResponse {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;

	constructor(args?: {
		results: ProductSearchSummary[];
		continuationToken: string;
		totalSize: Int64;
	});
}

export declare class AuthorListResponse {
	authorList: AuthorForShowcase[];
	totalSize: Int64;
	continuationToken: string;

	constructor(args?: {
		authorList: AuthorForShowcase[];
		totalSize: Int64;
		continuationToken: string;
	});
}

export declare class ProductResourceType {
	stickerResourceType: StickerResourceType;
	themeResourceType: ThemeResourceType;
	sticonResourceType: SticonResourceType;

	constructor(args?: {
		stickerResourceType: StickerResourceType;
		themeResourceType: ThemeResourceType;
		sticonResourceType: SticonResourceType;
	});
}

export declare class LatestProductByAuthorItem {
	productId: string;
	displayName: string;
	version: Int64;
	newFlag: boolean;
	productResourceType: ProductResourceType;
	popupLayer: PopupLayer;

	constructor(args?: {
		productId: string;
		displayName: string;
		version: Int64;
		newFlag: boolean;
		productResourceType: ProductResourceType;
		popupLayer: PopupLayer;
	});
}

export declare class LatestProductsByAuthorResponse {
	authorId: Int64;
	author: string;
	items: LatestProductByAuthorItem[];

	constructor(args?: {
		authorId: Int64;
		author: string;
		items: LatestProductByAuthorItem[];
	});
}

export declare class GetExperimentsResponse {
	variables: { [k: string]: string };

	constructor(args?: { variables: { [k: string]: string } });
}

export declare class ProductSummaryForAutoSuggest {
	id: string;
	version: Int64;
	name: string;
	stickerResourceType: StickerResourceType;
	suggestVersion: Int64;
	popupLayer: PopupLayer;
	type: ProductType;
	resourceType: ProductResourceType;
	stickerSize: StickerSize;

	constructor(args?: {
		id: string;
		version: Int64;
		name: string;
		stickerResourceType: StickerResourceType;
		suggestVersion: Int64;
		popupLayer: PopupLayer;
		type: ProductType;
		resourceType: ProductResourceType;
		stickerSize: StickerSize;
	});
}

export declare class AutoSuggestionShowcaseResponse {
	productList: ProductSummaryForAutoSuggest[];
	totalSize: Int64;

	constructor(args?: {
		productList: ProductSummaryForAutoSuggest[];
		totalSize: Int64;
	});
}

export declare class SuggestResource {
	dataUrl: string;
	version: Int64;
	updatedTime: Int64;

	constructor(args?: { dataUrl: string; version: Int64; updatedTime: Int64 });
}

export declare class SuggestDictionarySetting {
	language: string;
	name: string;
	preload: boolean;
	suggestResource: SuggestResource;
	patch: any;
	suggestTagResource: SuggestResource;
	tagPatch: any;
	corpusResource: SuggestResource;

	constructor(args?: {
		language: string;
		name: string;
		preload: boolean;
		suggestResource: SuggestResource;
		patch: any;
		suggestTagResource: SuggestResource;
		tagPatch: any;
		corpusResource: SuggestResource;
	});
}

export declare class GetSuggestDictionarySettingResponse {
	results: SuggestDictionarySetting[];

	constructor(args?: { results: SuggestDictionarySetting[] });
}

export declare class GetRecommendOaResponse {
	buddyMids: string[];

	constructor(args?: { buddyMids: string[] });
}

export declare class GetSuggestResourcesResponse {
	suggestResources: any;

	constructor(args?: { suggestResources: any });
}

export declare class GetSuggestResourcesV2Response {
	suggestResources: { [k: string]: SuggestResource };

	constructor(args?: { suggestResources: { [k: string]: SuggestResource } });
}

export declare class GetTagClusterFileResponse {
	path: string;
	updatedTimeMillis: Int64;

	constructor(args?: { path: string; updatedTimeMillis: Int64 });
}

export declare class GetResourceFileReponse {
	tagClusterFileResponse: GetTagClusterFileResponse;

	constructor(args?: { tagClusterFileResponse: GetTagClusterFileResponse });
}

export declare class BrowsingHistory {
	productSearchSummary: ProductSearchSummary;
	browsingTime: Int64;

	constructor(args?: {
		productSearchSummary: ProductSearchSummary;
		browsingTime: Int64;
	});
}

export declare class GetBrowsingHistoryResponse {
	browsingHistory: BrowsingHistory[];
	continuationToken: string;
	totalSize: number;

	constructor(args?: {
		browsingHistory: BrowsingHistory[];
		continuationToken: string;
		totalSize: number;
	});
}

export declare class DeleteAllBrowsingHistoryResponse {}

export declare class SticonProductMapping {
	productId: string;
	oldProductId: string;
	newToOldSticonIdMapping: { [k: string]: string };
	oldPackageVersion: number;
	oldMetaVersion: number;
	stickerPackageId: Int64;
	stickerPackageVersion: number;
	stickerIds: { [k: string]: string };

	constructor(args?: {
		productId: string;
		oldProductId: string;
		newToOldSticonIdMapping: { [k: string]: string };
		oldPackageVersion: number;
		oldMetaVersion: number;
		stickerPackageId: Int64;
		stickerPackageVersion: number;
		stickerIds: { [k: string]: string };
	});
}

export declare class GetOldSticonMappingResponse {
	sticonProductMappings: SticonProductMapping[];
	updatedTimeMillis: Int64;
	updated: boolean;

	constructor(args?: {
		sticonProductMappings: SticonProductMapping[];
		updatedTimeMillis: Int64;
		updated: boolean;
	});
}

export declare class SimilarImageShowcase {
	chosenImage: ImageSearchSummary;
	similarImageList: ImageSearchSummary[];
	continuationToken: string;

	constructor(args?: {
		chosenImage: ImageSearchSummary;
		similarImageList: ImageSearchSummary[];
		continuationToken: string;
	});
}

export declare class CustomizeImageTextResponse {
	nameTextProperty: ImageTextProperty;

	constructor(args?: { nameTextProperty: ImageTextProperty });
}

export declare class SubscriptionPlan {
	billingItemId: string;
	subscriptionService: SubscriptionServiceType;
	target: SubscriptionPlanTarget;
	type: SubscriptionPlanType;
	period: string;
	freeTrial: string;
	localizedName: string;
	price: Price;
	availability: SubscriptionPlanAvailability;
	cpId: string;
	nameKey: string;
	tier: SubscriptionPlanTier;

	constructor(args?: {
		billingItemId: string;
		subscriptionService: SubscriptionServiceType;
		target: SubscriptionPlanTarget;
		type: SubscriptionPlanType;
		period: string;
		freeTrial: string;
		localizedName: string;
		price: Price;
		availability: SubscriptionPlanAvailability;
		cpId: string;
		nameKey: string;
		tier: SubscriptionPlanTier;
	});
}

export declare class GetSubscriptionPlansResponse {
	plans: SubscriptionPlan[];

	constructor(args?: { plans: SubscriptionPlan[] });
}

export declare class SubscriptionStatus {
	billingItemId: string;
	subscriptionService: SubscriptionServiceType;
	period: string;
	localizedName: string;
	freeTrial: boolean;
	expired: boolean;
	validUntil: Int64;
	maxSlotCount: number;
	target: SubscriptionPlanTarget;
	type: SubscriptionPlanType;
	storeCode: StoreCode;
	nameKey: string;
	tier: SubscriptionPlanTier;
	accountHold: boolean;
	maxSlotCountsByProductType: { [k: number /*ProductType*/]: number };
	agreementAccepted: boolean;

	constructor(args?: {
		billingItemId: string;
		subscriptionService: SubscriptionServiceType;
		period: string;
		localizedName: string;
		freeTrial: boolean;
		expired: boolean;
		validUntil: Int64;
		maxSlotCount: number;
		target: SubscriptionPlanTarget;
		type: SubscriptionPlanType;
		storeCode: StoreCode;
		nameKey: string;
		tier: SubscriptionPlanTier;
		accountHold: boolean;
		maxSlotCountsByProductType: { [k: number /*ProductType*/]: number };
		agreementAccepted: boolean;
	});
}

export declare class GetSubscriptionStatusResponse {
	subscriptions: { [k: number]: SubscriptionStatus };
	hasValidStudentInformation: boolean;
	otherOwnedSubscriptions: { [k: number]: SubscriptionStatus[] };

	constructor(args?: {
		subscriptions: { [k: number]: SubscriptionStatus };
		hasValidStudentInformation: boolean;
		otherOwnedSubscriptions: { [k: number]: SubscriptionStatus[] };
	});
}

export declare class GetProductSummariesInSubscriptionSlotsResponse {
	products: ProductSummary[];
	continuationToken: string;
	totalSize: Int64;
	maxSlotCount: number;

	constructor(args?: {
		products: ProductSummary[];
		continuationToken: string;
		totalSize: Int64;
		maxSlotCount: number;
	});
}

export declare class AddProductToSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;

	constructor(args?: { result: SubscriptionSlotModificationResult });
}

export declare class AddThemeToSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;

	constructor(args?: { result: SubscriptionSlotModificationResult });
}

export declare class RemoveProductFromSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;

	constructor(args?: { result: SubscriptionSlotModificationResult });
}

export declare class PurchaseSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;

	constructor(args?: {
		result: SubscriptionBillingResult;
		orderId: string;
		confirmUrl: string;
	});
}

export declare class ChangeSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;

	constructor(args?: {
		result: SubscriptionBillingResult;
		orderId: string;
		confirmUrl: string;
	});
}

export declare class RestoreSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;

	constructor(args?: {
		result: SubscriptionBillingResult;
		orderId: string;
		confirmUrl: string;
	});
}

export declare class GetProductsByTagsV2Response {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;

	constructor(args?: {
		results: ProductSearchSummary[];
		continuationToken: string;
		totalSize: Int64;
	});
}

export declare class StudentInformation {
	schoolName: string;
	graduationDate: string;

	constructor(args?: { schoolName: string; graduationDate: string });
}

export declare class GetStudentInformationResponse {
	studentInformation: StudentInformation;
	isValid: boolean;

	constructor(args?: {
		studentInformation: StudentInformation;
		isValid: boolean;
	});
}

export declare class SaveStudentInformationResponse {}

export declare class PurchasedSubscription {
	orderId: string;
	subscriptionService: SubscriptionServiceType;
	billingItemId: string;
	type: SubscriptionPlanType;
	localizedName: string;
	purchasedTime: Int64;
	validUntil: Int64;
	price: Price;
	nameKey: string;
	tier: SubscriptionPlanTier;

	constructor(args?: {
		orderId: string;
		subscriptionService: SubscriptionServiceType;
		billingItemId: string;
		type: SubscriptionPlanType;
		localizedName: string;
		purchasedTime: Int64;
		validUntil: Int64;
		price: Price;
		nameKey: string;
		tier: SubscriptionPlanTier;
	});
}

export declare class GetPurchasedSubscriptionsResponse {
	subscriptions: PurchasedSubscription[];
	continuationToken: string;
	totalSize: Int64;

	constructor(args?: {
		subscriptions: PurchasedSubscription[];
		continuationToken: string;
		totalSize: Int64;
	});
}

export declare class FindRestorablePlanResponse {
	result: SubscriptionBillingResult;
	billingItemId: string;
	storeOrderId: string;
	originalStoreOrderId: string;
	orderId: string;
	mid: string;

	constructor(args?: {
		result: SubscriptionBillingResult;
		billingItemId: string;
		storeOrderId: string;
		originalStoreOrderId: string;
		orderId: string;
		mid: string;
	});
}

export declare class SubscriptionMissionCampaign {
	productType: ProductType;
	productId: string;

	constructor(args?: { productType: ProductType; productId: string });
}

export declare class SubscriptionCampaignPayload {
	mission: SubscriptionMissionCampaign;

	constructor(args?: { mission: SubscriptionMissionCampaign });
}

export declare class SubscriptionCampaign {
	campaignId: string;
	fromInclusive: Int64;
	toExclusive: Int64;
	type: SubscriptionCampaignType;
	payload: SubscriptionCampaignPayload;

	constructor(args?: {
		campaignId: string;
		fromInclusive: Int64;
		toExclusive: Int64;
		type: SubscriptionCampaignType;
		payload: SubscriptionCampaignPayload;
	});
}

export declare class GetSubscriptionCampaignsResponse {
	campaigns: SubscriptionCampaign[];

	constructor(args?: { campaigns: SubscriptionCampaign[] });
}

export declare class GetSubscriptionRecommendationsResponse {
	products: ProductSearchSummary[];

	constructor(args?: { products: ProductSearchSummary[] });
}

export declare class InteractionEventResponse {
	responseStatus: number;

	constructor(args?: { responseStatus: number });
}

export declare class LibraExperiment {
	experimentId: string;
	groupId: string;

	constructor(args?: { experimentId: string; groupId: string });
}

export declare class GetExperimentsV2Response {
	experiments: { [k: string]: LibraExperiment };

	constructor(args?: { experiments: { [k: string]: LibraExperiment } });
}

export declare class BirthdayGiftAssociationVerifyResponse {
	tokenStatus: BirthdayGiftAssociationVerifyTokenStatus;
	recipientUserMid: string;

	constructor(args?: {
		tokenStatus: BirthdayGiftAssociationVerifyTokenStatus;
		recipientUserMid: string;
	});
}

export declare class SubscriptionSlotHistory {
	product: ProductSearchSummary;
	addedTime: Int64;
	removedTime: Int64;

	constructor(args?: {
		product: ProductSearchSummary;
		addedTime: Int64;
		removedTime: Int64;
	});
}

export declare class GetSubscriptionSlotHistoryResponse {
	history: SubscriptionSlotHistory[];
	continuationToken: string;
	totalSize: Int64;

	constructor(args?: {
		history: SubscriptionSlotHistory[];
		continuationToken: string;
		totalSize: Int64;
	});
}

export declare class PopupDisplaySettings {
	pages: number[];
	editorsPickIds: string[];

	constructor(args?: { pages: number[]; editorsPickIds: string[] });
}

export declare class PopupPage {
	imageUrl: string;
	title: string;
	body: string;

	constructor(args?: { imageUrl: string; title: string; body: string });
}

export declare class PopupActionButton {
	label: string;
	actionUrl: string;
	textColorCode: string;
	backgroundColorCode: string;

	constructor(args?: {
		label: string;
		actionUrl: string;
		textColorCode: string;
		backgroundColorCode: string;
	});
}

export declare class PopupDismissButton {
	label: string;
	textColorCode: string;
	backgroundColorCode: string;

	constructor(args?: {
		label: string;
		textColorCode: string;
		backgroundColorCode: string;
	});
}

export declare class PopupContent {
	pages: PopupPage[];
	actionButton: PopupActionButton;
	dismissButton: PopupDismissButton;

	constructor(args?: {
		pages: PopupPage[];
		actionButton: PopupActionButton;
		dismissButton: PopupDismissButton;
	});
}

export declare class ShopPopup {
	popupId: string;
	displaySettings: PopupDisplaySettings;
	displayCount: PopupDisplayCount;
	content: PopupContent;
	displayPriority: number;
	visualType: PopupVisualType;
	displayIntervalInDays: number;

	constructor(args?: {
		popupId: string;
		displaySettings: PopupDisplaySettings;
		displayCount: PopupDisplayCount;
		content: PopupContent;
		displayPriority: number;
		visualType: PopupVisualType;
		displayIntervalInDays: number;
	});
}

export declare class GetPopupsResponse {
	popups: ShopPopup[];

	constructor(args?: { popups: ShopPopup[] });
}

export declare class GetSubscriptionSlotStatusResponse {
	productIdsInSlots: string[];
	usedSlotCount: number;
	maxSlotCount: number;

	constructor(args?: {
		productIdsInSlots: string[];
		usedSlotCount: number;
		maxSlotCount: number;
	});
}

export declare class GetProductKeyboardListResponse {
	productType: ProductType;
	keyboardProductIds: string[];

	constructor(args?: {
		productType: ProductType;
		keyboardProductIds: string[];
	});
}

export declare class GetMusicSubscriptionStatusResponse {
	validUntil: Int64;
	expired: boolean;
	isStickersPremiumEnabled: boolean;

	constructor(args?: {
		validUntil: Int64;
		expired: boolean;
		isStickersPremiumEnabled: boolean;
	});
}

export declare class StartBundleSubscriptionResponse {
	result: StartBundleSubscriptionResult;

	constructor(args?: { result: StartBundleSubscriptionResult });
}

export declare class StopBundleSubscriptionResponse {
	result: StopBundleSubscriptionResult;

	constructor(args?: { result: StopBundleSubscriptionResult });
}

export declare class GetSubscriptionCouponCodeResponse {
	result: GetSubscriptionCouponCodeResult;
	couponCode: string;

	constructor(args?: {
		result: GetSubscriptionCouponCodeResult;
		couponCode: string;
	});
}

export declare class GetSubscriptionCouponCampaignResponse {
	status: SubscriptionCouponCampaignStatus;

	constructor(args?: { status: SubscriptionCouponCampaignStatus });
}

export declare class PopupModel {
	popupId: string;
	active: boolean;

	constructor(args?: { popupId: string; active: boolean });
}

export declare class GetPopupDisplayStatusResponse {
	popups: { [k: string]: PopupModel };

	constructor(args?: { popups: { [k: string]: PopupModel } });
}

export declare class GetFilteredProductsResponse {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;

	constructor(args?: {
		results: ProductSearchSummary[];
		continuationToken: string;
		totalSize: Int64;
	});
}

export declare class GetProductLatestVersionForUserResponse {
	latestVersion: Int64;
	latestVersionString: string;

	constructor(args?: { latestVersion: Int64; latestVersionString: string });
}

export declare class GetSubscriptionAgreementStatusResponse {
	accepted: boolean;

	constructor(args?: { accepted: boolean });
}

export declare class AcceptSubscriptionAgreementResponse {
	result: AcceptSubscriptionAgreementResult;

	constructor(args?: { result: AcceptSubscriptionAgreementResult });
}

export declare class ShouldShowWelcomeStickerBannerResponse {
	shouldShowBanner: boolean;

	constructor(args?: { shouldShowBanner: boolean });
}

export declare class StickerDisplayData {
	stickerHash: string;
	stickerResourceType: StickerResourceType;
	nameTextProperty: ImageTextProperty;
	popupLayer: PopupLayer;
	stickerSize: StickerSize;
	productAvailability: ProductAvailability;
	height: number;
	width: number;
	version: Int64;
	availableForCombinationSticker: boolean;

	constructor(args?: {
		stickerHash: string;
		stickerResourceType: StickerResourceType;
		nameTextProperty: ImageTextProperty;
		popupLayer: PopupLayer;
		stickerSize: StickerSize;
		productAvailability: ProductAvailability;
		height: number;
		width: number;
		version: Int64;
		availableForCombinationSticker: boolean;
	});
}

export declare class DisplayData {
	stickerSummary: StickerDisplayData;

	constructor(args?: { stickerSummary: StickerDisplayData });
}

export declare class CollectionItem {
	itemId: string;
	productId: string;
	displayData: DisplayData;
	sortId: number;

	constructor(args?: {
		itemId: string;
		productId: string;
		displayData: DisplayData;
		sortId: number;
	});
}

export declare class Collection {
	collectionId: string;
	items: CollectionItem[];
	productType: ProductType;
	createdTimeMillis: Int64;
	updatedTimeMillis: Int64;

	constructor(args?: {
		collectionId: string;
		items: CollectionItem[];
		productType: ProductType;
		createdTimeMillis: Int64;
		updatedTimeMillis: Int64;
	});
}

export declare class GetUserCollectionsResponse {
	collections: Collection[];
	updated: boolean;

	constructor(args?: { collections: Collection[]; updated: boolean });
}

export declare class CreateCollectionForUserResponse {
	collection: Collection;

	constructor(args?: { collection: Collection });
}

export declare class AddItemToCollectionResponse {}

export declare class RemoveItemFromCollectionResponse {}

export declare class IsProductForCollectionsResponse {
	isAvailable: boolean;

	constructor(args?: { isAvailable: boolean });
}

export declare enum ExtendedProfileAttribute {}

export declare enum PrivacyLevelType {
	PUBLIC = 0,
	PRIVATE = 1,
}

export declare enum PaidCallerIdStatus {
	NOT_SPECIFIED = 0,
	VALID = 1,
	VERIFICATION_REQUIRED = 2,
	NOT_PERMITTED = 3,
	LIMIT_EXCEEDED = 4,
	LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5,
}

export declare enum PaidCallProductType {
	COIN = 0,
	CREDIT = 1,
	MONTHLY = 2,
}

export declare enum PaidCallType {
	OUT = 0,
	IN = 1,
	TOLLFREE = 2,
	RECORD = 3,
	AD = 4,
	CS = 5,
}

export declare enum BuddyBannerLinkType {
	BUDDY_BANNER_LINK_HIDDEN = 0,
	BUDDY_BANNER_LINK_MID = 1,
	BUDDY_BANNER_LINK_URL = 2,
}

export declare enum BuddyOnAirType {
	NORMAL = 0,
	LIVE = 1,
	VOIP = 2,
}

export declare enum Diff {
	ADDED = 0,
	UPDATED = 1,
	REMOVED = 2,
}

export declare enum ReportType {
	ADVERTISING = 1,
	GENDER_HARASSMENT = 2,
	HARASSMENT = 3,
	OTHER = 4,
}

export declare enum ReportCategory {
	PUSH_NORMAL_PLAIN = 0,
	PUSH_NORMAL_E2EE = 1,
	PUSH_VOIP_PLAIN = 2,
	PUSH_VOIP_E2EE = 3,
}

export declare enum BuddyResultState {
	ACCEPTED = 1,
	SUCCEEDED = 2,
	FAILED = 3,
	CANCELLED = 4,
	NOTIFY_FAILED = 5,
	STORING = 11,
	UPLOADING = 21,
	NOTIFYING = 31,
	REMOVING_SUBSCRIPTION = 41,
	UNREGISTERING_ACCOUNT = 42,
	NOTIFYING_LEAVE_CHAT = 43,
}

export declare enum BuddySearchRequestSource {
	NA = 0,
	FRIEND_VIEW = 1,
	OFFICIAL_ACCOUNT_VIEW = 2,
}

export declare enum CarrierCode {
	NOT_SPECIFIED = 0,
	JP_DOCOMO = 1,
	JP_AU = 2,
	JP_SOFTBANK = 3,
	JP_DOCOMO_LINE = 4,
	KR_SKT = 17,
	KR_KT = 18,
	KR_LGT = 19,
}

export declare enum ChannelConfiguration {
	MESSAGE = 0,
	MESSAGE_NOTIFICATION = 1,
	NOTIFICATION_CENTER = 2,
}

export declare enum ChannelPermission {
	PROFILE = 0,
	FRIENDS = 1,
	GROUP = 2,
}

export declare enum ChannelFeatureLicense {
	BLE_LCS_API_USABLE = 26,
	PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27,
	ALLOW_IOS_WEBKIT = 28,
}

export declare enum ChannelSyncType {
	SYNC = 0,
	REMOVE = 1,
	REMOVE_ALL = 2,
}

export declare enum LoginType {
	ID_CREDENTIAL = 0,
	QRCODE = 1,
	ID_CREDENTIAL_WITH_E2EE = 2,
}

export declare enum ContactAttribute {
	CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,
	CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,
	CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,
	CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32,
}

export declare enum ContactCategory {
	NORMAL = 0,
	RECOMMEND = 1,
}

export declare enum AsymmetricKeyAlgorithm {
	ASYMMETRIC_KEY_ALGORITHM_RSA = 1,
	ASYMMETRIC_KEY_ALGORITHM_ECDH = 2,
}

export declare enum GroupPreferenceAttribute {
	INVITATION_TICKET = 1,
	FAVORITE_TIMESTAMP = 2,
}

export declare enum RoomAttribute {
	ALL = 255,
	NOTIFICATION_SETTING = 1,
}

export declare enum AccountMigrationCheckType {
	SKIP = 0,
	PINCODE = 1,
	SECURITY_CENTER = 2,
}

export declare enum EmailConfirmationType {
	SERVER_SIDE_EMAIL = 0,
	CLIENT_SIDE_EMAIL = 1,
}

export declare enum SquareChatAnnouncementType {
	TEXT_MESSAGE = 0,
}

export declare enum SquareChatAttribute {
	NAME = 2,
	SQUARE_CHAT_IMAGE = 3,
	STATE = 4,
}

export declare enum SquareMemberAttribute {
	DISPLAY_NAME = 1,
	PROFILE_IMAGE = 2,
	ABLE_TO_RECEIVE_MESSAGE = 3,
	MEMBERSHIP_STATE = 5,
	ROLE = 6,
	PREFERENCE = 7,
}

export declare enum SquareMemberRelationAttribute {
	BLOCKED = 1,
}

export declare enum SquarePreferenceAttribute {
	FAVORITE = 1,
	NOTI_FOR_NEW_JOIN_REQUEST = 2,
}

export declare enum CommitMessageResultCode {
	DELIVERED = 0,
	DELIVERY_SKIPPED = 1,
	DELIVERY_RESTRICTED = 2,
}

export declare enum GroupAttribute {
	NAME = 1,
	PICTURE_STATUS = 2,
	ALL = 255,
	PREVENTED_JOIN_BY_TICKET = 4,
	NOTIFICATION_SETTING = 8,
}

export declare enum LoginResultType {
	SUCCESS = 1,
	REQUIRE_QRCODE = 2,
	REQUIRE_DEVICE_CONFIRM = 3,
	REQUIRE_SMS_CONFIRM = 4,
}

export declare enum MessageOperationType {
	SEND_MESSAGE = 1,
	RECEIVE_MESSAGE = 2,
	READ_MESSAGE = 3,
	NOTIFIED_READ_MESSAGE = 4,
	NOTIFIED_JOIN_CHAT = 5,
	FAILED_SEND_MESSAGE = 6,
	SEND_CONTENT = 7,
	SEND_CONTENT_RECEIPT = 8,
	SEND_CHAT_REMOVED = 9,
	REMOVE_ALL_MESSAGES = 10,
}

export declare enum FriendRequestDirection {
	INCOMING = 1,
	OUTGOING = 2,
}

export declare enum NotificationItemFetchMode {
	ALL = 0,
	APPEND = 1,
}

export declare enum NotificationQueueType {
	GLOBAL = 1,
	MESSAGE = 2,
	PRIMARY = 3,
}

export declare enum PersonalInfo {
	EMAIL = 0,
	PHONE = 1,
	BIRTHDAY = 2,
	RAW_BIRTHDAY = 3,
}

export declare enum PayloadType {
	PAYLOAD_BUY = 101,
	PAYLOAD_CS = 111,
	PAYLOAD_BONUS = 121,
	PAYLOAD_EVENT = 131,
}

export declare enum PaymentPgType {
	PAYMENT_PG_NONE = 0,
	PAYMENT_PG_AU = 1,
	PAYMENT_PG_AL = 2,
}

export declare enum PaymentType {
	PAYMENT_APPLE = 1,
	PAYMENT_GOOGLE = 2,
}

export declare enum ProductBannerLinkType {
	BANNER_LINK_NONE = 0,
	BANNER_LINK_ITEM = 1,
	BANNER_LINK_URL = 2,
	BANNER_LINK_CATEGORY = 3,
}

export declare enum ProductEventType {
	NO_EVENT = 0,
	CARRIER_ANY = 65537,
	BUDDY_ANY = 131073,
	INSTALL_IOS = 196609,
	INSTALL_ANDROID = 196610,
	MISSION_ANY = 262145,
	MUSTBUY_ANY = 327681,
}

export declare enum ProfileAttribute {
	ALL = 511,
	EMAIL = 1,
	DISPLAY_NAME = 2,
	PHONETIC_NAME = 4,
	PICTURE = 8,
	STATUS_MESSAGE = 16,
	ALLOW_SEARCH_BY_USERID = 32,
	ALLOW_SEARCH_BY_EMAIL = 64,
	BUDDY_STATUS = 128,
	MUSIC_PROFILE = 256,
}

export declare enum PublicType {
	HIDDEN = 0,
	PUBLIC = 1000,
}

export declare enum RedirectType {
	NONE = 0,
	EXPIRE_SECOND = 1,
}

export declare enum RegistrationType {
	PHONE = 0,
	EMAIL_WAP = 1,
	FACEBOOK = 2305,
	SINA = 2306,
	RENREN = 2307,
	FEIXIN = 2308,
}

export declare enum ChatRoomAnnouncementType {
	MESSAGE = 0,
	NOTE = 1,
}

export declare enum SettingsAttribute {
	ALL = 2147483647,
	NOTIFICATION_ENABLE = 1,
	NOTIFICATION_MUTE_EXPIRATION = 2,
	NOTIFICATION_NEW_MESSAGE = 4,
	NOTIFICATION_GROUP_INVITATION = 8,
	NOTIFICATION_SHOW_MESSAGE = 16,
	NOTIFICATION_INCOMING_CALL = 32,
	NOTIFICATION_SOUND_MESSAGE = 256,
	NOTIFICATION_SOUND_GROUP = 512,
	NOTIFICATION_DISABLED_WITH_SUB = 65536,
	NOTIFICATION_PAYMENT = 131072,
	PRIVACY_SYNC_CONTACTS = 64,
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
	PRIVACY_SEARCH_BY_USERID = 8192,
	PRIVACY_SEARCH_BY_EMAIL = 16384,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
	PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864,
	PRIVACY_AGREE_USE_PAIDCALL = 134217728,
	CONTACT_MY_TICKET = 1024,
	IDENTITY_PROVIDER = 2048,
	IDENTITY_IDENTIFIER = 4096,
	SNS_ACCOUNT = 524288,
	PHONE_REGISTRATION = 1048576,
	PREFERENCE_LOCALE = 32768,
	CUSTOM_MODE = 4194304,
	EMAIL_CONFIRMATION_STATUS = 16777216,
	ACCOUNT_MIGRATION_PINCODE = 268435456,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912,
	SECURITY_CENTER_SETTINGS = 262144,
}

export declare enum SettingsAttributeEx {
	NOTIFICATION_ENABLE = 0,
	NOTIFICATION_MUTE_EXPIRATION = 1,
	NOTIFICATION_NEW_MESSAGE = 2,
	NOTIFICATION_GROUP_INVITATION = 3,
	NOTIFICATION_SHOW_MESSAGE = 4,
	NOTIFICATION_INCOMING_CALL = 5,
	NOTIFICATION_SOUND_MESSAGE = 8,
	NOTIFICATION_SOUND_GROUP = 9,
	NOTIFICATION_DISABLED_WITH_SUB = 16,
	NOTIFICATION_PAYMENT = 17,
	NOTIFICATION_MENTION = 40,
	NOTIFICATION_THUMBNAIL = 45,
	PRIVACY_SYNC_CONTACTS = 6,
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 7,
	PRIVACY_SEARCH_BY_USERID = 13,
	PRIVACY_SEARCH_BY_EMAIL = 14,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23,
	PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35,
	PRIVACY_ALLOW_FRIEND_REQUEST = 30,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26,
	PRIVACY_AGREE_USE_PAIDCALL = 27,
	CONTACT_MY_TICKET = 10,
	IDENTITY_PROVIDER = 11,
	IDENTITY_IDENTIFIER = 12,
	SNS_ACCOUNT = 19,
	PHONE_REGISTRATION = 20,
	PREFERENCE_LOCALE = 15,
	CUSTOM_MODE = 22,
	EMAIL_CONFIRMATION_STATUS = 24,
	ACCOUNT_MIGRATION_PINCODE = 28,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29,
	SECURITY_CENTER_SETTINGS = 18,
	E2EE_ENABLE = 33,
	ENABLE_SOUND_TO_TEXT = 47,
	HITOKOTO_BACKUP_REQUESTED = 34,
	CONTACT_ALLOW_FOLLOWING = 36,
	PRIVACY_ALLOW_NEARBY = 37,
	AGREEMENT_NEARBY = 38,
	AGREEMENT_SQUARE = 39,
	ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41,
	AGREEMENT_BOT_USE = 42,
	AGREEMENT_SHAKE_FUNCTION = 43,
	AGREEMENT_MOBILE_CONTACT_NAME = 44,
	AGREEMENT_SOUND_TO_TEXT = 46,
}

export declare enum SpammerReason {
	OTHER = 0,
	ADVERTISING = 1,
	GENDER_HARASSMENT = 2,
	HARASSMENT = 3,
}

export declare enum SyncActionType {
	SYNC = 0,
	REPORT = 1,
}

export declare enum SpotCategory {
	UNKNOWN = 0,
	GOURMET = 1,
	BEAUTY = 2,
	TRAVEL = 3,
	SHOPPING = 4,
	ENTERTAINMENT = 5,
	SPORTS = 6,
	TRANSPORT = 7,
	LIFE = 8,
	HOSPITAL = 9,
	FINANCE = 10,
	EDUCATION = 11,
	OTHER = 12,
	ALL = 10000,
}

export declare enum SyncCategory {
	PROFILE = 0,
	SETTINGS = 1,
	OPS = 2,
	CONTACT = 3,
	RECOMMEND = 4,
	BLOCK = 5,
	GROUP = 6,
	ROOM = 7,
	NOTIFICATION = 8,
	ADDRESS_BOOK = 9,
}

export declare enum TMessageBoxStatus {
	ACTIVATED = 1,
	UNREAD = 2,
}

export declare enum UniversalNotificationServiceErrorCode {
	INTERNAL_ERROR = 0,
	INVALID_KEY = 1,
	ILLEGAL_ARGUMENT = 2,
	TOO_MANY_REQUEST = 3,
	AUTHENTICATION_FAILED = 4,
	NO_WRITE_PERMISSION = 5,
}

export declare enum UnregistrationReason {
	UNREGISTRATION_REASON_UNREGISTER_USER = 1,
	UNREGISTRATION_REASON_UNBIND_DEVICE = 2,
}

export declare enum VerificationResult {
	FAILED = 0,
	OK_NOT_REGISTERED_YET = 1,
	OK_REGISTERED_WITH_SAME_DEVICE = 2,
	OK_REGISTERED_WITH_ANOTHER_DEVICE = 3,
}

export declare enum WapInvitationType {
	REGISTRATION = 1,
	CHAT = 2,
}

export declare enum MediaType {
	AUDIO = 1,
	VIDEO = 2,
}

export declare enum SQErrorCode {
	UNKNOWN = 0,
	ILLEGAL_ARGUMENT = 400,
	AUTHENTICATION_FAILURE = 401,
	FORBIDDEN = 403,
	NOT_FOUND = 404,
	REVISION_MISMATCH = 409,
	PRECONDITION_FAILED = 410,
	INTERNAL_ERROR = 500,
	NOT_IMPLEMENTED = 501,
	TRY_AGAIN_LATER = 505,
}

export declare enum SquareFeatureSetAttribute {
	CREATING_SECRET_SQUARE_CHAT = 1,
	INVITING_INTO_OPEN_SQUARE_CHAT = 2,
}

export declare enum SquareChatMemberAttribute {
	MEMBERSHIP_STATE = 4,
	NOTIFICATION_MESSAGE = 6,
}

export declare enum FetchDirection {
	FORWARD = 1,
	BACKWARD = 2,
}

export declare enum SquareAttribute {
	NAME = 1,
	WELCOME_MESSAGE = 2,
	PROFILE_IMAGE = 3,
	DESCRIPTION = 4,
	SEARCHABLE = 6,
	CATEGORY = 7,
	INVITATION_URL = 8,
	ABLE_TO_USE_INVITATION_URL = 9,
	STATE = 10,
}

export declare enum SquareAuthorityAttribute {
	UPDATE_SQUARE_PROFILE = 1,
	INVITE_NEW_MEMBER = 2,
	APPROVE_JOIN_REQUEST = 3,
	CREATE_POST = 4,
	CREATE_OPEN_SQUARE_CHAT = 5,
	DELETE_SQUARE_CHAT_OR_POST = 6,
	REMOVE_SQUARE_MEMBER = 7,
	GRANT_ROLE = 8,
	ENABLE_INVITATION_TICKET = 9,
	CREATE_CHAT_ANNOUNCEMENT = 10,
}

export declare enum SuggestDictionaryIncrementStatus {
	SUCCESS = 0,
	INVALID_REVISION = 1,
	TOO_LARGE_DATA = 2,
	SCHEME_CHANGED = 3,
	RETRY = 4,
	FAIL = 5,
	TOO_OLD_DATA = 6,
}

export declare class MessageCommitResult {
	requestId: string;
	state: BuddyResultState;
	messageStoreRequestId: string;
	messageIds: string[];
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	blockCount: Int64;
	unregisteredCount: Int64;
	unrelatedCount: Int64;
	errorDescription: string;

	constructor(args?: {
		requestId: string;
		state: BuddyResultState;
		messageStoreRequestId: string;
		messageIds: string[];
		receiverCount: Int64;
		successCount: Int64;
		failCount: Int64;
		blockCount: Int64;
		unregisteredCount: Int64;
		unrelatedCount: Int64;
		errorDescription: string;
	});
}

export declare class CallHost {
	host: string;
	port: number;
	zone: string;

	constructor(args?: { host: string; port: number; zone: string });
}

export declare class AgeCheckDocomoResult {
	authUrl: string;
	userAgeType: UserAgeType;

	constructor(args?: { authUrl: string; userAgeType: UserAgeType });
}

export declare class AgeCheckRequestResult {
	authUrl: string;
	sessionId: string;

	constructor(args?: { authUrl: string; sessionId: string });
}

export declare class Announcement {
	index: number;
	forceUpdate: boolean;
	title: string;
	text: string;
	createdTime: Int64;
	pictureUrl: string;
	thumbnailUrl: string;

	constructor(args?: {
		index: number;
		forceUpdate: boolean;
		title: string;
		text: string;
		createdTime: Int64;
		pictureUrl: string;
		thumbnailUrl: string;
	});
}

export declare class ChannelProvider {
	name: string;

	constructor(args?: { name: string });
}

export declare class ChannelDomain {
	host: string;
	removed: boolean;

	constructor(args?: { host: string; removed: boolean });
}

export declare class OTPResult {
	otpId: string;
	otp: string;

	constructor(args?: { otpId: string; otp: string });
}

export declare class SquareInfo {
	square: Square;
	squareStatus: SquareStatus;
	squareNoteStatus: NoteStatus;

	constructor(args?: {
		square: Square;
		squareStatus: SquareStatus;
		squareNoteStatus: NoteStatus;
	});
}

export declare class BotUseInfo {
	botUseAgreementAccepted: boolean;
	botInFriends: boolean;
	primaryApplication: string;
	locale: string;

	constructor(args?: {
		botUseAgreementAccepted: boolean;
		botInFriends: boolean;
		primaryApplication: string;
		locale: string;
	});
}

export declare class PaidCallAdCountry {
	countryCode: string;
	rateDivision: string;

	constructor(args?: { countryCode: string; rateDivision: string });
}

export declare class PaidCallAdResult {
	adRemains: number;

	constructor(args?: { adRemains: number });
}

export declare class PaidCallBalance {
	productType: PaidCallProductType;
	productName: string;
	unit: string;
	limitedPaidBalance: number;
	limitedFreeBalance: number;
	unlimitedPaidBalance: number;
	unlimitedFreeBalance: number;
	startTime: Int64;
	endTime: Int64;
	autopayEnabled: boolean;

	constructor(args?: {
		productType: PaidCallProductType;
		productName: string;
		unit: string;
		limitedPaidBalance: number;
		limitedFreeBalance: number;
		unlimitedPaidBalance: number;
		unlimitedFreeBalance: number;
		startTime: Int64;
		endTime: Int64;
		autopayEnabled: boolean;
	});
}

export declare class PaidCallCurrencyExchangeRate {
	currencyCode: string;
	currencyName: string;
	currencySign: string;
	preferred: boolean;
	coinRate: string;
	creditRate: string;

	constructor(args?: {
		currencyCode: string;
		currencyName: string;
		currencySign: string;
		preferred: boolean;
		coinRate: string;
		creditRate: string;
	});
}

export declare class ExtendedProfileBirthday {
	year: string;
	yearPrivacyLevelType: PrivacyLevelType;
	yearEnabled: boolean;
	day: string;
	dayPrivacyLevelType: PrivacyLevelType;
	dayEnabled: boolean;

	constructor(args?: {
		year: string;
		yearPrivacyLevelType: PrivacyLevelType;
		yearEnabled: boolean;
		day: string;
		dayPrivacyLevelType: PrivacyLevelType;
		dayEnabled: boolean;
	});
}

export declare class ExtendedProfile {
	birthday: ExtendedProfileBirthday;

	constructor(args?: { birthday: ExtendedProfileBirthday });
}

export declare class PaidCallDialing {
	type: PaidCallType;
	dialedNumber: string;
	serviceDomain: string;
	productType: PaidCallProductType;
	productName: string;
	multipleProduct: boolean;
	callerIdStatus: PaidCallerIdStatus;
	balance: number;
	unit: string;
	rate: number;
	displayCode: string;
	calledNumber: string;
	calleeNationalNumber: string;
	calleeCallingCode: string;
	rateDivision: string;
	adMaxMin: number;
	adRemains: number;
	adSessionId: string;

	constructor(args?: {
		type: PaidCallType;
		dialedNumber: string;
		serviceDomain: string;
		productType: PaidCallProductType;
		productName: string;
		multipleProduct: boolean;
		callerIdStatus: PaidCallerIdStatus;
		balance: number;
		unit: string;
		rate: number;
		displayCode: string;
		calledNumber: string;
		calleeNationalNumber: string;
		calleeCallingCode: string;
		rateDivision: string;
		adMaxMin: number;
		adRemains: number;
		adSessionId: string;
	});
}

export declare class SpotItem {
	name: string;
	phone: string;
	category: SpotCategory;
	mid: string;
	countryAreaCode: string;
	freePhoneCallable: boolean;

	constructor(args?: {
		name: string;
		phone: string;
		category: SpotCategory;
		mid: string;
		countryAreaCode: string;
		freePhoneCallable: boolean;
	});
}

export declare class SpotNearbyItem {
	spotItem: SpotItem;
	location: Location;

	constructor(args?: { spotItem: SpotItem; location: Location });
}

export declare class SpotNearbyResponse {
	spotNearbyItems: SpotNearbyItem[];

	constructor(args?: { spotNearbyItems: SpotNearbyItem[] });
}

export declare class SpotPhoneNumberResponse {
	spotItems: SpotItem[];

	constructor(args?: { spotItems: SpotItem[] });
}

export declare class PaidCallHistory {
	seq: Int64;
	type: PaidCallType;
	dialedNumber: string;
	calledNumber: string;
	toMid: string;
	toName: string;
	setupTime: Int64;
	startTime: Int64;
	endTime: Int64;
	duration: Int64;
	terminate: number;
	productType: PaidCallProductType;
	charge: number;
	unit: string;
	result: string;

	constructor(args?: {
		seq: Int64;
		type: PaidCallType;
		dialedNumber: string;
		calledNumber: string;
		toMid: string;
		toName: string;
		setupTime: Int64;
		startTime: Int64;
		endTime: Int64;
		duration: Int64;
		terminate: number;
		productType: PaidCallProductType;
		charge: number;
		unit: string;
		result: string;
	});
}

export declare class PaidCallHistoryResult {
	historys: PaidCallHistory[];
	hasNext: boolean;

	constructor(args?: { historys: PaidCallHistory[]; hasNext: boolean });
}

export declare class PaidCallMetadataResult {
	currencyExchangeRates: PaidCallCurrencyExchangeRate[];
	recommendedCountryCodes: string[];
	adCountries: PaidCallAdCountry[];

	constructor(args?: {
		currencyExchangeRates: PaidCallCurrencyExchangeRate[];
		recommendedCountryCodes: string[];
		adCountries: PaidCallAdCountry[];
	});
}

export declare class PaidCallRedeemResult {
	eventName: string;
	eventAmount: number;

	constructor(args?: { eventName: string; eventAmount: number });
}

export declare class PaidCallResponse {
	host: CallHost;
	dialing: PaidCallDialing;
	token: string;
	spotItems: SpotItem[];

	constructor(args?: {
		host: CallHost;
		dialing: PaidCallDialing;
		token: string;
		spotItems: SpotItem[];
	});
}

export declare class PaidCallUserRate {
	countryCode: string;
	rate: number;
	rateDivision: string;
	rateName: string;

	constructor(args?: {
		countryCode: string;
		rate: number;
		rateDivision: string;
		rateName: string;
	});
}

export declare class ChannelInfo {
	channelId: string;
	name: string;
	entryPageUrl: string;
	descriptionText: string;
	provider: ChannelProvider;
	publicType: PublicType;
	iconImage: string;
	permissions: string[];
	iconThumbnailImage: string;
	channelConfigurations: ChannelConfiguration[];
	lcsAllApiUsable: boolean;
	allowedPermissions: ChannelPermission[];
	channelDomains: ChannelDomain[];
	updatedTimestamp: Int64;

	constructor(args?: {
		channelId: string;
		name: string;
		entryPageUrl: string;
		descriptionText: string;
		provider: ChannelProvider;
		publicType: PublicType;
		iconImage: string;
		permissions: string[];
		iconThumbnailImage: string;
		channelConfigurations: ChannelConfiguration[];
		lcsAllApiUsable: boolean;
		allowedPermissions: ChannelPermission[];
		channelDomains: ChannelDomain[];
		updatedTimestamp: Int64;
	});
}

export declare class ApprovedChannelInfo {
	channelInfo: ChannelInfo;
	approvedAt: Int64;

	constructor(args?: { channelInfo: ChannelInfo; approvedAt: Int64 });
}

export declare class ApprovedChannelInfos {
	approvedChannelInfos: ApprovedChannelInfo[];
	revision: Int64;

	constructor(args?: {
		approvedChannelInfos: ApprovedChannelInfo[];
		revision: Int64;
	});
}

export declare class AuthQrcode {
	qrcode: string;
	verifier: string;
	callbackUrl: string;

	constructor(args?: { qrcode: string; verifier: string; callbackUrl: string });
}

export declare class AnalyticsInfo {
	gaSamplingRate: number;
	tmid: string;

	constructor(args?: { gaSamplingRate: number; tmid: string });
}

export declare class ContactTransition {
	ownerMid: string;
	targetMid: string;
	previousStatus: ContactStatus;
	resultStatus: ContactStatus;

	constructor(args?: {
		ownerMid: string;
		targetMid: string;
		previousStatus: ContactStatus;
		resultStatus: ContactStatus;
	});
}

export declare class UserTicketResponse {
	mid: string;
	userTicket: string;

	constructor(args?: { mid: string; userTicket: string });
}

export declare class BuddyBanner {
	buddyBannerLinkType: BuddyBannerLinkType;
	buddyBannerLink: string;
	buddyBannerImageUrl: string;

	constructor(args?: {
		buddyBannerLinkType: BuddyBannerLinkType;
		buddyBannerLink: string;
		buddyBannerImageUrl: string;
	});
}

export declare class BuddyList {
	classification: string;
	displayName: string;
	totalBuddyCount: number;
	popularContacts: Contact[];

	constructor(args?: {
		classification: string;
		displayName: string;
		totalBuddyCount: number;
		popularContacts: Contact[];
	});
}

export declare class RegisterWithPhoneNumberResult {
	authToken: string;
	recommendEmailRegistration: boolean;
	certificate: string;

	constructor(args?: {
		authToken: string;
		recommendEmailRegistration: boolean;
		certificate: string;
	});
}

export declare class BuddyMessageRequest {
	contentType: ContentType;
	text: string;
	location: Location;
	content: Buffer;
	contentMetadata: { [k: string]: string };

	constructor(args?: {
		contentType: ContentType;
		text: string;
		location: Location;
		content: Buffer;
		contentMetadata: { [k: string]: string };
	});
}

export declare class BuddyOnAirUrls {
	hls: { [k: string]: string };
	smoothStreaming: { [k: string]: string };

	constructor(args?: {
		hls: { [k: string]: string };
		smoothStreaming: { [k: string]: string };
	});
}

export declare class BuddyOnAir {
	mid: string;
	freshnessLifetime: Int64;
	onAirId: string;
	onAir: boolean;
	text: string;
	viewerCount: Int64;
	targetCount: Int64;
	onAirType: BuddyOnAirType;
	onAirUrls: BuddyOnAirUrls;

	constructor(args?: {
		mid: string;
		freshnessLifetime: Int64;
		onAirId: string;
		onAir: boolean;
		text: string;
		viewerCount: Int64;
		targetCount: Int64;
		onAirType: BuddyOnAirType;
		onAirUrls: BuddyOnAirUrls;
	});
}

export declare class BuddyProfile {
	buddyId: string;
	mid: string;
	searchId: string;
	displayName: string;
	statusMessage: string;
	contactCount: Int64;

	constructor(args?: {
		buddyId: string;
		mid: string;
		searchId: string;
		displayName: string;
		statusMessage: string;
		contactCount: Int64;
	});
}

export declare class CommitMessageResult {
	message: Message;
	code: CommitMessageResultCode;
	reason: string;
	successCount: Int64;
	failCount: Int64;
	unregisterCount: Int64;
	blockCount: Int64;

	constructor(args?: {
		message: Message;
		code: CommitMessageResultCode;
		reason: string;
		successCount: Int64;
		failCount: Int64;
		unregisterCount: Int64;
		blockCount: Int64;
	});
}

export declare class BuddySearchResult {
	mid: string;
	displayName: string;
	pictureStatus: string;
	picturePath: string;
	statusMessage: string;
	businessAccount: boolean;

	constructor(args?: {
		mid: string;
		displayName: string;
		pictureStatus: string;
		picturePath: string;
		statusMessage: string;
		businessAccount: boolean;
	});
}

export declare class SyncParamMid {
	mid: string;
	diff: Diff;
	revision: Int64;

	constructor(args?: { mid: string; diff: Diff; revision: Int64 });
}

export declare class SIMInfo {
	phoneNumber: string;
	countryCode: string;

	constructor(args?: { phoneNumber: string; countryCode: string });
}

export declare class SyncParamContact {
	syncParamMid: SyncParamMid;
	contactStatus: ContactStatus;

	constructor(args?: {
		syncParamMid: SyncParamMid;
		contactStatus: ContactStatus;
	});
}

export declare class ChannelDomains {
	channelDomains: ChannelDomain[];
	revision: Int64;

	constructor(args?: { channelDomains: ChannelDomain[]; revision: Int64 });
}

export declare class ProductCategory {
	productCategoryId: Int64;
	title: string;
	productCount: number;
	newFlag: boolean;

	constructor(args?: {
		productCategoryId: Int64;
		title: string;
		productCount: number;
		newFlag: boolean;
	});
}

export declare class ChannelInfos {
	channelInfos: ChannelInfo[];
	revision: Int64;

	constructor(args?: { channelInfos: ChannelInfo[]; revision: Int64 });
}

export declare class ChannelNotificationSetting {
	channelId: string;
	name: string;
	notificationReceivable: boolean;
	messageReceivable: boolean;
	showDefault: boolean;

	constructor(args?: {
		channelId: string;
		name: string;
		notificationReceivable: boolean;
		messageReceivable: boolean;
		showDefault: boolean;
	});
}

export declare class ChannelSyncDatas {
	channelInfos: ChannelInfo[];
	channelDomains: ChannelDomain[];
	revision: Int64;
	expires: Int64;

	constructor(args?: {
		channelInfos: ChannelInfo[];
		channelDomains: ChannelDomain[];
		revision: Int64;
		expires: Int64;
	});
}

export declare class NotiCenterEventData {
	id: string;
	to: string;
	from_: string;
	toChannel: string;
	fromChannel: string;
	eventType: string;
	createdTime: Int64;
	operationRevision: Int64;
	content: { [k: string]: string };
	push: { [k: string]: string };

	constructor(args?: {
		id: string;
		to: string;
		from_: string;
		toChannel: string;
		fromChannel: string;
		eventType: string;
		createdTime: Int64;
		operationRevision: Int64;
		content: { [k: string]: string };
		push: { [k: string]: string };
	});
}

export declare class ChannelSettings {
	unapprovedMessageReceivable: boolean;

	constructor(args?: { unapprovedMessageReceivable: boolean });
}

export declare class ChannelIdWithLastUpdated {
	channelId: string;
	lastUpdated: Int64;

	constructor(args?: { channelId: string; lastUpdated: Int64 });
}

export declare class Coin {
	freeCoinBalance: number;
	payedCoinBalance: number;
	totalCoinBalance: number;
	rewardCoinBalance: number;

	constructor(args?: {
		freeCoinBalance: number;
		payedCoinBalance: number;
		totalCoinBalance: number;
		rewardCoinBalance: number;
	});
}

export declare class CoinPayLoad {
	payCoin: number;
	freeCoin: number;
	type: PayloadType;
	rewardCoin: number;

	constructor(args?: {
		payCoin: number;
		freeCoin: number;
		type: PayloadType;
		rewardCoin: number;
	});
}

export declare class CoinHistory {
	payDate: Int64;
	coinBalance: number;
	coin: number;
	price: string;
	title: string;
	refund: boolean;
	paySeq: string;
	currency: string;
	currencySign: string;
	displayPrice: string;
	payload: CoinPayLoad;
	channelId: string;

	constructor(args?: {
		payDate: Int64;
		coinBalance: number;
		coin: number;
		price: string;
		title: string;
		refund: boolean;
		paySeq: string;
		currency: string;
		currencySign: string;
		displayPrice: string;
		payload: CoinPayLoad;
		channelId: string;
	});
}

export declare class CoinHistoryCondition {
	start: Int64;
	size: number;
	language: string;
	eddt: string;
	appStoreCode: PaymentType;

	constructor(args?: {
		start: Int64;
		size: number;
		language: string;
		eddt: string;
		appStoreCode: PaymentType;
	});
}

export declare class CoinHistoryResult {
	historys: CoinHistory[];
	balance: Coin;
	hasNext: boolean;

	constructor(args?: {
		historys: CoinHistory[];
		balance: Coin;
		hasNext: boolean;
	});
}

export declare class CoinProductItem {
	itemId: string;
	coin: number;
	freeCoin: number;
	currency: string;
	price: string;
	displayPrice: string;
	name: string;
	desc: string;

	constructor(args?: {
		itemId: string;
		coin: number;
		freeCoin: number;
		currency: string;
		price: string;
		displayPrice: string;
		name: string;
		desc: string;
	});
}

export declare class CoinPurchaseConfirm {
	orderId: string;
	appStoreCode: PaymentType;
	receipt: string;
	signature: string;
	seller: string;
	requestType: string;
	ignoreReceipt: boolean;

	constructor(args?: {
		orderId: string;
		appStoreCode: PaymentType;
		receipt: string;
		signature: string;
		seller: string;
		requestType: string;
		ignoreReceipt: boolean;
	});
}

export declare class CoinPurchaseReservation {
	productId: string;
	country: string;
	currency: string;
	price: string;
	appStoreCode: PaymentType;
	language: string;
	pgCode: PaymentPgType;
	redirectUrl: string;

	constructor(args?: {
		productId: string;
		country: string;
		currency: string;
		price: string;
		appStoreCode: PaymentType;
		language: string;
		pgCode: PaymentPgType;
		redirectUrl: string;
	});
}

export declare class CoinUseReservationItem {
	itemId: string;
	itemName: string;
	amount: number;

	constructor(args?: { itemId: string; itemName: string; amount: number });
}

export declare class CoinUseReservation {
	channelId: string;
	shopOrderId: string;
	appStoreCode: PaymentType;
	items: CoinUseReservationItem[];
	country: string;

	constructor(args?: {
		channelId: string;
		shopOrderId: string;
		appStoreCode: PaymentType;
		items: CoinUseReservationItem[];
		country: string;
	});
}

export declare class CompactContact {
	mid: string;
	createdTime: Int64;
	modifiedTime: Int64;
	status: ContactStatus;
	settings: Int64;
	displayNameOverridden: string;

	constructor(args?: {
		mid: string;
		createdTime: Int64;
		modifiedTime: Int64;
		status: ContactStatus;
		settings: Int64;
		displayNameOverridden: string;
	});
}

export declare class ContactReport {
	mid: string;
	exists: boolean;
	contact: Contact;

	constructor(args?: { mid: string; exists: boolean; contact: Contact });
}

export declare class ContactReportResult {
	mid: string;
	exists: boolean;

	constructor(args?: { mid: string; exists: boolean });
}

export declare class DeviceInfo {
	deviceName: string;
	systemName: string;
	systemVersion: string;
	model: string;
	carrierCode: CarrierCode;
	carrierName: string;
	applicationType: ApplicationType;

	constructor(args?: {
		deviceName: string;
		systemName: string;
		systemVersion: string;
		model: string;
		carrierCode: CarrierCode;
		carrierName: string;
		applicationType: ApplicationType;
	});
}

export declare class EmailConfirmation {
	usePasswordSet: boolean;
	email: string;
	password: string;
	ignoreDuplication: boolean;

	constructor(args?: {
		usePasswordSet: boolean;
		email: string;
		password: string;
		ignoreDuplication: boolean;
	});
}

export declare class EmailConfirmationSession {
	emailConfirmationType: EmailConfirmationType;
	verifier: string;
	targetEmail: string;

	constructor(args?: {
		emailConfirmationType: EmailConfirmationType;
		verifier: string;
		targetEmail: string;
	});
}

export declare class FriendChannelMatrix {
	channelId: string;
	representMid: string;
	count: number;
	point: number;

	constructor(args?: {
		channelId: string;
		representMid: string;
		count: number;
		point: number;
	});
}

export declare class FriendChannelMatricesResponse {
	expires: Int64;
	matrices: FriendChannelMatrix[];

	constructor(args?: { expires: Int64; matrices: FriendChannelMatrix[] });
}

export declare class FriendRequest {
	eMid: string;
	mid: string;
	direction: FriendRequestDirection;
	method: FriendRequestMethod;
	param: string;
	timestamp: Int64;
	seqId: Int64;
	displayName: string;
	picturePath: string;
	pictureStatus: string;

	constructor(args?: {
		eMid: string;
		mid: string;
		direction: FriendRequestDirection;
		method: FriendRequestMethod;
		param: string;
		timestamp: Int64;
		seqId: Int64;
		displayName: string;
		picturePath: string;
		pictureStatus: string;
	});
}

export declare class FriendRequestsInfo {
	totalIncomingCount: number;
	totalOutgoingCount: number;
	recentIncomings: FriendRequest[];
	recentOutgoings: FriendRequest[];
	totalIncomingLimit: number;
	totalOutgoingLimit: number;

	constructor(args?: {
		totalIncomingCount: number;
		totalOutgoingCount: number;
		recentIncomings: FriendRequest[];
		recentOutgoings: FriendRequest[];
		totalIncomingLimit: number;
		totalOutgoingLimit: number;
	});
}

export declare class Geolocation {
	longitude: number;
	latitude: number;

	constructor(args?: { longitude: number; latitude: number });
}

export declare class NotificationTarget {
	applicationType: string;
	applicationVersion: string;
	region: string;

	constructor(args?: {
		applicationType: string;
		applicationVersion: string;
		region: string;
	});
}

export declare class GroupPreference {
	invitationTicket: string;
	favoriteTimestamp: Int64;

	constructor(args?: { invitationTicket: string; favoriteTimestamp: Int64 });
}

export declare class Group {
	id: string;
	createdTime: Int64;
	name: string;
	pictureStatus: string;
	preventedJoinByTicket: boolean;
	groupPreference: GroupPreference;
	members: Contact[];
	creator: Contact;
	invitee: Contact[];
	notificationDisabled: boolean;

	constructor(args?: {
		id: string;
		createdTime: Int64;
		name: string;
		pictureStatus: string;
		preventedJoinByTicket: boolean;
		groupPreference: GroupPreference;
		members: Contact[];
		creator: Contact;
		invitee: Contact[];
		notificationDisabled: boolean;
	});
}

export declare class IdentityCredential {
	provider: IdentityProvider;
	identifier: string;
	password: string;

	constructor(args?: {
		provider: IdentityProvider;
		identifier: string;
		password: string;
	});
}

export declare class LastReadMessageId {
	mid: string;
	lastReadMessageId: string;

	constructor(args?: { mid: string; lastReadMessageId: string });
}

export declare class LastReadMessageIds {
	chatId: string;
	lastReadMessageIds: LastReadMessageId[];

	constructor(args?: {
		chatId: string;
		lastReadMessageIds: LastReadMessageId[];
	});
}

export declare class LoginResult {
	authToken: string;
	certificate: string;
	verifier: string;
	pinCode: string;
	type: LoginResultType;
	lastPrimaryBindTime: Int64;
	displayMessage: string;
	sessionForSMSConfirm: VerificationSessionData;

	constructor(args?: {
		authToken: string;
		certificate: string;
		verifier: string;
		pinCode: string;
		type: LoginResultType;
		lastPrimaryBindTime: Int64;
		displayMessage: string;
		sessionForSMSConfirm: VerificationSessionData;
	});
}

export declare class LoginRequest {
	type: number;
	identityProvider: number;
	identifier: string;
	password: string;
	keepLoggedIn: boolean;
	accessLocation: string;
	systemName: string;
	certificate: string;
	verifier: string;
	secret: string;
	e2eeVersion: number;

	constructor(args?: {
		type: number;
		identityProvider: number;
		identifier: string;
		password: string;
		keepLoggedIn: boolean;
		accessLocation: string;
		systemName: string;
		certificate: string;
		verifier: string;
		secret: string;
		e2eeVersion: number;
	});
}

export declare class LoginSession {
	tokenKey: string;
	expirationTime: Int64;
	applicationType: ApplicationType;
	systemName: string;
	accessLocation: string;

	constructor(args?: {
		tokenKey: string;
		expirationTime: Int64;
		applicationType: ApplicationType;
		systemName: string;
		accessLocation: string;
	});
}

export declare class MessageOperation {
	revision: Int64;
	createdTime: Int64;
	type: MessageOperationType;
	reqSeq: number;
	status: OpStatus;
	param1: string;
	param2: string;
	param3: string;
	message: Message;

	constructor(args?: {
		revision: Int64;
		createdTime: Int64;
		type: MessageOperationType;
		reqSeq: number;
		status: OpStatus;
		param1: string;
		param2: string;
		param3: string;
		message: Message;
	});
}

export declare class MessageOperations {
	operations: MessageOperation[];
	endFlag: boolean;

	constructor(args?: { operations: MessageOperation[]; endFlag: boolean });
}

export declare class MessageStoreResult {
	requestId: string;
	messageIds: string[];

	constructor(args?: { requestId: string; messageIds: string[] });
}

export declare class MetaProfile {
	createTime: Int64;
	regionCode: string;
	identities: { [k: number /*RegistrationType*/]: string };

	constructor(args?: {
		createTime: Int64;
		regionCode: string;
		identities: { [k: number /*RegistrationType*/]: string };
	});
}

export declare class NotificationItem {
	id: string;
	_from: string;
	to: string;
	fromChannel: string;
	toChannel: string;
	revision: Int64;
	createdTime: Int64;
	content: { [k: string]: string };

	constructor(args?: {
		id: string;
		_from: string;
		to: string;
		fromChannel: string;
		toChannel: string;
		revision: Int64;
		createdTime: Int64;
		content: { [k: string]: string };
	});
}

export declare class NotificationFetchResult {
	fetchMode: NotificationItemFetchMode;
	itemList: NotificationItem[];

	constructor(args?: {
		fetchMode: NotificationItemFetchMode;
		itemList: NotificationItem[];
	});
}

export declare class PaymentReservation {
	receiverMid: string;
	productId: string;
	language: string;
	location: string;
	currency: string;
	price: string;
	appStoreCode: PaymentType;
	messageText: string;
	messageTemplate: number;
	packageId: Int64;

	constructor(args?: {
		receiverMid: string;
		productId: string;
		language: string;
		location: string;
		currency: string;
		price: string;
		appStoreCode: PaymentType;
		messageText: string;
		messageTemplate: number;
		packageId: Int64;
	});
}

export declare class PaymentReservationResult {
	orderId: string;
	confirmUrl: string;
	extras: { [k: string]: string };

	constructor(args?: {
		orderId: string;
		confirmUrl: string;
		extras: { [k: string]: string };
	});
}

export declare class Product {
	productId: string;
	packageId: Int64;
	version: number;
	authorName: string;
	onSale: boolean;
	validDays: number;
	saleType: number;
	copyright: string;
	title: string;
	descriptionText: string;
	shopOrderId: Int64;
	fromMid: string;
	toMid: string;
	validUntil: Int64;
	priceTier: number;
	price: string;
	currency: string;
	currencySymbol: string;
	paymentType: PaymentType;
	createDate: Int64;
	ownFlag: boolean;
	eventType: ProductEventType;
	urlSchema: string;
	downloadUrl: string;
	buddyMid: string;
	publishSince: Int64;
	newFlag: boolean;
	missionFlag: boolean;
	categories: ProductCategory[];
	missionButtonText: string;
	missionShortDescription: string;
	authorId: string;
	grantedByDefault: boolean;
	displayOrder: number;
	availableForPresent: boolean;
	availableForMyself: boolean;
	hasAnimation: boolean;
	hasSound: boolean;
	recommendationsEnabled: boolean;
	stickerResourceType: StickerResourceType;

	constructor(args?: {
		productId: string;
		packageId: Int64;
		version: number;
		authorName: string;
		onSale: boolean;
		validDays: number;
		saleType: number;
		copyright: string;
		title: string;
		descriptionText: string;
		shopOrderId: Int64;
		fromMid: string;
		toMid: string;
		validUntil: Int64;
		priceTier: number;
		price: string;
		currency: string;
		currencySymbol: string;
		paymentType: PaymentType;
		createDate: Int64;
		ownFlag: boolean;
		eventType: ProductEventType;
		urlSchema: string;
		downloadUrl: string;
		buddyMid: string;
		publishSince: Int64;
		newFlag: boolean;
		missionFlag: boolean;
		categories: ProductCategory[];
		missionButtonText: string;
		missionShortDescription: string;
		authorId: string;
		grantedByDefault: boolean;
		displayOrder: number;
		availableForPresent: boolean;
		availableForMyself: boolean;
		hasAnimation: boolean;
		hasSound: boolean;
		recommendationsEnabled: boolean;
		stickerResourceType: StickerResourceType;
	});
}

export declare class ProductSimple {
	productId: string;
	packageId: Int64;
	version: number;
	onSale: boolean;
	validUntil: Int64;
	stickerIdRanges: StickerIdRange[];
	grantedByDefault: boolean;
	displayOrder: number;

	constructor(args?: {
		productId: string;
		packageId: Int64;
		version: number;
		onSale: boolean;
		validUntil: Int64;
		stickerIdRanges: StickerIdRange[];
		grantedByDefault: boolean;
		displayOrder: number;
	});
}

export declare class ProductSimpleList {
	hasNext: boolean;
	reinvokeHour: number;
	lastVersionSeq: Int64;
	productList: ProductSimple[];
	recentNewReleaseDate: Int64;
	recentEventReleaseDate: Int64;

	constructor(args?: {
		hasNext: boolean;
		reinvokeHour: number;
		lastVersionSeq: Int64;
		productList: ProductSimple[];
		recentNewReleaseDate: Int64;
		recentEventReleaseDate: Int64;
	});
}

export declare class ProximityMatchCandidateResult {
	users: Contact[];
	buddies: Contact[];

	constructor(args?: { users: Contact[]; buddies: Contact[] });
}

export declare class RegisterWithSnsIdResult {
	authToken: string;
	userCreated: boolean;

	constructor(args?: { authToken: string; userCreated: boolean });
}

export declare class RequestTokenResponse {
	requestToken: string;
	returnUrl: string;

	constructor(args?: { requestToken: string; returnUrl: string });
}

export declare class SuggestDictionary {
	language: string;
	name: string;

	constructor(args?: { language: string; name: string });
}

export declare class SuggestItemDictionaryIncrement {
	status: SuggestDictionaryIncrementStatus;
	revision: Int64;
	scheme: string;
	data: Buffer;

	constructor(args?: {
		status: SuggestDictionaryIncrementStatus;
		revision: Int64;
		scheme: string;
		data: Buffer;
	});
}

export declare class SuggestTagDictionaryIncrement {
	status: SuggestDictionaryIncrementStatus;
	language: string;
	revision: Int64;
	scheme: string;
	data: Buffer;

	constructor(args?: {
		status: SuggestDictionaryIncrementStatus;
		language: string;
		revision: Int64;
		scheme: string;
		data: Buffer;
	});
}

export declare class SuggestDictionaryIncrements {
	itemIncrement: SuggestItemDictionaryIncrement;
	tagIncrements: SuggestTagDictionaryIncrement[];

	constructor(args?: {
		itemIncrement: SuggestItemDictionaryIncrement;
		tagIncrements: SuggestTagDictionaryIncrement[];
	});
}

export declare class SuggestItemDictionaryRevision {
	revision: Int64;
	scheme: string;

	constructor(args?: { revision: Int64; scheme: string });
}

export declare class SuggestTagDictionaryRevision {
	language: string;
	revision: Int64;
	scheme: string;

	constructor(args?: { language: string; revision: Int64; scheme: string });
}

export declare class SuggestDictionaryRevisions {
	itemRevision: SuggestItemDictionaryRevision;
	tagRevisions: SuggestTagDictionaryRevision[];

	constructor(args?: {
		itemRevision: SuggestItemDictionaryRevision;
		tagRevisions: SuggestTagDictionaryRevision[];
	});
}

export declare class SuggestDictionarySettings {
	revision: Int64;
	newRevision: Int64;
	dictionaries: SuggestDictionary[];
	preloadedDictionaries: string[];

	constructor(args?: {
		revision: Int64;
		newRevision: Int64;
		dictionaries: SuggestDictionary[];
		preloadedDictionaries: string[];
	});
}

export declare class PhoneInfoForChannel {
	mid: string;
	normalizedPhoneNumber: string;
	allowedToSearchByPhoneNumber: boolean;
	allowedToReceiveMessageFromNonFriend: boolean;
	region: string;

	constructor(args?: {
		mid: string;
		normalizedPhoneNumber: string;
		allowedToSearchByPhoneNumber: boolean;
		allowedToReceiveMessageFromNonFriend: boolean;
		region: string;
	});
}

export declare class PhoneVerificationResult {
	verificationResult: VerificationResult;
	accountMigrationCheckType: AccountMigrationCheckType;
	recommendAddFriends: boolean;

	constructor(args?: {
		verificationResult: VerificationResult;
		accountMigrationCheckType: AccountMigrationCheckType;
		recommendAddFriends: boolean;
	});
}

export declare class PlaceSearchInfo {
	name: string;
	address: string;
	latitude: number;
	longitude: number;

	constructor(args?: {
		name: string;
		address: string;
		latitude: number;
		longitude: number;
	});
}

export declare class SecurityCenterResult {
	uri: string;
	token: string;
	cookiePath: string;
	skip: boolean;

	constructor(args?: {
		uri: string;
		token: string;
		cookiePath: string;
		skip: boolean;
	});
}

export declare class SendBuddyMessageResult {
	requestId: string;
	state: BuddyResultState;
	messageId: string;
	eventNo: number;
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	cancelCount: Int64;
	blockCount: Int64;
	unregisterCount: Int64;
	timestamp: Int64;
	message: string;

	constructor(args?: {
		requestId: string;
		state: BuddyResultState;
		messageId: string;
		eventNo: number;
		receiverCount: Int64;
		successCount: Int64;
		failCount: Int64;
		cancelCount: Int64;
		blockCount: Int64;
		unregisterCount: Int64;
		timestamp: Int64;
		message: string;
	});
}

export declare class SetBuddyOnAirResult {
	requestId: string;
	state: BuddyResultState;
	eventNo: number;
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	cancelCount: Int64;
	unregisterCount: Int64;
	timestamp: Int64;
	message: string;

	constructor(args?: {
		requestId: string;
		state: BuddyResultState;
		eventNo: number;
		receiverCount: Int64;
		successCount: Int64;
		failCount: Int64;
		cancelCount: Int64;
		unregisterCount: Int64;
		timestamp: Int64;
		message: string;
	});
}

export declare class SimpleChannelClient {
	applicationType: string;
	applicationVersion: string;
	locale: string;

	constructor(args?: {
		applicationType: string;
		applicationVersion: string;
		locale: string;
	});
}

export declare class SimpleChannelContact {
	mid: string;
	displayName: string;
	pictureStatus: string;
	picturePath: string;
	statusMessage: string;

	constructor(args?: {
		mid: string;
		displayName: string;
		pictureStatus: string;
		picturePath: string;
		statusMessage: string;
	});
}

export declare class SnsFriend {
	snsUserId: string;
	snsUserName: string;
	snsIdType: SnsIdType;

	constructor(args?: {
		snsUserId: string;
		snsUserName: string;
		snsIdType: SnsIdType;
	});
}

export declare class SnsFriendContactRegistration {
	contact: Contact;
	snsIdType: SnsIdType;
	snsUserId: string;

	constructor(args?: {
		contact: Contact;
		snsIdType: SnsIdType;
		snsUserId: string;
	});
}

export declare class SnsFriendModification {
	type: ModificationType;
	snsFriend: SnsFriend;

	constructor(args?: { type: ModificationType; snsFriend: SnsFriend });
}

export declare class SnsFriends {
	snsFriends: SnsFriend[];
	hasMore: boolean;

	constructor(args?: { snsFriends: SnsFriend[]; hasMore: boolean });
}

export declare class SnsIdUserStatus {
	userExisting: boolean;
	phoneNumberRegistered: boolean;
	sameDevice: boolean;

	constructor(args?: {
		userExisting: boolean;
		phoneNumberRegistered: boolean;
		sameDevice: boolean;
	});
}

export declare class SnsProfile {
	snsUserId: string;
	snsUserName: string;
	email: string;
	thumbnailUrl: string;

	constructor(args?: {
		snsUserId: string;
		snsUserName: string;
		email: string;
		thumbnailUrl: string;
	});
}

export declare class SystemConfiguration {
	endpoint: string;
	endpointSsl: string;
	updateUrl: string;
	c2dmAccount: string;
	nniServer: string;

	constructor(args?: {
		endpoint: string;
		endpointSsl: string;
		updateUrl: string;
		c2dmAccount: string;
		nniServer: string;
	});
}

export declare class TMessageBox {
	id: string;
	channelId: string;
	lastSeq: Int64;
	unreadCount: Int64;
	lastModifiedTime: Int64;
	status: number;
	midType: MIDType;
	lastMessages: Message[];

	constructor(args?: {
		id: string;
		channelId: string;
		lastSeq: Int64;
		unreadCount: Int64;
		lastModifiedTime: Int64;
		status: number;
		midType: MIDType;
		lastMessages: Message[];
	});
}

export declare class TMessageBoxWrapUp {
	messageBox: TMessageBox;
	name: string;
	contacts: Contact[];
	pictureRevision: string;

	constructor(args?: {
		messageBox: TMessageBox;
		name: string;
		contacts: Contact[];
		pictureRevision: string;
	});
}

export declare class TMessageBoxWrapUpResponse {
	messageBoxWrapUpList: TMessageBoxWrapUp[];
	totalSize: number;

	constructor(args?: {
		messageBoxWrapUpList: TMessageBoxWrapUp[];
		totalSize: number;
	});
}

export declare class SyncRelations {
	syncAll: boolean;
	syncParamContact: SyncParamContact[];
	syncParamMid: SyncParamMid[];

	constructor(args?: {
		syncAll: boolean;
		syncParamContact: SyncParamContact[];
		syncParamMid: SyncParamMid[];
	});
}

export declare class SyncScope {
	syncProfile: boolean;
	syncSettings: boolean;
	syncSticker: boolean;
	syncThemeShop: boolean;
	contact: SyncRelations;
	group: SyncRelations;
	room: SyncRelations;
	chat: SyncRelations;

	constructor(args?: {
		syncProfile: boolean;
		syncSettings: boolean;
		syncSticker: boolean;
		syncThemeShop: boolean;
		contact: SyncRelations;
		group: SyncRelations;
		room: SyncRelations;
		chat: SyncRelations;
	});
}

export declare class JoinSquareResponse {
	square: Square;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareMember: SquareMember;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;

	constructor(args?: {
		square: Square;
		squareAuthority: SquareAuthority;
		squareStatus: SquareStatus;
		squareMember: SquareMember;
		squareFeatureSet: SquareFeatureSet;
		noteStatus: NoteStatus;
	});
}

export declare class JoinSquareRequest {
	squareMid: string;
	member: SquareMember;

	constructor(args?: { squareMid: string; member: SquareMember });
}

export declare class JoinSquareChatResponse {
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;

	constructor(args?: {
		squareChat: SquareChat;
		squareChatStatus: SquareChatStatus;
		squareChatMember: SquareChatMember;
	});
}

export declare class JoinSquareChatRequest {
	squareChatMid: string;

	constructor(args?: { squareChatMid: string });
}

export declare class SendMessageRequest {
	reqSeq: number;
	squareChatMid: string;
	squareMessage: SquareMessage;

	constructor(args?: {
		reqSeq: number;
		squareChatMid: string;
		squareMessage: SquareMessage;
	});
}

export declare class MarkAsReadRequest {
	squareChatMid: string;
	messageId: string;

	constructor(args?: { squareChatMid: string; messageId: string });
}

export declare class ApproveSquareMembersResponse {
	approvedMembers: SquareMember[];
	status: SquareStatus;

	constructor(args?: { approvedMembers: SquareMember[]; status: SquareStatus });
}

export declare class ApproveSquareMembersRequest {
	squareMid: string;
	requestedMemberMids: string[];

	constructor(args?: { squareMid: string; requestedMemberMids: string[] });
}

export declare class CreateSquareChatResponse {
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;

	constructor(args?: {
		squareChat: SquareChat;
		squareChatStatus: SquareChatStatus;
		squareChatMember: SquareChatMember;
	});
}

export declare class CreateSquareChatRequest {
	reqSeq: number;
	squareChat: SquareChat;
	squareMemberMids: string[];

	constructor(args?: {
		reqSeq: number;
		squareChat: SquareChat;
		squareMemberMids: string[];
	});
}

export declare class CreateSquareRequest {
	reqSeq: number;
	square: Square;
	creator: SquareMember;

	constructor(args?: { reqSeq: number; square: Square; creator: SquareMember });
}

export declare class DeleteSquareResponse {}

export declare class DeleteSquareRequest {
	mid: string;
	revision: Int64;

	constructor(args?: { mid: string; revision: Int64 });
}

export declare class DestroyMessageResponse {}

export declare class DestroyMessageRequest {
	squareChatMid: string;
	messageId: string;

	constructor(args?: { squareChatMid: string; messageId: string });
}

export declare class GetSquareChatMembersRequest {
	squareChatMid: string;
	continuationToken: string;
	limit: number;

	constructor(args?: {
		squareChatMid: string;
		continuationToken: string;
		limit: number;
	});
}

export declare class GetSquareChatMembersResponse {
	squareChatMembers: SquareMember;
	continuationToken: string;

	constructor(args?: {
		squareChatMembers: SquareMember;
		continuationToken: string;
	});
}

export declare class GetSquareChatStatusRequest {
	squareChatMid: string;

	constructor(args?: { squareChatMid: string });
}

export declare class GetSquareChatStatusResponse {
	chatStatus: SquareChatStatus;

	constructor(args?: { chatStatus: SquareChatStatus });
}

export declare class GetSquareChatRequest {
	squareChatMid: string;

	constructor(args?: { squareChatMid: string });
}

export declare class GetSquareChatResponse {
	squareChat: SquareChat;
	squareChatMember: SquareChatMember;
	squareChatStatus: SquareChatStatus;

	constructor(args?: {
		squareChat: SquareChat;
		squareChatMember: SquareChatMember;
		squareChatStatus: SquareChatStatus;
	});
}

export declare class GetSquareAuthorityRequest {
	squareMid: string;

	constructor(args?: { squareMid: string });
}

export declare class GetSquareAuthorityResponse {
	authority: SquareAuthority;

	constructor(args?: { authority: SquareAuthority });
}

export declare class GetJoinedSquaresRequest {
	continuationToken: string;
	limit: number;

	constructor(args?: { continuationToken: string; limit: number });
}

export declare class GetJoinableSquareChatsRequest {
	squareMid: string;
	continuationToken: string;
	limit: number;

	constructor(args?: {
		squareMid: string;
		continuationToken: string;
		limit: number;
	});
}

export declare class GetInvitationTicketUrlRequest {
	mid: string;

	constructor(args?: { mid: string });
}

export declare class GetInvitationTicketUrlResponse {
	invitationURL: string;

	constructor(args?: { invitationURL: string });
}

export declare class LeaveSquareRequest {
	squareMid: string;

	constructor(args?: { squareMid: string });
}

export declare class LeaveSquareResponse {}

export declare class LeaveSquareChatRequest {
	squareChatMid: string;
	sayGoodbye: boolean;
	squareChatMemberRevision: Int64;

	constructor(args?: {
		squareChatMid: string;
		sayGoodbye: boolean;
		squareChatMemberRevision: Int64;
	});
}

export declare class LeaveSquareChatResponse {}

export declare class SquareMemberSearchOption {
	membershipState: SquareMembershipState;
	memberRoles: SquareMemberRole[];
	displayName: string;
	ableToReceiveMessage: BooleanState;
	ableToReceiveFriendRequest: BooleanState;
	chatMidToExcludeMembers: string;
	includingMe: boolean;

	constructor(args?: {
		membershipState: SquareMembershipState;
		memberRoles: SquareMemberRole[];
		displayName: string;
		ableToReceiveMessage: BooleanState;
		ableToReceiveFriendRequest: BooleanState;
		chatMidToExcludeMembers: string;
		includingMe: boolean;
	});
}

export declare class SearchSquareMembersRequest {
	squareMid: string;
	searchOption: SquareMemberSearchOption;
	continuationToken: string;
	limit: number;

	constructor(args?: {
		squareMid: string;
		searchOption: SquareMemberSearchOption;
		continuationToken: string;
		limit: number;
	});
}

export declare class SearchSquareMembersResponse {
	members: SquareMember[];
	revision: Int64;
	continuationToken: string;
	totalCount: number;

	constructor(args?: {
		members: SquareMember[];
		revision: Int64;
		continuationToken: string;
		totalCount: number;
	});
}

export declare class FindSquareByInvitationTicketRequest {
	invitationTicket: string;

	constructor(args?: { invitationTicket: string });
}

export declare class FetchMyEventsRequest {
	subscriptionId: Int64;
	syncToken: string;
	limit: number;
	continuationToken: string;

	constructor(args?: {
		subscriptionId: Int64;
		syncToken: string;
		limit: number;
		continuationToken: string;
	});
}

export declare class FetchSquareChatEventsRequest {
	subscriptionId: Int64;
	squareChatMid: string;
	syncToken: string;
	limit: number;
	direction: FetchDirection;

	constructor(args?: {
		subscriptionId: Int64;
		squareChatMid: string;
		syncToken: string;
		limit: number;
		direction: FetchDirection;
	});
}

export declare class InviteToSquareRequest {
	squareMid: string;
	invitees: string[];
	squareChatMid: string;

	constructor(args?: {
		squareMid: string;
		invitees: string[];
		squareChatMid: string;
	});
}

export declare class InviteToSquareChatRequest {
	inviteeMids: string[];
	squareChatMid: string;

	constructor(args?: { inviteeMids: string[]; squareChatMid: string });
}

export declare class InviteToSquareChatResponse {
	inviteeMids: string[];

	constructor(args?: { inviteeMids: string[] });
}

export declare class GetSquareMemberRequest {
	squareMemberMid: string;

	constructor(args?: { squareMemberMid: string });
}

export declare class GetSquareMemberResponse {
	squareMember: SquareMember;
	relation: SquareMemberRelation;
	oneOnOneChatMid: string;

	constructor(args?: {
		squareMember: SquareMember;
		relation: SquareMemberRelation;
		oneOnOneChatMid: string;
	});
}

export declare class GetSquareMembersRequest {
	mids: string[];

	constructor(args?: { mids: string[] });
}

export declare class GetSquareMembersResponse {
	members: SquareMember;

	constructor(args?: { members: SquareMember });
}

export declare class GetSquareMemberRelationsRequest {
	state: SquareMemberRelationState;
	continuationToken: string;
	limit: number;

	constructor(args?: {
		state: SquareMemberRelationState;
		continuationToken: string;
		limit: number;
	});
}

export declare class GetSquareMemberRelationsResponse {
	squareMembers: SquareMember[];
	relations: { [k: string]: SquareMemberRelation };
	continuationToken: string;

	constructor(args?: {
		squareMembers: SquareMember[];
		relations: { [k: string]: SquareMemberRelation };
		continuationToken: string;
	});
}

export declare class GetSquareMemberRelationRequest {
	squareMid: string;
	targetSquareMemberMid: string;

	constructor(args?: { squareMid: string; targetSquareMemberMid: string });
}

export declare class GetSquareMemberRelationResponse {
	squareMid: string;
	targetSquareMemberMid: string;
	relation: SquareMemberRelation;

	constructor(args?: {
		squareMid: string;
		targetSquareMemberMid: string;
		relation: SquareMemberRelation;
	});
}

export declare class GetSquareCategoriesRequest {}

export declare class GetSquareCategoriesResponse {
	categoryList: Category[];

	constructor(args?: { categoryList: Category[] });
}

export declare class UpdateSquareRequest {
	updatedAttrs: SquareAttribute[];
	square: Square;

	constructor(args?: { updatedAttrs: SquareAttribute[]; square: Square });
}

export declare class UpdateSquareResponse {
	updatedAttrs: SquareAttribute[];
	square: Square;

	constructor(args?: { updatedAttrs: SquareAttribute[]; square: Square });
}

export declare class SearchSquaresRequest {
	query: string;
	continuationToken: string;
	limit: number;

	constructor(args?: {
		query: string;
		continuationToken: string;
		limit: number;
	});
}

export declare class SearchSquaresResponse {
	squares: Square[];
	squareStatuses: { [k: string]: SquareStatus };
	myMemberships: { [k: string]: SquareMember };
	continuationToken: string;
	noteStatuses: { [k: string]: NoteStatus };

	constructor(args?: {
		squares: Square[];
		squareStatuses: { [k: string]: SquareStatus };
		myMemberships: { [k: string]: SquareMember };
		continuationToken: string;
		noteStatuses: { [k: string]: NoteStatus };
	});
}

export declare class GetSquareFeatureSetRequest {
	squareMid: string;

	constructor(args?: { squareMid: string });
}

export declare class UpdateSquareFeatureSetRequest {
	updateAttributes: SquareFeatureSetAttribute[];
	squareFeatureSet: SquareFeatureSet;

	constructor(args?: {
		updateAttributes: SquareFeatureSetAttribute[];
		squareFeatureSet: SquareFeatureSet;
	});
}

export declare class UpdateSquareFeatureSetResponse {
	updateAttributes: SquareFeatureSetAttribute[];
	squareFeatureSet: SquareFeatureSet;

	constructor(args?: {
		updateAttributes: SquareFeatureSetAttribute[];
		squareFeatureSet: SquareFeatureSet;
	});
}

export declare class UpdateSquareMemberRequest {
	updatedAttrs: SquareMemberAttribute[];
	updatedPreferenceAttrs: SquarePreferenceAttribute[];
	squareMember: SquareMember;

	constructor(args?: {
		updatedAttrs: SquareMemberAttribute[];
		updatedPreferenceAttrs: SquarePreferenceAttribute[];
		squareMember: SquareMember;
	});
}

export declare class UpdateSquareMemberResponse {
	updatedAttrs: SquareMemberAttribute[];
	squareMember: SquareMember;
	updatedPreferenceAttrs: SquarePreferenceAttribute[];

	constructor(args?: {
		updatedAttrs: SquareMemberAttribute[];
		squareMember: SquareMember;
		updatedPreferenceAttrs: SquarePreferenceAttribute[];
	});
}

export declare class UpdateSquareMembersRequest {
	updatedAttrs: SquareMemberAttribute[];
	members: SquareMember[];

	constructor(args?: {
		updatedAttrs: SquareMemberAttribute[];
		members: SquareMember[];
	});
}

export declare class UpdateSquareMembersResponse {
	updatedAttrs: SquareMemberAttribute[];
	editor: SquareMember;
	members: { [k: string]: SquareMember };

	constructor(args?: {
		updatedAttrs: SquareMemberAttribute[];
		editor: SquareMember;
		members: { [k: string]: SquareMember };
	});
}

export declare class RejectSquareMembersRequest {
	squareMid: string;
	requestedMemberMids: string[];

	constructor(args?: { squareMid: string; requestedMemberMids: string[] });
}

export declare class RejectSquareMembersResponse {
	rejectedMembers: SquareMember[];
	status: SquareStatus;

	constructor(args?: { rejectedMembers: SquareMember[]; status: SquareStatus });
}

export declare class RemoveSubscriptionsRequest {
	unsubscriptions: Int64[];

	constructor(args?: { unsubscriptions: Int64[] });
}

export declare class RemoveSubscriptionsResponse {}

export declare class RefreshSubscriptionsRequest {
	subscriptions: Int64[];

	constructor(args?: { subscriptions: Int64[] });
}

export declare class RefreshSubscriptionsResponse {
	ttlMillis: Int64;
	subscriptionStates: any;

	constructor(args?: { ttlMillis: Int64; subscriptionStates: any });
}

export declare class UpdateSquareChatRequest {
	updatedAttrs: SquareChatAttribute[];
	squareChat: SquareChat;

	constructor(args?: {
		updatedAttrs: SquareChatAttribute[];
		squareChat: SquareChat;
	});
}

export declare class UpdateSquareChatResponse {
	updatedAttrs: SquareChatAttribute[];
	squareChat: SquareChat;

	constructor(args?: {
		updatedAttrs: SquareChatAttribute[];
		squareChat: SquareChat;
	});
}

export declare class DeleteSquareChatRequest {
	squareChatMid: string;
	revision: Int64;

	constructor(args?: { squareChatMid: string; revision: Int64 });
}

export declare class DeleteSquareChatResponse {}

export declare class UpdateSquareChatMemberRequest {
	updatedAttrs: SquareChatMemberAttribute[];
	chatMember: SquareChatMember;

	constructor(args?: {
		updatedAttrs: SquareChatMemberAttribute[];
		chatMember: SquareChatMember;
	});
}

export declare class UpdateSquareChatMemberResponse {
	updatedChatMember: SquareChatMember;

	constructor(args?: { updatedChatMember: SquareChatMember });
}

export declare class UpdateSquareAuthorityRequest {
	updateAttributes: SquareAuthorityAttribute[];
	authority: SquareAuthority;

	constructor(args?: {
		updateAttributes: SquareAuthorityAttribute[];
		authority: SquareAuthority;
	});
}

export declare class UpdateSquareAuthorityResponse {
	updatdAttributes: SquareAuthorityAttribute[];
	authority: SquareAuthority;

	constructor(args?: {
		updatdAttributes: SquareAuthorityAttribute[];
		authority: SquareAuthority;
	});
}

export declare class UpdateSquareMemberRelationRequest {
	squareMid: string;
	targetSquareMemberMid: string;
	updatedAttrs: SquareMemberRelationAttribute[];
	relation: SquareMemberRelation;

	constructor(args?: {
		squareMid: string;
		targetSquareMemberMid: string;
		updatedAttrs: SquareMemberRelationAttribute[];
		relation: SquareMemberRelation;
	});
}

export declare class UpdateSquareMemberRelationResponse {
	squareMid: string;
	targetSquareMemberMid: string;
	updatedAttrs: SquareMemberRelationAttribute[];
	relation: SquareMemberRelation;

	constructor(args?: {
		squareMid: string;
		targetSquareMemberMid: string;
		updatedAttrs: SquareMemberRelationAttribute[];
		relation: SquareMemberRelation;
	});
}

export declare class ReportSquareRequest {
	squareMid: string;
	reportType: ReportType;
	otherReason: string;

	constructor(args?: {
		squareMid: string;
		reportType: ReportType;
		otherReason: string;
	});
}

export declare class ReportSquareResponse {}

export declare class ReportSquareChatRequest {
	squareMid: string;
	squareChatMid: string;
	reportType: ReportType;
	otherReason: string;

	constructor(args?: {
		squareMid: string;
		squareChatMid: string;
		reportType: ReportType;
		otherReason: string;
	});
}

export declare class ReportSquareChatResponse {}

export declare class ReportSquareMessageRequest {
	squareMid: string;
	squareChatMid: string;
	squareMessageId: string;
	reportType: ReportType;
	otherReason: string;

	constructor(args?: {
		squareMid: string;
		squareChatMid: string;
		squareMessageId: string;
		reportType: ReportType;
		otherReason: string;
	});
}

export declare class ReportSquareMessageResponse {}

export declare class ReportSquareMemberRequest {
	squareMemberMid: string;
	reportType: ReportType;
	otherReason: string;
	squareChatMid: string;

	constructor(args?: {
		squareMemberMid: string;
		reportType: ReportType;
		otherReason: string;
		squareChatMid: string;
	});
}

export declare class ReportSquareMemberResponse {}

export declare class GetSquareRequest {
	mid: string;

	constructor(args?: { mid: string });
}

export declare class GetSquareStatusRequest {
	squareMid: string;

	constructor(args?: { squareMid: string });
}

export declare class GetSquareStatusResponse {
	squareStatus: SquareStatus;

	constructor(args?: { squareStatus: SquareStatus });
}

export declare class GetNoteStatusRequest {
	squareMid: string;

	constructor(args?: { squareMid: string });
}

export declare class GetNoteStatusResponse {
	squareMid: string;
	status: NoteStatus;

	constructor(args?: { squareMid: string; status: NoteStatus });
}

export declare class CreateSquareChatAnnouncementRequest {
	reqSeq: number;
	squareChatMid: string;
	squareChatAnnouncement: SquareChatAnnouncement;

	constructor(args?: {
		reqSeq: number;
		squareChatMid: string;
		squareChatAnnouncement: SquareChatAnnouncement;
	});
}

export declare class CreateSquareChatAnnouncementResponse {
	announcement: SquareChatAnnouncement;

	constructor(args?: { announcement: SquareChatAnnouncement });
}

export declare class DeleteSquareChatAnnouncementRequest {
	squareChatMid: string;
	announcementSeq: Int64;

	constructor(args?: { squareChatMid: string; announcementSeq: Int64 });
}

export declare class DeleteSquareChatAnnouncementResponse {}

export declare class GetSquareChatAnnouncementsRequest {
	squareChatMid: string;

	constructor(args?: { squareChatMid: string });
}

export declare class GetJoinedSquareChatsRequest {
	continuationToken: string;
	limit: number;

	constructor(args?: { continuationToken: string; limit: number });
}

export declare class GetJoinedSquareChatsResponse {
	chats: SquareChat[];
	chatMembers: { [k: string]: SquareChatMember };
	statuses: { [k: string]: SquareChatStatus };
	continuationToken: string;

	constructor(args?: {
		chats: SquareChat[];
		chatMembers: { [k: string]: SquareChatMember };
		statuses: { [k: string]: SquareChatStatus };
		continuationToken: string;
	});
}

export declare class UserAuthStatus {
	phoneNumberRegistered: boolean;
	registeredSnsIdTypes: SnsIdType[];

	constructor(args?: {
		phoneNumberRegistered: boolean;
		registeredSnsIdTypes: SnsIdType[];
	});
}

export declare class WapInvitation {
	type: WapInvitationType;
	inviteeEmail: string;
	inviterMid: string;
	roomMid: string;

	constructor(args?: {
		type: WapInvitationType;
		inviteeEmail: string;
		inviterMid: string;
		roomMid: string;
	});
}

export declare class GroupCallRoute {
	token: string;
	cscf: CallHost;
	mix: CallHost;

	constructor(args?: { token: string; cscf: CallHost; mix: CallHost });
}
