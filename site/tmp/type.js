//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";
window.lineType = {};
lineType.ApplicationType = { 'IOS': 16, 'IOS_RC': 17, 'IOS_BETA': 18, 'IOS_ALPHA': 19, 'ANDROID': 32, 'ANDROID_RC': 33, 'ANDROID_BETA': 34, 'ANDROID_ALPHA': 35, 'WAP': 48, 'WAP_RC': 49, 'WAP_BETA': 50, 'WAP_ALPHA': 51, 'BOT': 64, 'BOT_RC': 65, 'BOT_BETA': 66, 'BOT_ALPHA': 67, 'WEB': 80, 'WEB_RC': 81, 'WEB_BETA': 82, 'WEB_ALPHA': 83, 'DESKTOPWIN': 96, 'DESKTOPWIN_RC': 97, 'DESKTOPWIN_BETA': 98, 'DESKTOPWIN_ALPHA': 99, 'DESKTOPMAC': 112, 'DESKTOPMAC_RC': 113, 'DESKTOPMAC_BETA': 114, 'DESKTOPMAC_ALPHA': 115, 'CHANNELGW': 128, 'CHANNELGW_RC': 129, 'CHANNELGW_BETA': 130, 'CHANNELGW_ALPHA': 131, 'CHANNELCP': 144, 'CHANNELCP_RC': 145, 'CHANNELCP_BETA': 146, 'CHANNELCP_ALPHA': 147, 'WINPHONE': 160, 'WINPHONE_RC': 161, 'WINPHONE_BETA': 162, 'WINPHONE_ALPHA': 163, 'BLACKBERRY': 176, 'BLACKBERRY_RC': 177, 'BLACKBERRY_BETA': 178, 'BLACKBERRY_ALPHA': 179, 'WINMETRO': 192, 'WINMETRO_RC': 193, 'WINMETRO_BETA': 194, 'WINMETRO_ALPHA': 195, 'S40': 208, 'S40_RC': 209, 'S40_BETA': 210, 'S40_ALPHA': 211, 'CHRONO': 224, 'CHRONO_RC': 225, 'CHRONO_BETA': 226, 'CHRONO_ALPHA': 227, 'TIZEN': 256, 'TIZEN_RC': 257, 'TIZEN_BETA': 258, 'TIZEN_ALPHA': 259, 'VIRTUAL': 272, 'FIREFOXOS': 288, 'FIREFOXOS_RC': 289, 'FIREFOXOS_BETA': 290, 'FIREFOXOS_ALPHA': 291, 'IOSIPAD': 304, 'IOSIPAD_RC': 305, 'IOSIPAD_BETA': 306, 'IOSIPAD_ALPHA': 307, 'BIZIOS': 320, 'BIZIOS_RC': 321, 'BIZIOS_BETA': 322, 'BIZIOS_ALPHA': 323, 'BIZANDROID': 336, 'BIZANDROID_RC': 337, 'BIZANDROID_BETA': 338, 'BIZANDROID_ALPHA': 339, 'BIZBOT': 352, 'BIZBOT_RC': 353, 'BIZBOT_BETA': 354, 'BIZBOT_ALPHA': 355, 'CHROMEOS': 368, 'CHROMEOS_RC': 369, 'CHROMEOS_BETA': 370, 'CHROMEOS_ALPHA': 371, 'ANDROIDLITE': 384, 'ANDROIDLITE_RC': 385, 'ANDROIDLITE_BETA': 386, 'ANDROIDLITE_ALPHA': 387, 'WIN10': 400, 'WIN10_RC': 401, 'WIN10_BETA': 402, 'WIN10_ALPHA': 403, 'BIZWEB': 416, 'BIZWEB_RC': 417, 'BIZWEB_BETA': 418, 'BIZWEB_ALPHA': 419, 'DUMMYPRIMARY': 432, 'DUMMYPRIMARY_RC': 433, 'DUMMYPRIMARY_BETA': 434, 'DUMMYPRIMARY_ALPHA': 435, 'SQUARE': 448, 'SQUARE_RC': 449, 'SQUARE_BETA': 450, 'SQUARE_ALPHA': 451, 'INTERNAL': 464, 'INTERNAL_RC': 465, 'INTERNAL_BETA': 466, 'INTERNAL_ALPHA': 467, 'CLOVAFRIENDS': 480, 'CLOVAFRIENDS_RC': 481, 'CLOVAFRIENDS_BETA': 482, 'CLOVAFRIENDS_ALPHA': 483 };
lineType.ExtendedProfileAttribute = {};
lineType.PrivacyLevelType = { 'PUBLIC': 0, 'PRIVATE': 1 };
lineType.PaidCallerIdStatus = { 'NOT_SPECIFIED': 0, 'VALID': 1, 'VERIFICATION_REQUIRED': 2, 'NOT_PERMITTED': 3, 'LIMIT_EXCEEDED': 4, 'LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED': 5 };
lineType.PaidCallProductType = { 'COIN': 0, 'CREDIT': 1, 'MONTHLY': 2 };
lineType.PaidCallType = { 'OUT': 0, 'IN': 1, 'TOLLFREE': 2, 'RECORD': 3, 'AD': 4, 'CS': 5 };
lineType.BotType = { 'RESERVED': 0, 'OFFICIAL': 1, 'LINE_AT_0': 2, 'LINE_AT': 3 };
lineType.BuddyOnAirLabel = { 'ON_AIR': 0, 'LIVE': 1 };
lineType.BuddyBannerLinkType = { 'BUDDY_BANNER_LINK_HIDDEN': 0, 'BUDDY_BANNER_LINK_MID': 1, 'BUDDY_BANNER_LINK_URL': 2 };
lineType.BuddyOnAirType = { 'NORMAL': 0, 'LIVE': 1, 'VOIP': 2 };
lineType.Diff = { 'ADDED': 0, 'UPDATED': 1, 'REMOVED': 2 };
lineType.ReportType = { 'ADVERTISING': 1, 'GENDER_HARASSMENT': 2, 'HARASSMENT': 3, 'OTHER': 4 };
lineType.SyncTriggerReason = { 'OTHER': 0, 'REVISION_GAP_TOO_LARGE': 1, 'OPERATION_EXPIRED': 2 };
lineType.ReportCategory = { 'PUSH_NORMAL_PLAIN': 0, 'PUSH_NORMAL_E2EE': 1, 'PUSH_VOIP_PLAIN': 2, 'PUSH_VOIP_E2EE': 3 };
lineType.BuddyResultState = { 'ACCEPTED': 1, 'SUCCEEDED': 2, 'FAILED': 3, 'CANCELLED': 4, 'NOTIFY_FAILED': 5, 'STORING': 11, 'UPLOADING': 21, 'NOTIFYING': 31, 'REMOVING_SUBSCRIPTION': 41, 'UNREGISTERING_ACCOUNT': 42, 'NOTIFYING_LEAVE_CHAT': 43 };
lineType.BuddySearchRequestSource = { 'NA': 0, 'FRIEND_VIEW': 1, 'OFFICIAL_ACCOUNT_VIEW': 2 };
lineType.CarrierCode = { 'NOT_SPECIFIED': 0, 'JP_DOCOMO': 1, 'JP_AU': 2, 'JP_SOFTBANK': 3, 'JP_DOCOMO_LINE': 4, 'KR_SKT': 17, 'KR_KT': 18, 'KR_LGT': 19 };
lineType.ChannelConfiguration = { 'MESSAGE': 0, 'MESSAGE_NOTIFICATION': 1, 'NOTIFICATION_CENTER': 2 };
lineType.ChannelPermission = { 'PROFILE': 0, 'FRIENDS': 1, 'GROUP': 2 };
lineType.ChannelFeatureLicense = { 'BLE_LCS_API_USABLE': 26, 'PROHIBIT_MINIMIZE_CHANNEL_BROWSER': 27, 'ALLOW_IOS_WEBKIT': 28 };
lineType.ChannelErrorCode = { 'ILLEGAL_ARGUMENT': 0, 'INTERNAL_ERROR': 1, 'CONNECTION_ERROR': 2, 'AUTHENTICATIONI_FAILED': 3, 'NEED_PERMISSION_APPROVAL': 4, 'COIN_NOT_USABLE': 5, 'WEBVIEW_NOT_ALLOWED': 6 };
lineType.ChannelSyncType = { 'SYNC': 0, 'REMOVE': 1, 'REMOVE_ALL': 2 };
lineType.LoginType = { 'ID_CREDENTIAL': 0, 'QRCODE': 1, 'ID_CREDENTIAL_WITH_E2EE': 2 };
lineType.ContactAttribute = { 'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL': 1, 'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL': 2, 'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME': 16, 'CONTACT_ATTRIBUTE_CAPABLE_BUDDY': 32 };
lineType.ContactCategory = { 'NORMAL': 0, 'RECOMMEND': 1 };
lineType.ContactRelation = { 'ONEWAY': 0, 'BOTH': 1, 'NOT_REGISTERED': 2 };
lineType.AsymmetricKeyAlgorithm = { 'ASYMMETRIC_KEY_ALGORITHM_RSA': 1, 'ASYMMETRIC_KEY_ALGORITHM_ECDH': 2 };
lineType.ContactSetting = { 'CONTACT_SETTING_NOTIFICATION_DISABLE': 1, 'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE': 2, 'CONTACT_SETTING_CONTACT_HIDE': 4, 'CONTACT_SETTING_FAVORITE': 8, 'CONTACT_SETTING_DELETE': 16 };
lineType.ContactStatus = { 'UNSPECIFIED': 0, 'FRIEND': 1, 'FRIEND_BLOCKED': 2, 'RECOMMEND': 3, 'RECOMMEND_BLOCKED': 4, 'DELETED': 5, 'DELETED_BLOCKED': 6 };
lineType.ContactType = { 'MID': 0, 'PHONE': 1, 'EMAIL': 2, 'USERID': 3, 'PROXIMITY': 4, 'GROUP': 5, 'USER': 6, 'QRCODE': 7, 'PROMOTION_BOT': 8, 'CONTACT_MESSAGE': 9, 'FRIEND_REQUEST': 10, 'REPAIR': 128, 'FACEBOOK': 2305, 'SINA': 2306, 'RENREN': 2307, 'FEIXIN': 2308, 'BBM': 2309, 'BEACON': 11 };
lineType.GroupPreferenceAttribute = { 'INVITATION_TICKET': 1, 'FAVORITE_TIMESTAMP': 2 };
lineType.ContentType = { 'NONE': 0, 'IMAGE': 1, 'VIDEO': 2, 'AUDIO': 3, 'HTML': 4, 'PDF': 5, 'CALL': 6, 'STICKER': 7, 'PRESENCE': 8, 'GIFT': 9, 'GROUPBOARD': 10, 'APPLINK': 11, 'LINK': 12, 'CONTACT': 13, 'FILE': 14, 'LOCATION': 15, 'POSTNOTIFICATION': 16, 'RICH': 17, 'CHATEVENT': 18, 'MUSIC': 19, 'PAYMENT': 20, 'EXTIMAGE': 21 };
lineType.MessageRelationType = { 'FORWARD': 0, 'AUTO_REPLY': 1, 'SUBORDINATE': 2 };
lineType.CustomMode = { 'PROMOTION_FRIENDS_INVITE': 1, 'CAPABILITY_SERVER_SIDE_SMS': 2, 'LINE_CLIENT_ANALYTICS_CONFIGURATION': 3 };
lineType.RoomAttribute = { 'ALL': 255, 'NOTIFICATION_SETTING': 1 };
lineType.UserStatus = { 'NORMAL': 0, 'UNBOUND': 1, 'UNREGISTERED': 2 };
lineType.EmailConfirmationStatus = { 'NOT_SPECIFIED': 0, 'NOT_YET': 1, 'DONE': 3, 'NEED_ENFORCED_INPUT': 4 };
lineType.AccountMigrationPincodeType = { 'NOT_APPLICABLE': 0, 'NOT_SET': 1, 'SET': 2, 'NEED_ENFORCED_INPUT': 3 };
lineType.AccountMigrationCheckType = { 'SKIP': 0, 'PINCODE': 1, 'SECURITY_CENTER': 2 };
lineType.SecurityCenterSettingsType = { 'NOT_APPLICABLE': 0, 'NOT_SET': 1, 'SET': 2, 'NEED_ENFORCED_INPUT': 3 };
lineType.EmailConfirmationType = { 'SERVER_SIDE_EMAIL': 0, 'CLIENT_SIDE_EMAIL': 1 };
lineType.SquareChatAnnouncementType = { 'TEXT_MESSAGE': 0 };
lineType.SquareChatAttribute = { 'NAME': 2, 'SQUARE_CHAT_IMAGE': 3, 'STATE': 4 };
lineType.SquareMemberAttribute = { 'DISPLAY_NAME': 1, 'PROFILE_IMAGE': 2, 'ABLE_TO_RECEIVE_MESSAGE': 3, 'MEMBERSHIP_STATE': 5, 'ROLE': 6, 'PREFERENCE': 7 };
lineType.SquareMemberRelationAttribute = { 'BLOCKED': 1 };
lineType.SquarePreferenceAttribute = { 'FAVORITE': 1, 'NOTI_FOR_NEW_JOIN_REQUEST': 2 };
lineType.SquareState = { 'ALIVE': 0, 'DELETED': 1, 'SUSPENDED': 2 };
lineType.CommitMessageResultCode = { 'DELIVERED': 0, 'DELIVERY_SKIPPED': 1, 'DELIVERY_RESTRICTED': 2 };
lineType.ErrorCode = { 'ILLEGAL_ARGUMENT': 0, 'AUTHENTICATION_FAILED': 1, 'DB_FAILED': 2, 'INVALID_STATE': 3, 'EXCESSIVE_ACCESS': 4, 'NOT_FOUND': 5, 'INVALID_MID': 9, 'NOT_A_MEMBER': 10, 'INVALID_LENGTH': 6, 'NOT_AVAILABLE_USER': 7, 'NOT_AUTHORIZED_DEVICE': 8, 'NOT_AUTHORIZED_SESSION': 14, 'INCOMPATIBLE_APP_VERSION': 11, 'NOT_READY': 12, 'NOT_AVAILABLE_SESSION': 13, 'SYSTEM_ERROR': 15, 'NO_AVAILABLE_VERIFICATION_METHOD': 16, 'NOT_AUTHENTICATED': 17, 'INVALID_IDENTITY_CREDENTIAL': 18, 'NOT_AVAILABLE_IDENTITY_IDENTIFIER': 19, 'INTERNAL_ERROR': 20, 'NO_SUCH_IDENTITY_IDENFIER': 21, 'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY': 22, 'ILLEGAL_IDENTITY_CREDENTIAL': 23, 'UNKNOWN_CHANNEL': 24, 'NO_SUCH_MESSAGE_BOX': 25, 'NOT_AVAILABLE_MESSAGE_BOX': 26, 'CHANNEL_DOES_NOT_MATCH': 27, 'NOT_YOUR_MESSAGE': 28, 'MESSAGE_DEFINED_ERROR': 29, 'USER_CANNOT_ACCEPT_PRESENTS': 30, 'USER_NOT_STICKER_OWNER': 32, 'MAINTENANCE_ERROR': 33, 'ACCOUNT_NOT_MATCHED': 34, 'ABUSE_BLOCK': 35, 'NOT_FRIEND': 36, 'NOT_ALLOWED_CALL': 37, 'BLOCK_FRIEND': 38, 'INCOMPATIBLE_VOIP_VERSION': 39, 'INVALID_SNS_ACCESS_TOKEN': 40, 'EXTERNAL_SERVICE_NOT_AVAILABLE': 41, 'NOT_ALLOWED_ADD_CONTACT': 42, 'NOT_CERTIFICATED': 43, 'NOT_ALLOWED_SECONDARY_DEVICE': 44, 'INVALID_PIN_CODE': 45, 'NOT_FOUND_IDENTITY_CREDENTIAL': 46, 'EXCEED_FILE_MAX_SIZE': 47, 'EXCEED_DAILY_QUOTA': 48, 'NOT_SUPPORT_SEND_FILE': 49, 'MUST_UPGRADE': 50, 'NOT_AVAILABLE_PIN_CODE_SESSION': 51, 'EXPIRED_REVISION': 52, 'NOT_YET_PHONE_NUMBER': 54, 'BAD_CALL_NUMBER': 55, 'UNAVAILABLE_CALL_NUMBER': 56, 'NOT_SUPPORT_CALL_SERVICE': 57, 'CONGESTION_CONTROL': 58, 'NO_BALANCE': 59, 'NOT_PERMITTED_CALLER_ID': 60, 'NO_CALLER_ID_LIMIT_EXCEEDED': 61, 'CALLER_ID_VERIFICATION_REQUIRED': 62, 'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED': 63, 'MESSAGE_NOT_FOUND': 64, 'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT': 65, 'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED': 66, 'ACCOUNT_MIGRATION_PINCODE_BLOCKED': 67, 'INVALID_PASSWORD_FORMAT': 69, 'FEATURE_RESTRICTED': 70, 'MESSAGE_NOT_DESTRUCTIBLE': 71, 'PAID_CALL_REDEEM_FAILED': 72, 'PREVENTED_JOIN_BY_TICKET': 73, 'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT': 75, 'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY': 76, 'SECURITY_CENTER_NOT_VERIFIED': 77, 'SECURITY_CENTER_BLOCKED_BY_SETTING': 78, 'SECURITY_CENTER_BLOCKED': 79, 'TALK_PROXY_EXCEPTION': 80, 'E2EE_INVALID_PROTOCOL': 81, 'E2EE_RETRY_ENCRYPT': 82, 'E2EE_UPDATE_SENDER_KEY': 83, 'E2EE_UPDATE_RECEIVER_KEY': 84, 'E2EE_INVALID_ARGUMENT': 85, 'E2EE_INVALID_VERSION': 86, 'E2EE_SENDER_DISABLED': 87, 'E2EE_RECEIVER_DISABLED': 88, 'E2EE_SENDER_NOT_ALLOWED': 89, 'E2EE_RECEIVER_NOT_ALLOWED': 90, 'E2EE_RESEND_FAIL': 91, 'E2EE_RESEND_OK': 92, 'HITOKOTO_BACKUP_NO_AVAILABLE_DATA': 93, 'E2EE_UPDATE_PRIMARY_DEVICE': 94, 'SUCCESS': 95, 'CANCEL': 96, 'E2EE_PRIMARY_NOT_SUPPORT': 97, 'E2EE_RETRY_PLAIN': 98, 'E2EE_RECREATE_GROUP_KEY': 99, 'E2EE_GROUP_TOO_MANY_MEMBERS': 100, 'SERVER_BUSY': 101, 'NOT_ALLOWED_ADD_FOLLOW': 102, 'INCOMING_FRIEND_REQUEST_LIMIT': 103, 'OUTGOING_FRIEND_REQUEST_LIMIT': 104, 'OUTGOING_FRIEND_REQUEST_QUOTA': 105, 'DUPLICATED': 106, 'BANNED': 107 };
lineType.FeatureType = { 'OBS_VIDEO': 1, 'OBS_GENERAL': 2 };
lineType.GroupAttribute = { 'NAME': 1, 'PICTURE_STATUS': 2, 'ALL': 255, 'PREVENTED_JOIN_BY_TICKET': 4, 'NOTIFICATION_SETTING': 8 };
lineType.IdentityProvider = { 'UNKNOWN': 0, 'LINE': 1, 'NAVER_KR': 2, 'LINE_PHONE': 3 };
lineType.LoginResultType = { 'SUCCESS': 1, 'REQUIRE_QRCODE': 2, 'REQUIRE_DEVICE_CONFIRM': 3, 'REQUIRE_SMS_CONFIRM': 4 };
lineType.MessageOperationType = { 'SEND_MESSAGE': 1, 'RECEIVE_MESSAGE': 2, 'READ_MESSAGE': 3, 'NOTIFIED_READ_MESSAGE': 4, 'NOTIFIED_JOIN_CHAT': 5, 'FAILED_SEND_MESSAGE': 6, 'SEND_CONTENT': 7, 'SEND_CONTENT_RECEIPT': 8, 'SEND_CHAT_REMOVED': 9, 'REMOVE_ALL_MESSAGES': 10 };
lineType.MIDType = { 'USER': 0, 'ROOM': 1, 'GROUP': 2, 'SQUARE': 3, 'SQUARE_CHAT': 4, 'SQUARE_MEMBER': 5, 'BOT': 6 };
lineType.ServiceCode = { 'UNKNOWN': 0, 'TALK': 1, 'SQUARE': 2 };
lineType.FriendRequestDirection = { 'INCOMING': 1, 'OUTGOING': 2 };
lineType.FriendRequestMethod = { 'TIMELINE': 1, 'NEARBY': 2, 'SQUARE': 3 };
lineType.FriendRequestStatus = { 'NONE': 0, 'AVAILABLE': 1, 'ALREADY_REQUESTED': 2, 'UNAVAILABLE': 3 };
lineType.ModificationType = { 'ADD': 0, 'REMOVE': 1, 'MODIFY': 2 };
lineType.NotificationItemFetchMode = { 'ALL': 0, 'APPEND': 1 };
lineType.NotificationQueueType = { 'GLOBAL': 1, 'MESSAGE': 2, 'PRIMARY': 3 };
lineType.GroupCallMediaType = { 'AUDIO': 1, 'VIDEO': 2 };
lineType.PersonalInfo = { 'EMAIL': 0, 'PHONE': 1, 'BIRTHDAY': 2, 'RAW_BIRTHDAY': 3 };
lineType.NotificationStatus = { 'NOTIFICATION_ITEM_EXIST': 1, 'TIMELINE_ITEM_EXIST': 2, 'NOTE_GROUP_NEW_ITEM_EXIST': 4, 'TIMELINE_BUDDYGROUP_CHANGED': 8, 'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST': 16, 'ALBUM_ITEM_EXIST': 32, 'TIMELINE_ITEM_DELETED': 64, 'OTOGROUP_ITEM_EXIST': 128, 'GROUPHOME_NEW_ITEM_EXIST': 256, 'GROUPHOME_HIDDEN_ITEM_CHANGED': 512, 'NOTIFICATION_ITEM_CHANGED': 1024, 'BEAD_ITEM_HIDE': 2048, 'BEAD_ITEM_SHOW': 4096 };
lineType.NotificationType = { 'APPLE_APNS': 1, 'GOOGLE_C2DM': 2, 'NHN_NNI': 3, 'SKT_AOM': 4, 'MS_MPNS': 5, 'RIM_BIS': 6, 'GOOGLE_GCM': 7, 'NOKIA_NNAPI': 8, 'TIZEN': 9, 'LINE_BOT': 17, 'LINE_WAP': 18, 'APPLE_APNS_VOIP': 19, 'MS_WNS': 20, 'GOOGLE_FCM': 21 };
lineType.OpStatus = { 'NORMAL': 0, 'ALERT_DISABLED': 1, 'ALWAYS': 2 };
lineType.OpType = { 'END_OF_OPERATION': 0, 'UPDATE_PROFILE': 1, 'UPDATE_SETTINGS': 36, 'NOTIFIED_UPDATE_PROFILE': 2, 'REGISTER_USERID': 3, 'ADD_CONTACT': 4, 'NOTIFIED_ADD_CONTACT': 5, 'BLOCK_CONTACT': 6, 'UNBLOCK_CONTACT': 7, 'NOTIFIED_RECOMMEND_CONTACT': 8, 'CREATE_GROUP': 9, 'UPDATE_GROUP': 10, 'NOTIFIED_UPDATE_GROUP': 11, 'INVITE_INTO_GROUP': 12, 'NOTIFIED_INVITE_INTO_GROUP': 13, 'CANCEL_INVITATION_GROUP': 31, 'NOTIFIED_CANCEL_INVITATION_GROUP': 32, 'LEAVE_GROUP': 14, 'NOTIFIED_LEAVE_GROUP': 15, 'ACCEPT_GROUP_INVITATION': 16, 'NOTIFIED_ACCEPT_GROUP_INVITATION': 17, 'REJECT_GROUP_INVITATION': 34, 'NOTIFIED_REJECT_GROUP_INVITATION': 35, 'KICKOUT_FROM_GROUP': 18, 'NOTIFIED_KICKOUT_FROM_GROUP': 19, 'CREATE_ROOM': 20, 'INVITE_INTO_ROOM': 21, 'NOTIFIED_INVITE_INTO_ROOM': 22, 'LEAVE_ROOM': 23, 'NOTIFIED_LEAVE_ROOM': 24, 'SEND_MESSAGE': 25, 'RECEIVE_MESSAGE': 26, 'SEND_MESSAGE_RECEIPT': 27, 'RECEIVE_MESSAGE_RECEIPT': 28, 'SEND_CONTENT_RECEIPT': 29, 'RECEIVE_ANNOUNCEMENT': 30, 'NOTIFIED_UNREGISTER_USER': 33, 'INVITE_VIA_EMAIL': 38, 'NOTIFIED_REGISTER_USER': 37, 'NOTIFIED_REQUEST_RECOVERY': 39, 'SEND_CHAT_CHECKED': 40, 'SEND_CHAT_REMOVED': 41, 'NOTIFIED_FORCE_SYNC': 42, 'SEND_CONTENT': 43, 'SEND_MESSAGE_MYHOME': 44, 'NOTIFIED_UPDATE_CONTENT_PREVIEW': 45, 'REMOVE_ALL_MESSAGES': 46, 'NOTIFIED_UPDATE_PURCHASES': 47, 'DUMMY': 48, 'UPDATE_CONTACT': 49, 'NOTIFIED_RECEIVED_CALL': 50, 'CANCEL_CALL': 51, 'NOTIFIED_REDIRECT': 52, 'NOTIFIED_CHANNEL_SYNC': 53, 'FAILED_SEND_MESSAGE': 54, 'NOTIFIED_READ_MESSAGE': 55, 'FAILED_EMAIL_CONFIRMATION': 56, 'NOTIFIED_CHAT_CONTENT': 58, 'NOTIFIED_PUSH_NOTICENTER_ITEM': 59, 'NOTIFIED_JOIN_CHAT': 60, 'NOTIFIED_LEAVE_CHAT': 61, 'NOTIFIED_TYPING': 62, 'FRIEND_REQUEST_ACCEPTED': 63, 'DESTROY_MESSAGE': 64, 'NOTIFIED_DESTROY_MESSAGE': 65, 'UPDATE_PUBLICKEYCHAIN': 66, 'NOTIFIED_UPDATE_PUBLICKEYCHAIN': 67, 'NOTIFIED_BLOCK_CONTACT': 68, 'NOTIFIED_UNBLOCK_CONTACT': 69, 'UPDATE_GROUPPREFERENCE': 70, 'NOTIFIED_PAYMENT_EVENT': 71, 'REGISTER_E2EE_PUBLICKEY': 72, 'NOTIFIED_E2EE_KEY_EXCHANGE_REQ': 73, 'NOTIFIED_E2EE_KEY_EXCHANGE_RESP': 74, 'NOTIFIED_E2EE_MESSAGE_RESEND_REQ': 75, 'NOTIFIED_E2EE_MESSAGE_RESEND_RESP': 76, 'NOTIFIED_E2EE_KEY_UPDATE': 77, 'NOTIFIED_BUDDY_UPDATE_PROFILE': 78, 'NOTIFIED_UPDATE_LINEAT_TABS': 79, 'UPDATE_ROOM': 80, 'NOTIFIED_BEACON_DETECTED': 81, 'UPDATE_EXTENDED_PROFILE': 82, 'ADD_FOLLOW': 83, 'NOTIFIED_ADD_FOLLOW': 84, 'DELETE_FOLLOW': 85, 'NOTIFIED_DELETE_FOLLOW': 86, 'UPDATE_TIMELINE_SETTINGS': 87, 'NOTIFIED_FRIEND_REQUEST': 88, 'UPDATE_RINGBACK_TONE': 89, 'NOTIFIED_POSTBACK': 90, 'RECEIVE_READ_WATERMARK': 91, 'NOTIFIED_MESSAGE_DELIVERED': 92, 'NOTIFIED_UPDATE_CHAT_BAR': 93, 'NOTIFIED_CHATAPP_INSTALLED': 94, 'NOTIFIED_CHATAPP_UPDATED': 95, 'NOTIFIED_CHATAPP_NEW_MARK': 96, 'NOTIFIED_CHATAPP_DELETED': 97, 'NOTIFIED_CHATAPP_SYNC': 98, 'NOTIFIED_UPDATE_MESSAGE': 99 };
lineType.PayloadType = { 'PAYLOAD_BUY': 101, 'PAYLOAD_CS': 111, 'PAYLOAD_BONUS': 121, 'PAYLOAD_EVENT': 131 };
lineType.PaymentPgType = { 'PAYMENT_PG_NONE': 0, 'PAYMENT_PG_AU': 1, 'PAYMENT_PG_AL': 2 };
lineType.PaymentType = { 'PAYMENT_APPLE': 1, 'PAYMENT_GOOGLE': 2 };
lineType.ProductBannerLinkType = { 'BANNER_LINK_NONE': 0, 'BANNER_LINK_ITEM': 1, 'BANNER_LINK_URL': 2, 'BANNER_LINK_CATEGORY': 3 };
lineType.ProductEventType = { 'NO_EVENT': 0, 'CARRIER_ANY': 65537, 'BUDDY_ANY': 131073, 'INSTALL_IOS': 196609, 'INSTALL_ANDROID': 196610, 'MISSION_ANY': 262145, 'MUSTBUY_ANY': 327681 };
lineType.StickerResourceType = { 'STATIC': 1, 'ANIMATION': 2, 'SOUND': 3, 'ANIMATION_SOUND': 4, 'POPUP': 5, 'POPUP_SOUND': 6 };
lineType.PlaceSearchProvider = { 'GOOGLE': 0, 'BAIDU': 1 };
lineType.PointErrorCode = { 'REQUEST_DUPLICATION': 3001, 'INVALID_PARAMETER': 3002, 'NOT_ENOUGH_BALANCE': 3003, 'AUTHENTICATION_FAIL': 3004, 'API_ACCESS_FORBIDDEN': 3005, 'MEMBER_ACCOUNT_NOT_FOUND': 3006, 'SERVICE_ACCOUNT_NOT_FOUND': 3007, 'TRANSACTION_NOT_FOUND': 3008, 'ALREADY_REVERSED_TRANSACTION': 3009, 'MESSAGE_NOT_READABLE': 3010, 'HTTP_REQUEST_METHOD_NOT_SUPPORTED': 3011, 'HTTP_MEDIA_TYPE_NOT_SUPPORTED': 3012, 'NOT_ALLOWED_TO_DEPOSIT': 3013, 'NOT_ALLOWED_TO_PAY': 3014, 'TRANSACTION_ACCESS_FORBIDDEN': 3015, 'INVALID_SERVICE_CONFIGURATION': 4001, 'DCS_COMMUNICATION_FAIL': 5004, 'UPDATE_BALANCE_FAIL': 5007, 'SYSTEM_ERROR': 5999, 'SYSTEM_MAINTENANCE': 5888 };
lineType.ProfileAttribute = { 'ALL': 511, 'EMAIL': 1, 'DISPLAY_NAME': 2, 'PHONETIC_NAME': 4, 'PICTURE': 8, 'STATUS_MESSAGE': 16, 'ALLOW_SEARCH_BY_USERID': 32, 'ALLOW_SEARCH_BY_EMAIL': 64, 'BUDDY_STATUS': 128, 'MUSIC_PROFILE': 256 };
lineType.PublicType = { 'HIDDEN': 0, 'PUBLIC': 1000 };
lineType.RedirectType = { 'NONE': 0, 'EXPIRE_SECOND': 1 };
lineType.RegistrationType = { 'PHONE': 0, 'EMAIL_WAP': 1, 'FACEBOOK': 2305, 'SINA': 2306, 'RENREN': 2307, 'FEIXIN': 2308 };
lineType.ChatRoomAnnouncementType = { 'MESSAGE': 0, 'NOTE': 1 };
lineType.SettingsAttribute = { 'ALL': 2147483647, 'NOTIFICATION_ENABLE': 1, 'NOTIFICATION_MUTE_EXPIRATION': 2, 'NOTIFICATION_NEW_MESSAGE': 4, 'NOTIFICATION_GROUP_INVITATION': 8, 'NOTIFICATION_SHOW_MESSAGE': 16, 'NOTIFICATION_INCOMING_CALL': 32, 'NOTIFICATION_SOUND_MESSAGE': 256, 'NOTIFICATION_SOUND_GROUP': 512, 'NOTIFICATION_DISABLED_WITH_SUB': 65536, 'NOTIFICATION_PAYMENT': 131072, 'PRIVACY_SYNC_CONTACTS': 64, 'PRIVACY_SEARCH_BY_PHONE_NUMBER': 128, 'PRIVACY_SEARCH_BY_USERID': 8192, 'PRIVACY_SEARCH_BY_EMAIL': 16384, 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN': 2097152, 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME': 8388608, 'PRIVACY_ALLOW_FRIEND_REQUEST': 1073741824, 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND': 33554432, 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL': 67108864, 'PRIVACY_AGREE_USE_PAIDCALL': 134217728, 'CONTACT_MY_TICKET': 1024, 'IDENTITY_PROVIDER': 2048, 'IDENTITY_IDENTIFIER': 4096, 'SNS_ACCOUNT': 524288, 'PHONE_REGISTRATION': 1048576, 'PREFERENCE_LOCALE': 32768, 'CUSTOM_MODE': 4194304, 'EMAIL_CONFIRMATION_STATUS': 16777216, 'ACCOUNT_MIGRATION_PINCODE': 268435456, 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE': 536870912, 'SECURITY_CENTER_SETTINGS': 262144 };
lineType.SettingsAttributeEx = { 'NOTIFICATION_ENABLE': 0, 'NOTIFICATION_MUTE_EXPIRATION': 1, 'NOTIFICATION_NEW_MESSAGE': 2, 'NOTIFICATION_GROUP_INVITATION': 3, 'NOTIFICATION_SHOW_MESSAGE': 4, 'NOTIFICATION_INCOMING_CALL': 5, 'NOTIFICATION_SOUND_MESSAGE': 8, 'NOTIFICATION_SOUND_GROUP': 9, 'NOTIFICATION_DISABLED_WITH_SUB': 16, 'NOTIFICATION_PAYMENT': 17, 'NOTIFICATION_MENTION': 40, 'NOTIFICATION_THUMBNAIL': 45, 'PRIVACY_SYNC_CONTACTS': 6, 'PRIVACY_SEARCH_BY_PHONE_NUMBER': 7, 'PRIVACY_SEARCH_BY_USERID': 13, 'PRIVACY_SEARCH_BY_EMAIL': 14, 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN': 21, 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME': 23, 'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME': 35, 'PRIVACY_ALLOW_FRIEND_REQUEST': 30, 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND': 25, 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL': 26, 'PRIVACY_AGREE_USE_PAIDCALL': 27, 'CONTACT_MY_TICKET': 10, 'IDENTITY_PROVIDER': 11, 'IDENTITY_IDENTIFIER': 12, 'SNS_ACCOUNT': 19, 'PHONE_REGISTRATION': 20, 'PREFERENCE_LOCALE': 15, 'CUSTOM_MODE': 22, 'EMAIL_CONFIRMATION_STATUS': 24, 'ACCOUNT_MIGRATION_PINCODE': 28, 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE': 29, 'SECURITY_CENTER_SETTINGS': 18, 'E2EE_ENABLE': 33, 'ENABLE_SOUND_TO_TEXT': 47, 'HITOKOTO_BACKUP_REQUESTED': 34, 'CONTACT_ALLOW_FOLLOWING': 36, 'PRIVACY_ALLOW_NEARBY': 37, 'AGREEMENT_NEARBY': 38, 'AGREEMENT_SQUARE': 39, 'ALLOW_UNREGISTRATION_SECONDARY_DEVICE': 41, 'AGREEMENT_BOT_USE': 42, 'AGREEMENT_SHAKE_FUNCTION': 43, 'AGREEMENT_MOBILE_CONTACT_NAME': 44, 'AGREEMENT_SOUND_TO_TEXT': 46 };
lineType.SnsIdType = { 'FACEBOOK': 1, 'SINA': 2, 'RENREN': 3, 'FEIXIN': 4, 'BBM': 5 };
lineType.SpammerReason = { 'OTHER': 0, 'ADVERTISING': 1, 'GENDER_HARASSMENT': 2, 'HARASSMENT': 3 };
lineType.SyncActionType = { 'SYNC': 0, 'REPORT': 1 };
lineType.SpotCategory = { 'UNKNOWN': 0, 'GOURMET': 1, 'BEAUTY': 2, 'TRAVEL': 3, 'SHOPPING': 4, 'ENTERTAINMENT': 5, 'SPORTS': 6, 'TRANSPORT': 7, 'LIFE': 8, 'HOSPITAL': 9, 'FINANCE': 10, 'EDUCATION': 11, 'OTHER': 12, 'ALL': 10000 };
lineType.SyncCategory = { 'PROFILE': 0, 'SETTINGS': 1, 'OPS': 2, 'CONTACT': 3, 'RECOMMEND': 4, 'BLOCK': 5, 'GROUP': 6, 'ROOM': 7, 'NOTIFICATION': 8, 'ADDRESS_BOOK': 9 };
lineType.TMessageBoxStatus = { 'ACTIVATED': 1, 'UNREAD': 2 };
lineType.UniversalNotificationServiceErrorCode = { 'INTERNAL_ERROR': 0, 'INVALID_KEY': 1, 'ILLEGAL_ARGUMENT': 2, 'TOO_MANY_REQUEST': 3, 'AUTHENTICATION_FAILED': 4, 'NO_WRITE_PERMISSION': 5 };
lineType.UnregistrationReason = { 'UNREGISTRATION_REASON_UNREGISTER_USER': 1, 'UNREGISTRATION_REASON_UNBIND_DEVICE': 2 };
lineType.UserAgeType = { 'OVER': 1, 'UNDER': 2, 'UNDEFINED': 3 };
lineType.VerificationMethod = { 'NO_AVAILABLE': 0, 'PIN_VIA_SMS': 1, 'CALLERID_INDIGO': 2, 'PIN_VIA_TTS': 4, 'SKIP': 10 };
lineType.VerificationResult = { 'FAILED': 0, 'OK_NOT_REGISTERED_YET': 1, 'OK_REGISTERED_WITH_SAME_DEVICE': 2, 'OK_REGISTERED_WITH_ANOTHER_DEVICE': 3 };
lineType.WapInvitationType = { 'REGISTRATION': 1, 'CHAT': 2 };
lineType.MediaType = { 'AUDIO': 1, 'VIDEO': 2 };
lineType.SQErrorCode = { 'UNKNOWN': 0, 'ILLEGAL_ARGUMENT': 400, 'AUTHENTICATION_FAILURE': 401, 'FORBIDDEN': 403, 'NOT_FOUND': 404, 'REVISION_MISMATCH': 409, 'PRECONDITION_FAILED': 410, 'INTERNAL_ERROR': 500, 'NOT_IMPLEMENTED': 501, 'TRY_AGAIN_LATER': 505 };
lineType.SquareEventType = { 'RECEIVE_MESSAGE': 0, 'SEND_MESSAGE': 1, 'NOTIFIED_JOIN_SQUARE_CHAT': 2, 'NOTIFIED_INVITE_INTO_SQUARE_CHAT': 3, 'NOTIFIED_LEAVE_SQUARE_CHAT': 4, 'NOTIFIED_DESTROY_MESSAGE': 5, 'NOTIFIED_MARK_AS_READ': 6, 'NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE': 7, 'NOTIFIED_KICKOUT_FROM_SQUARE': 19, 'NOTIFIED_SHUTDOWN_SQUARE': 18, 'NOTIFIED_DELETE_SQUARE_CHAT': 20, 'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME': 30, 'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE': 31, 'NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT': 37, 'NOTIFIED_ADD_BOT': 33, 'NOTIFIED_REMOVE_BOT': 34, 'NOTIFIED_UPDATE_SQUARE': 8, 'NOTIFIED_UPDATE_SQUARE_STATUS': 9, 'NOTIFIED_UPDATE_SQUARE_AUTHORITY': 10, 'NOTIFIED_UPDATE_SQUARE_MEMBER': 11, 'NOTIFIED_UPDATE_SQUARE_CHAT': 12, 'NOTIFIED_UPDATE_SQUARE_CHAT_STATUS': 13, 'NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER': 14, 'NOTIFIED_CREATE_SQUARE_MEMBER': 15, 'NOTIFIED_CREATE_SQUARE_CHAT_MEMBER': 16, 'NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION': 17, 'NOTIFIED_UPDATE_SQUARE_FEATURE_SET': 32, 'NOTIFIED_UPDATE_SQUARE_NOTE_STATUS': 36, 'NOTIFICATION_JOIN_REQUEST': 21, 'NOTIFICATION_JOINED': 22, 'NOTIFICATION_PROMOTED_COADMIN': 23, 'NOTIFICATION_PROMOTED_ADMIN': 24, 'NOTIFICATION_DEMOTED_MEMBER': 25, 'NOTIFICATION_KICKED_OUT': 26, 'NOTIFICATION_SQUARE_DELETE': 27, 'NOTIFICATION_SQUARE_CHAT_DELETE': 28, 'NOTIFICATION_MESSAGE': 29 };
lineType.SquareMemberRelationState = { 'NONE': 1, 'BLOCKED': 2 };
lineType.SquareFeatureControlState = { 'DISABLED': 1, 'ENABLED': 2 };
lineType.BooleanState = { 'NONE': 0, 'OFF': 1, 'ON': 2 };
lineType.SquareType = { 'CLOSED': 0, 'OPEN': 1 };
lineType.SquareChatType = { 'OPEN': 1, 'SECRET': 2, 'ONE_ON_ONE': 3, 'SQUARE_DEFAULT': 4 };
lineType.SquareErrorCode = { 'UNKNOWN': 0, 'INTERNAL_ERROR': 500, 'NOT_IMPLEMENTED': 501, 'TRY_AGAIN_LATER': 503, 'MAINTENANCE': 505, 'ILLEGAL_ARGUMENT': 400, 'AUTHENTICATION_FAILURE': 401, 'FORBIDDEN': 403, 'NOT_FOUND': 404, 'REVISION_MISMATCH': 409, 'PRECONDITION_FAILED': 410 };
lineType.SquareChatState = { 'ALIVE': 0, 'DELETED': 1, 'SUSPENDED': 2 };
lineType.SquareFeatureSetAttribute = { 'CREATING_SECRET_SQUARE_CHAT': 1, 'INVITING_INTO_OPEN_SQUARE_CHAT': 2 };
lineType.SquareMembershipState = { 'JOIN_REQUESTED': 1, 'JOINED': 2, 'REJECTED': 3, 'LEFT': 4, 'KICK_OUT': 5, 'BANNED': 6, 'DELETED': 7 };
lineType.SquareChatMemberAttribute = { 'MEMBERSHIP_STATE': 4, 'NOTIFICATION_MESSAGE': 6 };
lineType.SquareMemberRole = { 'ADMIN': 1, 'CO_ADMIN': 2, 'MEMBER': 10 };
lineType.PreconditionFailedExtraInfo = { 'DUPLICATED_DISPLAY_NAME': 0 };
lineType.SquareChatMembershipState = { 'JOINED': 1, 'LEFT': 2 };
lineType.FetchDirection = { 'FORWARD': 1, 'BACKWARD': 2 };
lineType.SquareAttribute = { 'NAME': 1, 'WELCOME_MESSAGE': 2, 'PROFILE_IMAGE': 3, 'DESCRIPTION': 4, 'SEARCHABLE': 6, 'CATEGORY': 7, 'INVITATION_URL': 8, 'ABLE_TO_USE_INVITATION_URL': 9, 'STATE': 10 };
lineType.SquareAuthorityAttribute = { 'UPDATE_SQUARE_PROFILE': 1, 'INVITE_NEW_MEMBER': 2, 'APPROVE_JOIN_REQUEST': 3, 'CREATE_POST': 4, 'CREATE_OPEN_SQUARE_CHAT': 5, 'DELETE_SQUARE_CHAT_OR_POST': 6, 'REMOVE_SQUARE_MEMBER': 7, 'GRANT_ROLE': 8, 'ENABLE_INVITATION_TICKET': 9, 'CREATE_CHAT_ANNOUNCEMENT': 10 };
lineType.SquareEventStatus = { 'NORMAL': 1, 'ALERT_DISABLED': 2 };
lineType.SuggestDictionaryIncrementStatus = { 'SUCCESS': 0, 'INVALID_REVISION': 1, 'TOO_LARGE_DATA': 2, 'SCHEME_CHANGED': 3, 'RETRY': 4, 'FAIL': 5, 'TOO_OLD_DATA': 6 };

var Thrift = {}
Thrift.copyList = (args = [], clas) => {
    let rt = []
    args.forEach((e, i) => {
        if (clas[0]) {

            rt[i] = new clas(e)
        } else {
            rt[i] = e
        }
    })
    return rt
}
Thrift.copyMap = (args = {}, clas) => {
    let rt = {}
    for (const k in args) {
        if (clas[0]) {

            rt[k] = new clas(args[k])
        } else {
            rt[k] = args[k]
        }
    }
    return rt
}

Thrift.bin2int = (args = []) => {
    let rt=0
    args.forEach((e,i)=>{
        rt=rt*(0xff)
        rt+=e
    })
    return rt
}

lineType.Location = class {
    constructor(args) {
        this.title = null;
        this.address = null;
        this.latitude = null;
        this.longitude = null;
        this.phone = null;
        if (args) {
            if (args.title !== undefined && args.title !== null) {
                this.title = args.title;
            } if (args.address !== undefined && args.address !== null) {
                this.address = args.address;
            } if (args.latitude !== undefined && args.latitude !== null) {
                this.latitude = args.latitude;
            } if (args.longitude !== undefined && args.longitude !== null) {
                this.longitude = args.longitude;
            } if (args.phone !== undefined && args.phone !== null) {
                this.phone = args.phone;
            }
        }
    }
};
lineType.MessageBoxV2MessageId = class {
    constructor(args) {
        this.deliveredTime = null;
        this.messageId = null;
        if (args) {
            if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
                this.deliveredTime = args.deliveredTime;
            } if (args.messageId !== undefined && args.messageId !== null) {
                this.messageId = args.messageId;
            }
        }
    }
};
lineType.MessageCommitResult = class {
    constructor(args) {
        this.requestId = null;
        this.state = null;
        this.messageStoreRequestId = null;
        this.messageIds = null;
        this.receiverCount = null;
        this.successCount = null;
        this.failCount = null;
        this.blockCount = null;
        this.unregisteredCount = null;
        this.unrelatedCount = null;
        this.errorDescription = null;
        if (args) {
            if (args.requestId !== undefined && args.requestId !== null) {
                this.requestId = args.requestId;
            } if (args.state !== undefined && args.state !== null) {
                this.state = args.state;
            } if (args.messageStoreRequestId !== undefined && args.messageStoreRequestId !== null) {
                this.messageStoreRequestId = args.messageStoreRequestId;
            } if (args.messageIds !== undefined && args.messageIds !== null) {
                this.messageIds = Thrift.copyList(args.messageIds, [null]);
            } if (args.receiverCount !== undefined && args.receiverCount !== null) {
                this.receiverCount = args.receiverCount;
            } if (args.successCount !== undefined && args.successCount !== null) {
                this.successCount = args.successCount;
            } if (args.failCount !== undefined && args.failCount !== null) {
                this.failCount = args.failCount;
            } if (args.blockCount !== undefined && args.blockCount !== null) {
                this.blockCount = args.blockCount;
            } if (args.unregisteredCount !== undefined && args.unregisteredCount !== null) {
                this.unregisteredCount = args.unregisteredCount;
            } if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
                this.unrelatedCount = args.unrelatedCount;
            } if (args.errorDescription !== undefined && args.errorDescription !== null) {
                this.errorDescription = args.errorDescription;
            }
        }
    }
};
lineType.CallHost = class {
    constructor(args) {
        this.host = null;
        this.port = null;
        this.zone = null;
        if (args) {
            if (args.host !== undefined && args.host !== null) {
                this.host = args.host;
            } if (args.port !== undefined && args.port !== null) {
                this.port = args.port;
            } if (args.zone !== undefined && args.zone !== null) {
                this.zone = args.zone;
            }
        }
    }
};
lineType.AgeCheckDocomoResult = class {
    constructor(args) {
        this.authUrl = null;
        this.userAgeType = null;
        if (args) {
            if (args.authUrl !== undefined && args.authUrl !== null) {
                this.authUrl = args.authUrl;
            } if (args.userAgeType !== undefined && args.userAgeType !== null) {
                this.userAgeType = args.userAgeType;
            }
        }
    }
};
lineType.AgeCheckRequestResult = class {
    constructor(args) {
        this.authUrl = null;
        this.sessionId = null;
        if (args) {
            if (args.authUrl !== undefined && args.authUrl !== null) {
                this.authUrl = args.authUrl;
            } if (args.sessionId !== undefined && args.sessionId !== null) {
                this.sessionId = args.sessionId;
            }
        }
    }
};
lineType.TextMessageAnnouncementContents = class {
    constructor(args) {
        this.messageId = null;
        this.text = null;
        this.senderSquareMemberMid = null;
        this.createdAt = null;
        if (args) {
            if (args.messageId !== undefined && args.messageId !== null) {
                this.messageId = args.messageId;
            } if (args.text !== undefined && args.text !== null) {
                this.text = args.text;
            } if (args.senderSquareMemberMid !== undefined && args.senderSquareMemberMid !== null) {
                this.senderSquareMemberMid = args.senderSquareMemberMid;
            } if (args.createdAt !== undefined && args.createdAt !== null) {
                this.createdAt = args.createdAt;
            }
        }
    }
};
lineType.SquareChatAnnouncementContents = class {
    constructor(args) {
        this.textMessageAnnouncementContents = null;
        if (args) {
            if (args.textMessageAnnouncementContents !== undefined && args.textMessageAnnouncementContents !== null) {
                this.textMessageAnnouncementContents = new lineType.TextMessageAnnouncementContents(args.textMessageAnnouncementContents);
            }
        }
    }
};
lineType.SquareChatAnnouncement = class {
    constructor(args) {
        this.announcementSeq = null;
        this.type = null;
        this.contents = null;
        if (args) {
            if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
                this.announcementSeq = args.announcementSeq;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.contents !== undefined && args.contents !== null) {
                this.contents = new lineType.SquareChatAnnouncementContents(args.contents);
            }
        }
    }
};
lineType.Announcement = class {
    constructor(args) {
        this.index = null;
        this.forceUpdate = null;
        this.title = null;
        this.text = null;
        this.createdTime = null;
        this.pictureUrl = null;
        this.thumbnailUrl = null;
        if (args) {
            if (args.index !== undefined && args.index !== null) {
                this.index = args.index;
            } if (args.forceUpdate !== undefined && args.forceUpdate !== null) {
                this.forceUpdate = args.forceUpdate;
            } if (args.title !== undefined && args.title !== null) {
                this.title = args.title;
            } if (args.text !== undefined && args.text !== null) {
                this.text = args.text;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.pictureUrl !== undefined && args.pictureUrl !== null) {
                this.pictureUrl = args.pictureUrl;
            } if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
                this.thumbnailUrl = args.thumbnailUrl;
            }
        }
    }
};
lineType.ChannelProvider = class {
    constructor(args) {
        this.name = null;
        if (args) {
            if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            }
        }
    }
};
lineType.E2EEPublicKey = class {
    constructor(args) {
        this.version = null;
        this.keyId = null;
        this.keyData = null;
        this.createdTime = null;
        if (args) {
            if (args.version !== undefined && args.version !== null) {
                this.version = args.version;
            } if (args.keyId !== undefined && args.keyId !== null) {
                this.keyId = args.keyId;
            } if (args.keyData !== undefined && args.keyData !== null) {
                this.keyData = args.keyData;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            }
        }
    }
};
lineType.ChannelDomain = class {
    constructor(args) {
        this.host = null;
        this.removed = null;
        if (args) {
            if (args.host !== undefined && args.host !== null) {
                this.host = args.host;
            } if (args.removed !== undefined && args.removed !== null) {
                this.removed = args.removed;
            }
        }
    }
};
lineType.E2EENegotiationResult = class {
    constructor(args) {
        this.allowedTypes = null;
        this.publicKey = null;
        if (args) {
            if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
                this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
            } if (args.publicKey !== undefined && args.publicKey !== null) {
                this.publicKey = new lineType.E2EEPublicKey(args.publicKey);
            }
        }
    }
};
lineType.OTPResult = class {
    constructor(args) {
        this.otpId = null;
        this.otp = null;
        if (args) {
            if (args.otpId !== undefined && args.otpId !== null) {
                this.otpId = args.otpId;
            } if (args.otp !== undefined && args.otp !== null) {
                this.otp = args.otp;
            }
        }
    }
};
lineType.Square = class {
    constructor(args) {
        this.mid = null;
        this.name = null;
        this.welcomeMessage = null;
        this.profileImageObsHash = null;
        this.desc = null;
        this.searchable = null;
        this.type = null;
        this.categoryID = null;
        this.invitationURL = null;
        this.revision = null;
        this.ableToUseInvitationTicket = null;
        this.state = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.welcomeMessage !== undefined && args.welcomeMessage !== null) {
                this.welcomeMessage = args.welcomeMessage;
            } if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
                this.profileImageObsHash = args.profileImageObsHash;
            } if (args.desc !== undefined && args.desc !== null) {
                this.desc = args.desc;
            } if (args.searchable !== undefined && args.searchable !== null) {
                this.searchable = args.searchable;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.categoryID !== undefined && args.categoryID !== null) {
                this.categoryID = args.categoryID;
            } if (args.invitationURL !== undefined && args.invitationURL !== null) {
                this.invitationURL = args.invitationURL;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.ableToUseInvitationTicket !== undefined && args.ableToUseInvitationTicket !== null) {
                this.ableToUseInvitationTicket = args.ableToUseInvitationTicket;
            } if (args.state !== undefined && args.state !== null) {
                this.state = args.state;
            }
        }
    }
};
lineType.SquareAuthority = class {
    constructor(args) {
        this.squareMid = null;
        this.updateSquareProfile = null;
        this.inviteNewMember = null;
        this.approveJoinRequest = null;
        this.createPost = null;
        this.createOpenSquareChat = null;
        this.deleteSquareChatOrPost = null;
        this.removeSquareMember = null;
        this.grantRole = null;
        this.enableInvitationTicket = null;
        this.revision = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.updateSquareProfile !== undefined && args.updateSquareProfile !== null) {
                this.updateSquareProfile = args.updateSquareProfile;
            } if (args.inviteNewMember !== undefined && args.inviteNewMember !== null) {
                this.inviteNewMember = args.inviteNewMember;
            } if (args.approveJoinRequest !== undefined && args.approveJoinRequest !== null) {
                this.approveJoinRequest = args.approveJoinRequest;
            } if (args.createPost !== undefined && args.createPost !== null) {
                this.createPost = args.createPost;
            } if (args.createOpenSquareChat !== undefined && args.createOpenSquareChat !== null) {
                this.createOpenSquareChat = args.createOpenSquareChat;
            } if (args.deleteSquareChatOrPost !== undefined && args.deleteSquareChatOrPost !== null) {
                this.deleteSquareChatOrPost = args.deleteSquareChatOrPost;
            } if (args.removeSquareMember !== undefined && args.removeSquareMember !== null) {
                this.removeSquareMember = args.removeSquareMember;
            } if (args.grantRole !== undefined && args.grantRole !== null) {
                this.grantRole = args.grantRole;
            } if (args.enableInvitationTicket !== undefined && args.enableInvitationTicket !== null) {
                this.enableInvitationTicket = args.enableInvitationTicket;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.SquarePreference = class {
    constructor(args) {
        this.favoriteTimestamp = null;
        this.notiForNewJoinRequest = null;
        if (args) {
            if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
                this.favoriteTimestamp = args.favoriteTimestamp;
            } if (args.notiForNewJoinRequest !== undefined && args.notiForNewJoinRequest !== null) {
                this.notiForNewJoinRequest = args.notiForNewJoinRequest;
            }
        }
    }
};
lineType.SquareMember = class {
    constructor(args) {
        this.squareMemberMid = null;
        this.squareMid = null;
        this.displayName = null;
        this.profileImageObsHash = null;
        this.ableToReceiveMessage = null;
        this.membershipState = null;
        this.role = null;
        this.revision = null;
        this.preference = null;
        this.joinMessage = null;
        if (args) {
            if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            } if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
                this.profileImageObsHash = args.profileImageObsHash;
            } if (args.ableToReceiveMessage !== undefined && args.ableToReceiveMessage !== null) {
                this.ableToReceiveMessage = args.ableToReceiveMessage;
            } if (args.membershipState !== undefined && args.membershipState !== null) {
                this.membershipState = args.membershipState;
            } if (args.role !== undefined && args.role !== null) {
                this.role = args.role;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.preference !== undefined && args.preference !== null) {
                this.preference = new lineType.SquarePreference(args.preference);
            } if (args.joinMessage !== undefined && args.joinMessage !== null) {
                this.joinMessage = args.joinMessage;
            }
        }
    }
};
lineType.SquareMemberRelation = class {
    constructor(args) {
        this.state = null;
        this.revision = null;
        if (args) {
            if (args.state !== undefined && args.state !== null) {
                this.state = args.state;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.SquareFeature = class {
    constructor(args) {
        this.controlState = null;
        this.booleanValue = null;
        if (args) {
            if (args.controlState !== undefined && args.controlState !== null) {
                this.controlState = args.controlState;
            } if (args.booleanValue !== undefined && args.booleanValue !== null) {
                this.booleanValue = args.booleanValue;
            }
        }
    }
};
lineType.SquareFeatureSet = class {
    constructor(args) {
        this.squareMid = null;
        this.revision = null;
        this.creatingSecretSquareChat = null;
        this.invitingIntoOpenSquareChat = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.creatingSecretSquareChat !== undefined && args.creatingSecretSquareChat !== null) {
                this.creatingSecretSquareChat = new lineType.SquareFeature(args.creatingSecretSquareChat);
            } if (args.invitingIntoOpenSquareChat !== undefined && args.invitingIntoOpenSquareChat !== null) {
                this.invitingIntoOpenSquareChat = new lineType.SquareFeature(args.invitingIntoOpenSquareChat);
            }
        }
    }
};
lineType.SquareStatus = class {
    constructor(args) {
        this.memberCount = null;
        this.joinRequestCount = null;
        this.lastJoinRequestAt = null;
        this.openChatCount = null;
        if (args) {
            if (args.memberCount !== undefined && args.memberCount !== null) {
                this.memberCount = args.memberCount;
            } if (args.joinRequestCount !== undefined && args.joinRequestCount !== null) {
                this.joinRequestCount = args.joinRequestCount;
            } if (args.lastJoinRequestAt !== undefined && args.lastJoinRequestAt !== null) {
                this.lastJoinRequestAt = args.lastJoinRequestAt;
            } if (args.openChatCount !== undefined && args.openChatCount !== null) {
                this.openChatCount = args.openChatCount;
            }
        }
    }
};
lineType.SquareChat = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMid = null;
        this.type = null;
        this.name = null;
        this.chatImageObsHash = null;
        this.squareChatRevision = null;
        this.maxMemberCount = null;
        this.state = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.chatImageObsHash !== undefined && args.chatImageObsHash !== null) {
                this.chatImageObsHash = args.chatImageObsHash;
            } if (args.squareChatRevision !== undefined && args.squareChatRevision !== null) {
                this.squareChatRevision = args.squareChatRevision;
            } if (args.maxMemberCount !== undefined && args.maxMemberCount !== null) {
                this.maxMemberCount = args.maxMemberCount;
            } if (args.state !== undefined && args.state !== null) {
                this.state = args.state;
            }
        }
    }
};
lineType.NoteStatus = class {
    constructor(args) {
        this.noteCount = null;
        this.latestCreatedAt = null;
        if (args) {
            if (args.noteCount !== undefined && args.noteCount !== null) {
                this.noteCount = args.noteCount;
            } if (args.latestCreatedAt !== undefined && args.latestCreatedAt !== null) {
                this.latestCreatedAt = args.latestCreatedAt;
            }
        }
    }
};
lineType.SquareInfo = class {
    constructor(args) {
        this.square = null;
        this.squareStatus = null;
        this.squareNoteStatus = null;
        if (args) {
            if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            } if (args.squareStatus !== undefined && args.squareStatus !== null) {
                this.squareStatus = new lineType.SquareStatus(args.squareStatus);
            } if (args.squareNoteStatus !== undefined && args.squareNoteStatus !== null) {
                this.squareNoteStatus = new lineType.NoteStatus(args.squareNoteStatus);
            }
        }
    }
};
lineType.BotUseInfo = class {
    constructor(args) {
        this.botUseAgreementAccepted = null;
        this.botInFriends = null;
        this.primaryApplication = null;
        this.locale = null;
        if (args) {
            if (args.botUseAgreementAccepted !== undefined && args.botUseAgreementAccepted !== null) {
                this.botUseAgreementAccepted = args.botUseAgreementAccepted;
            } if (args.botInFriends !== undefined && args.botInFriends !== null) {
                this.botInFriends = args.botInFriends;
            } if (args.primaryApplication !== undefined && args.primaryApplication !== null) {
                this.primaryApplication = args.primaryApplication;
            } if (args.locale !== undefined && args.locale !== null) {
                this.locale = args.locale;
            }
        }
    }
};
lineType.PaidCallAdCountry = class {
    constructor(args) {
        this.countryCode = null;
        this.rateDivision = null;
        if (args) {
            if (args.countryCode !== undefined && args.countryCode !== null) {
                this.countryCode = args.countryCode;
            } if (args.rateDivision !== undefined && args.rateDivision !== null) {
                this.rateDivision = args.rateDivision;
            }
        }
    }
};
lineType.PaidCallAdResult = class {
    constructor(args) {
        this.adRemains = null;
        if (args) {
            if (args.adRemains !== undefined && args.adRemains !== null) {
                this.adRemains = args.adRemains;
            }
        }
    }
};
lineType.PaidCallBalance = class {
    constructor(args) {
        this.productType = null;
        this.productName = null;
        this.unit = null;
        this.limitedPaidBalance = null;
        this.limitedFreeBalance = null;
        this.unlimitedPaidBalance = null;
        this.unlimitedFreeBalance = null;
        this.startTime = null;
        this.endTime = null;
        this.autopayEnabled = null;
        if (args) {
            if (args.productType !== undefined && args.productType !== null) {
                this.productType = args.productType;
            } if (args.productName !== undefined && args.productName !== null) {
                this.productName = args.productName;
            } if (args.unit !== undefined && args.unit !== null) {
                this.unit = args.unit;
            } if (args.limitedPaidBalance !== undefined && args.limitedPaidBalance !== null) {
                this.limitedPaidBalance = args.limitedPaidBalance;
            } if (args.limitedFreeBalance !== undefined && args.limitedFreeBalance !== null) {
                this.limitedFreeBalance = args.limitedFreeBalance;
            } if (args.unlimitedPaidBalance !== undefined && args.unlimitedPaidBalance !== null) {
                this.unlimitedPaidBalance = args.unlimitedPaidBalance;
            } if (args.unlimitedFreeBalance !== undefined && args.unlimitedFreeBalance !== null) {
                this.unlimitedFreeBalance = args.unlimitedFreeBalance;
            } if (args.startTime !== undefined && args.startTime !== null) {
                this.startTime = args.startTime;
            } if (args.endTime !== undefined && args.endTime !== null) {
                this.endTime = args.endTime;
            } if (args.autopayEnabled !== undefined && args.autopayEnabled !== null) {
                this.autopayEnabled = args.autopayEnabled;
            }
        }
    }
};
lineType.PaidCallCurrencyExchangeRate = class {
    constructor(args) {
        this.currencyCode = null;
        this.currencyName = null;
        this.currencySign = null;
        this.preferred = null;
        this.coinRate = null;
        this.creditRate = null;
        if (args) {
            if (args.currencyCode !== undefined && args.currencyCode !== null) {
                this.currencyCode = args.currencyCode;
            } if (args.currencyName !== undefined && args.currencyName !== null) {
                this.currencyName = args.currencyName;
            } if (args.currencySign !== undefined && args.currencySign !== null) {
                this.currencySign = args.currencySign;
            } if (args.preferred !== undefined && args.preferred !== null) {
                this.preferred = args.preferred;
            } if (args.coinRate !== undefined && args.coinRate !== null) {
                this.coinRate = args.coinRate;
            } if (args.creditRate !== undefined && args.creditRate !== null) {
                this.creditRate = args.creditRate;
            }
        }
    }
};
lineType.ExtendedProfileBirthday = class {
    constructor(args) {
        this.year = null;
        this.yearPrivacyLevelType = null;
        this.yearEnabled = null;
        this.day = null;
        this.dayPrivacyLevelType = null;
        this.dayEnabled = null;
        if (args) {
            if (args.year !== undefined && args.year !== null) {
                this.year = args.year;
            } if (args.yearPrivacyLevelType !== undefined && args.yearPrivacyLevelType !== null) {
                this.yearPrivacyLevelType = args.yearPrivacyLevelType;
            } if (args.yearEnabled !== undefined && args.yearEnabled !== null) {
                this.yearEnabled = args.yearEnabled;
            } if (args.day !== undefined && args.day !== null) {
                this.day = args.day;
            } if (args.dayPrivacyLevelType !== undefined && args.dayPrivacyLevelType !== null) {
                this.dayPrivacyLevelType = args.dayPrivacyLevelType;
            } if (args.dayEnabled !== undefined && args.dayEnabled !== null) {
                this.dayEnabled = args.dayEnabled;
            }
        }
    }
};
lineType.ExtendedProfile = class {
    constructor(args) {
        this.birthday = null;
        if (args) {
            if (args.birthday !== undefined && args.birthday !== null) {
                this.birthday = new lineType.ExtendedProfileBirthday(args.birthday);
            }
        }
    }
};
lineType.PaidCallDialing = class {
    constructor(args) {
        this.type = null;
        this.dialedNumber = null;
        this.serviceDomain = null;
        this.productType = null;
        this.productName = null;
        this.multipleProduct = null;
        this.callerIdStatus = null;
        this.balance = null;
        this.unit = null;
        this.rate = null;
        this.displayCode = null;
        this.calledNumber = null;
        this.calleeNationalNumber = null;
        this.calleeCallingCode = null;
        this.rateDivision = null;
        this.adMaxMin = null;
        this.adRemains = null;
        this.adSessionId = null;
        if (args) {
            if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
                this.dialedNumber = args.dialedNumber;
            } if (args.serviceDomain !== undefined && args.serviceDomain !== null) {
                this.serviceDomain = args.serviceDomain;
            } if (args.productType !== undefined && args.productType !== null) {
                this.productType = args.productType;
            } if (args.productName !== undefined && args.productName !== null) {
                this.productName = args.productName;
            } if (args.multipleProduct !== undefined && args.multipleProduct !== null) {
                this.multipleProduct = args.multipleProduct;
            } if (args.callerIdStatus !== undefined && args.callerIdStatus !== null) {
                this.callerIdStatus = args.callerIdStatus;
            } if (args.balance !== undefined && args.balance !== null) {
                this.balance = args.balance;
            } if (args.unit !== undefined && args.unit !== null) {
                this.unit = args.unit;
            } if (args.rate !== undefined && args.rate !== null) {
                this.rate = args.rate;
            } if (args.displayCode !== undefined && args.displayCode !== null) {
                this.displayCode = args.displayCode;
            } if (args.calledNumber !== undefined && args.calledNumber !== null) {
                this.calledNumber = args.calledNumber;
            } if (args.calleeNationalNumber !== undefined && args.calleeNationalNumber !== null) {
                this.calleeNationalNumber = args.calleeNationalNumber;
            } if (args.calleeCallingCode !== undefined && args.calleeCallingCode !== null) {
                this.calleeCallingCode = args.calleeCallingCode;
            } if (args.rateDivision !== undefined && args.rateDivision !== null) {
                this.rateDivision = args.rateDivision;
            } if (args.adMaxMin !== undefined && args.adMaxMin !== null) {
                this.adMaxMin = args.adMaxMin;
            } if (args.adRemains !== undefined && args.adRemains !== null) {
                this.adRemains = args.adRemains;
            } if (args.adSessionId !== undefined && args.adSessionId !== null) {
                this.adSessionId = args.adSessionId;
            }
        }
    }
};
lineType.SpotItem = class {
    constructor(args) {
        this.name = null;
        this.phone = null;
        this.category = null;
        this.mid = null;
        this.countryAreaCode = null;
        this.freePhoneCallable = null;
        if (args) {
            if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.phone !== undefined && args.phone !== null) {
                this.phone = args.phone;
            } if (args.category !== undefined && args.category !== null) {
                this.category = args.category;
            } if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
                this.countryAreaCode = args.countryAreaCode;
            } if (args.freePhoneCallable !== undefined && args.freePhoneCallable !== null) {
                this.freePhoneCallable = args.freePhoneCallable;
            }
        }
    }
};
lineType.SpotNearbyItem = class {
    constructor(args) {
        this.spotItem = null;
        this.location = null;
        if (args) {
            if (args.spotItem !== undefined && args.spotItem !== null) {
                this.spotItem = new lineType.SpotItem(args.spotItem);
            } if (args.location !== undefined && args.location !== null) {
                this.location = new lineType.Location(args.location);
            }
        }
    }
};
lineType.SpotNearbyResponse = class {
    constructor(args) {
        this.spotNearbyItems = null;
        if (args) {
            if (args.spotNearbyItems !== undefined && args.spotNearbyItems !== null) {
                this.spotNearbyItems = Thrift.copyList(args.spotNearbyItems, [lineType.SpotNearbyItem]);
            }
        }
    }
};
lineType.SpotPhoneNumberResponse = class {
    constructor(args) {
        this.spotItems = null;
        if (args) {
            if (args.spotItems !== undefined && args.spotItems !== null) {
                this.spotItems = Thrift.copyList(args.spotItems, [lineType.SpotItem]);
            }
        }
    }
};
lineType.PaidCallHistory = class {
    constructor(args) {
        this.seq = null;
        this.type = null;
        this.dialedNumber = null;
        this.calledNumber = null;
        this.toMid = null;
        this.toName = null;
        this.setupTime = null;
        this.startTime = null;
        this.endTime = null;
        this.duration = null;
        this.terminate = null;
        this.productType = null;
        this.charge = null;
        this.unit = null;
        this.result = null;
        if (args) {
            if (args.seq !== undefined && args.seq !== null) {
                this.seq = args.seq;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
                this.dialedNumber = args.dialedNumber;
            } if (args.calledNumber !== undefined && args.calledNumber !== null) {
                this.calledNumber = args.calledNumber;
            } if (args.toMid !== undefined && args.toMid !== null) {
                this.toMid = args.toMid;
            } if (args.toName !== undefined && args.toName !== null) {
                this.toName = args.toName;
            } if (args.setupTime !== undefined && args.setupTime !== null) {
                this.setupTime = args.setupTime;
            } if (args.startTime !== undefined && args.startTime !== null) {
                this.startTime = args.startTime;
            } if (args.endTime !== undefined && args.endTime !== null) {
                this.endTime = args.endTime;
            } if (args.duration !== undefined && args.duration !== null) {
                this.duration = args.duration;
            } if (args.terminate !== undefined && args.terminate !== null) {
                this.terminate = args.terminate;
            } if (args.productType !== undefined && args.productType !== null) {
                this.productType = args.productType;
            } if (args.charge !== undefined && args.charge !== null) {
                this.charge = args.charge;
            } if (args.unit !== undefined && args.unit !== null) {
                this.unit = args.unit;
            } if (args.result !== undefined && args.result !== null) {
                this.result = args.result;
            }
        }
    }
};
lineType.PaidCallHistoryResult = class {
    constructor(args) {
        this.historys = null;
        this.hasNext = null;
        if (args) {
            if (args.historys !== undefined && args.historys !== null) {
                this.historys = Thrift.copyList(args.historys, [lineType.PaidCallHistory]);
            } if (args.hasNext !== undefined && args.hasNext !== null) {
                this.hasNext = args.hasNext;
            }
        }
    }
};
lineType.PaidCallMetadataResult = class {
    constructor(args) {
        this.currencyExchangeRates = null;
        this.recommendedCountryCodes = null;
        this.adCountries = null;
        if (args) {
            if (args.currencyExchangeRates !== undefined && args.currencyExchangeRates !== null) {
                this.currencyExchangeRates = Thrift.copyList(args.currencyExchangeRates, [lineType.PaidCallCurrencyExchangeRate]);
            } if (args.recommendedCountryCodes !== undefined && args.recommendedCountryCodes !== null) {
                this.recommendedCountryCodes = Thrift.copyList(args.recommendedCountryCodes, [null]);
            } if (args.adCountries !== undefined && args.adCountries !== null) {
                this.adCountries = Thrift.copyList(args.adCountries, [lineType.PaidCallAdCountry]);
            }
        }
    }
};
lineType.PaidCallRedeemResult = class {
    constructor(args) {
        this.eventName = null;
        this.eventAmount = null;
        if (args) {
            if (args.eventName !== undefined && args.eventName !== null) {
                this.eventName = args.eventName;
            } if (args.eventAmount !== undefined && args.eventAmount !== null) {
                this.eventAmount = args.eventAmount;
            }
        }
    }
};
lineType.PaidCallResponse = class {
    constructor(args) {
        this.host = null;
        this.dialing = null;
        this.token = null;
        this.spotItems = null;
        if (args) {
            if (args.host !== undefined && args.host !== null) {
                this.host = new lineType.CallHost(args.host);
            } if (args.dialing !== undefined && args.dialing !== null) {
                this.dialing = new lineType.PaidCallDialing(args.dialing);
            } if (args.token !== undefined && args.token !== null) {
                this.token = args.token;
            } if (args.spotItems !== undefined && args.spotItems !== null) {
                this.spotItems = Thrift.copyList(args.spotItems, [lineType.SpotItem]);
            }
        }
    }
};
lineType.PaidCallUserRate = class {
    constructor(args) {
        this.countryCode = null;
        this.rate = null;
        this.rateDivision = null;
        this.rateName = null;
        if (args) {
            if (args.countryCode !== undefined && args.countryCode !== null) {
                this.countryCode = args.countryCode;
            } if (args.rate !== undefined && args.rate !== null) {
                this.rate = args.rate;
            } if (args.rateDivision !== undefined && args.rateDivision !== null) {
                this.rateDivision = args.rateDivision;
            } if (args.rateName !== undefined && args.rateName !== null) {
                this.rateName = args.rateName;
            }
        }
    }
};
lineType.ChannelInfo = class {
    constructor(args) {
        this.channelId = null;
        this.name = null;
        this.entryPageUrl = null;
        this.descriptionText = null;
        this.provider = null;
        this.publicType = null;
        this.iconImage = null;
        this.permissions = null;
        this.iconThumbnailImage = null;
        this.channelConfigurations = null;
        this.lcsAllApiUsable = null;
        this.allowedPermissions = null;
        this.channelDomains = null;
        this.updatedTimestamp = null;
        if (args) {
            if (args.channelId !== undefined && args.channelId !== null) {
                this.channelId = args.channelId;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.entryPageUrl !== undefined && args.entryPageUrl !== null) {
                this.entryPageUrl = args.entryPageUrl;
            } if (args.descriptionText !== undefined && args.descriptionText !== null) {
                this.descriptionText = args.descriptionText;
            } if (args.provider !== undefined && args.provider !== null) {
                this.provider = new lineType.ChannelProvider(args.provider);
            } if (args.publicType !== undefined && args.publicType !== null) {
                this.publicType = args.publicType;
            } if (args.iconImage !== undefined && args.iconImage !== null) {
                this.iconImage = args.iconImage;
            } if (args.permissions !== undefined && args.permissions !== null) {
                this.permissions = Thrift.copyList(args.permissions, [null]);
            } if (args.iconThumbnailImage !== undefined && args.iconThumbnailImage !== null) {
                this.iconThumbnailImage = args.iconThumbnailImage;
            } if (args.channelConfigurations !== undefined && args.channelConfigurations !== null) {
                this.channelConfigurations = Thrift.copyList(args.channelConfigurations, [null]);
            } if (args.lcsAllApiUsable !== undefined && args.lcsAllApiUsable !== null) {
                this.lcsAllApiUsable = args.lcsAllApiUsable;
            } if (args.allowedPermissions !== undefined && args.allowedPermissions !== null) {
                this.allowedPermissions = Thrift.copyList(args.allowedPermissions, [null]);
            } if (args.channelDomains !== undefined && args.channelDomains !== null) {
                this.channelDomains = Thrift.copyList(args.channelDomains, [lineType.ChannelDomain]);
            } if (args.updatedTimestamp !== undefined && args.updatedTimestamp !== null) {
                this.updatedTimestamp = args.updatedTimestamp;
            }
        }
    }
};
lineType.ApprovedChannelInfo = class {
    constructor(args) {
        this.channelInfo = null;
        this.approvedAt = null;
        if (args) {
            if (args.channelInfo !== undefined && args.channelInfo !== null) {
                this.channelInfo = new lineType.ChannelInfo(args.channelInfo);
            } if (args.approvedAt !== undefined && args.approvedAt !== null) {
                this.approvedAt = args.approvedAt;
            }
        }
    }
};
lineType.ApprovedChannelInfos = class {
    constructor(args) {
        this.approvedChannelInfos = null;
        this.revision = null;
        if (args) {
            if (args.approvedChannelInfos !== undefined && args.approvedChannelInfos !== null) {
                this.approvedChannelInfos = Thrift.copyList(args.approvedChannelInfos, [lineType.ApprovedChannelInfo]);
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.AuthQrcode = class {
    constructor(args) {
        this.qrcode = null;
        this.verifier = null;
        this.callbackUrl = null;
        if (args) {
            if (args.qrcode !== undefined && args.qrcode !== null) {
                this.qrcode = args.qrcode;
            } if (args.verifier !== undefined && args.verifier !== null) {
                this.verifier = args.verifier;
            } if (args.callbackUrl !== undefined && args.callbackUrl !== null) {
                this.callbackUrl = args.callbackUrl;
            }
        }
    }
};
lineType.AnalyticsInfo = class {
    constructor(args) {
        this.gaSamplingRate = null;
        this.tmid = null;
        if (args) {
            if (args.gaSamplingRate !== undefined && args.gaSamplingRate !== null) {
                this.gaSamplingRate = args.gaSamplingRate;
            } if (args.tmid !== undefined && args.tmid !== null) {
                this.tmid = args.tmid;
            }
        }
    }
};
lineType.ContactTransition = class {
    constructor(args) {
        this.ownerMid = null;
        this.targetMid = null;
        this.previousStatus = null;
        this.resultStatus = null;
        if (args) {
            if (args.ownerMid !== undefined && args.ownerMid !== null) {
                this.ownerMid = args.ownerMid;
            } if (args.targetMid !== undefined && args.targetMid !== null) {
                this.targetMid = args.targetMid;
            } if (args.previousStatus !== undefined && args.previousStatus !== null) {
                this.previousStatus = args.previousStatus;
            } if (args.resultStatus !== undefined && args.resultStatus !== null) {
                this.resultStatus = args.resultStatus;
            }
        }
    }
};
lineType.UserTicketResponse = class {
    constructor(args) {
        this.mid = null;
        this.userTicket = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.userTicket !== undefined && args.userTicket !== null) {
                this.userTicket = args.userTicket;
            }
        }
    }
};
lineType.BuddyBanner = class {
    constructor(args) {
        this.buddyBannerLinkType = null;
        this.buddyBannerLink = null;
        this.buddyBannerImageUrl = null;
        if (args) {
            if (args.buddyBannerLinkType !== undefined && args.buddyBannerLinkType !== null) {
                this.buddyBannerLinkType = args.buddyBannerLinkType;
            } if (args.buddyBannerLink !== undefined && args.buddyBannerLink !== null) {
                this.buddyBannerLink = args.buddyBannerLink;
            } if (args.buddyBannerImageUrl !== undefined && args.buddyBannerImageUrl !== null) {
                this.buddyBannerImageUrl = args.buddyBannerImageUrl;
            }
        }
    }
};
lineType.BuddyDetail = class {
    constructor(args) {
        this.mid = null;
        this.memberCount = null;
        this.onAir = null;
        this.businessAccount = null;
        this.addable = null;
        this.acceptableContenlineType = null;
        this.capableMyhome = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.memberCount !== undefined && args.memberCount !== null) {
                this.memberCount = args.memberCount;
            } if (args.onAir !== undefined && args.onAir !== null) {
                this.onAir = args.onAir;
            } if (args.businessAccount !== undefined && args.businessAccount !== null) {
                this.businessAccount = args.businessAccount;
            } if (args.addable !== undefined && args.addable !== null) {
                this.addable = args.addable;
            } if (args.acceptableContenlineType !== undefined && args.acceptableContenlineType !== null) {
                this.acceptableContenlineType = Thrift.copyList(args.acceptableContenlineType, [null]);
            } if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
                this.capableMyhome = args.capableMyhome;
            }
        }
    }
};
lineType.Contact = class {
    constructor(args) {
        this.mid = null;
        this.createdTime = null;
        this.type = null;
        this.status = null;
        this.relation = null;
        this.displayName = null;
        this.phoneticName = null;
        this.pictureStatus = null;
        this.thumbnailUrl = null;
        this.statusMessage = null;
        this.displayNameOverridden = null;
        this.favoriteTime = null;
        this.capableVoiceCall = null;
        this.capableVideoCall = null;
        this.capableMyhome = null;
        this.capableBuddy = null;
        this.attributes = null;
        this.settings = null;
        this.picturePath = null;
        this.recommendParams = null;
        this.friendRequestStatus = null;
        this.musicProfile = null;
        this.videoProfile = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.status !== undefined && args.status !== null) {
                this.status = args.status;
            } if (args.relation !== undefined && args.relation !== null) {
                this.relation = args.relation;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.phoneticName !== undefined && args.phoneticName !== null) {
                this.phoneticName = args.phoneticName;
            } if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
                this.pictureStatus = args.pictureStatus;
            } if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
                this.thumbnailUrl = args.thumbnailUrl;
            } if (args.statusMessage !== undefined && args.statusMessage !== null) {
                this.statusMessage = args.statusMessage;
            } if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
                this.displayNameOverridden = args.displayNameOverridden;
            } if (args.favoriteTime !== undefined && args.favoriteTime !== null) {
                this.favoriteTime = args.favoriteTime;
            } if (args.capableVoiceCall !== undefined && args.capableVoiceCall !== null) {
                this.capableVoiceCall = args.capableVoiceCall;
            } if (args.capableVideoCall !== undefined && args.capableVideoCall !== null) {
                this.capableVideoCall = args.capableVideoCall;
            } if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
                this.capableMyhome = args.capableMyhome;
            } if (args.capableBuddy !== undefined && args.capableBuddy !== null) {
                this.capableBuddy = args.capableBuddy;
            } if (args.attributes !== undefined && args.attributes !== null) {
                this.attributes = args.attributes;
            } if (args.settings !== undefined && args.settings !== null) {
                this.settings = args.settings;
            } if (args.picturePath !== undefined && args.picturePath !== null) {
                this.picturePath = args.picturePath;
            } if (args.recommendParams !== undefined && args.recommendParams !== null) {
                this.recommendParams = args.recommendParams;
            } if (args.friendRequestStatus !== undefined && args.friendRequestStatus !== null) {
                this.friendRequestStatus = args.friendRequestStatus;
            } if (args.musicProfile !== undefined && args.musicProfile !== null) {
                this.musicProfile = args.musicProfile;
            } if (args.videoProfile !== undefined && args.videoProfile !== null) {
                this.videoProfile = args.videoProfile;
            }
        }
    }
};
lineType.BuddyList = class {
    constructor(args) {
        this.classification = null;
        this.displayName = null;
        this.totalBuddyCount = null;
        this.popularContacts = null;
        if (args) {
            if (args.classification !== undefined && args.classification !== null) {
                this.classification = args.classification;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
                this.totalBuddyCount = args.totalBuddyCount;
            } if (args.popularContacts !== undefined && args.popularContacts !== null) {
                this.popularContacts = Thrift.copyList(args.popularContacts, [lineType.Contact]);
            }
        }
    }
};
lineType.RegisterWithPhoneNumberResult = class {
    constructor(args) {
        this.authToken = null;
        this.recommendEmailRegistration = null;
        this.certificate = null;
        if (args) {
            if (args.authToken !== undefined && args.authToken !== null) {
                this.authToken = args.authToken;
            } if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
                this.recommendEmailRegistration = args.recommendEmailRegistration;
            } if (args.certificate !== undefined && args.certificate !== null) {
                this.certificate = args.certificate;
            }
        }
    }
};
lineType.BuddyMessageRequest = class {
    constructor(args) {
        this.contentType = null;
        this.text = null;
        this.location = null;
        this.content = null;
        this.contentMetadata = null;
        if (args) {
            if (args.contentType !== undefined && args.contentType !== null) {
                this.contentType = args.contentType;
            } if (args.text !== undefined && args.text !== null) {
                this.text = args.text;
            } if (args.location !== undefined && args.location !== null) {
                this.location = new lineType.Location(args.location);
            } if (args.content !== undefined && args.content !== null) {
                this.content = args.content;
            } if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
                this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
            }
        }
    }
};
lineType.BuddyOnAirUrls = class {
    constructor(args) {
        this.hls = null;
        this.smoothStreaming = null;
        if (args) {
            if (args.hls !== undefined && args.hls !== null) {
                this.hls = Thrift.copyMap(args.hls, [null]);
            } if (args.smoothStreaming !== undefined && args.smoothStreaming !== null) {
                this.smoothStreaming = Thrift.copyMap(args.smoothStreaming, [null]);
            }
        }
    }
};
lineType.BuddyOnAir = class {
    constructor(args) {
        this.mid = null;
        this.freshnessLifetime = null;
        this.onAirId = null;
        this.onAir = null;
        this.text = null;
        this.viewerCount = null;
        this.targetCount = null;
        this.onAirType = null;
        this.onAirUrls = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.freshnessLifetime !== undefined && args.freshnessLifetime !== null) {
                this.freshnessLifetime = args.freshnessLifetime;
            } if (args.onAirId !== undefined && args.onAirId !== null) {
                this.onAirId = args.onAirId;
            } if (args.onAir !== undefined && args.onAir !== null) {
                this.onAir = args.onAir;
            } if (args.text !== undefined && args.text !== null) {
                this.text = args.text;
            } if (args.viewerCount !== undefined && args.viewerCount !== null) {
                this.viewerCount = args.viewerCount;
            } if (args.targetCount !== undefined && args.targetCount !== null) {
                this.targetCount = args.targetCount;
            } if (args.onAirType !== undefined && args.onAirType !== null) {
                this.onAirType = args.onAirType;
            } if (args.onAirUrls !== undefined && args.onAirUrls !== null) {
                this.onAirUrls = new lineType.BuddyOnAirUrls(args.onAirUrls);
            }
        }
    }
};
lineType.BuddyProfile = class {
    constructor(args) {
        this.buddyId = null;
        this.mid = null;
        this.searchId = null;
        this.displayName = null;
        this.statusMessage = null;
        this.contactCount = null;
        if (args) {
            if (args.buddyId !== undefined && args.buddyId !== null) {
                this.buddyId = args.buddyId;
            } if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.searchId !== undefined && args.searchId !== null) {
                this.searchId = args.searchId;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.statusMessage !== undefined && args.statusMessage !== null) {
                this.statusMessage = args.statusMessage;
            } if (args.contactCount !== undefined && args.contactCount !== null) {
                this.contactCount = args.contactCount;
            }
        }
    }
};
lineType.CommitMessageResult = class {
    constructor(args) {
        this.message = null;
        this.code = null;
        this.reason = null;
        this.successCount = null;
        this.failCount = null;
        this.unregisterCount = null;
        this.blockCount = null;
        if (args) {
            if (args.message !== undefined && args.message !== null) {
                this.message = new lineType.Message(args.message);
            } if (args.code !== undefined && args.code !== null) {
                this.code = args.code;
            } if (args.reason !== undefined && args.reason !== null) {
                this.reason = args.reason;
            } if (args.successCount !== undefined && args.successCount !== null) {
                this.successCount = args.successCount;
            } if (args.failCount !== undefined && args.failCount !== null) {
                this.failCount = args.failCount;
            } if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
                this.unregisterCount = args.unregisterCount;
            } if (args.blockCount !== undefined && args.blockCount !== null) {
                this.blockCount = args.blockCount;
            }
        }
    }
};
lineType.BuddySearchResult = class {
    constructor(args) {
        this.mid = null;
        this.displayName = null;
        this.pictureStatus = null;
        this.picturePath = null;
        this.statusMessage = null;
        this.businessAccount = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
                this.pictureStatus = args.pictureStatus;
            } if (args.picturePath !== undefined && args.picturePath !== null) {
                this.picturePath = args.picturePath;
            } if (args.statusMessage !== undefined && args.statusMessage !== null) {
                this.statusMessage = args.statusMessage;
            } if (args.businessAccount !== undefined && args.businessAccount !== null) {
                this.businessAccount = args.businessAccount;
            }
        }
    }
};
lineType.SyncParamMid = class {
    constructor(args) {
        this.mid = null;
        this.diff = null;
        this.revision = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.diff !== undefined && args.diff !== null) {
                this.diff = args.diff;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.SIMInfo = class {
    constructor(args) {
        this.phoneNumber = null;
        this.countryCode = null;
        if (args) {
            if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
                this.phoneNumber = args.phoneNumber;
            } if (args.countryCode !== undefined && args.countryCode !== null) {
                this.countryCode = args.countryCode;
            }
        }
    }
};
lineType.SyncParamContact = class {
    constructor(args) {
        this.syncParamMid = null;
        this.contactStatus = null;
        if (args) {
            if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
                this.syncParamMid = new lineType.SyncParamMid(args.syncParamMid);
            } if (args.contactStatus !== undefined && args.contactStatus !== null) {
                this.contactStatus = args.contactStatus;
            }
        }
    }
};
lineType.ChannelDomains = class {
    constructor(args) {
        this.channelDomains = null;
        this.revision = null;
        if (args) {
            if (args.channelDomains !== undefined && args.channelDomains !== null) {
                this.channelDomains = Thrift.copyList(args.channelDomains, [lineType.ChannelDomain]);
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.ProductCategory = class {
    constructor(args) {
        this.productCategoryId = null;
        this.title = null;
        this.productCount = null;
        this.newFlag = null;
        if (args) {
            if (args.productCategoryId !== undefined && args.productCategoryId !== null) {
                this.productCategoryId = args.productCategoryId;
            } if (args.title !== undefined && args.title !== null) {
                this.title = args.title;
            } if (args.productCount !== undefined && args.productCount !== null) {
                this.productCount = args.productCount;
            } if (args.newFlag !== undefined && args.newFlag !== null) {
                this.newFlag = args.newFlag;
            }
        }
    }
};
lineType.ChannelInfos = class {
    constructor(args) {
        this.channelInfos = null;
        this.revision = null;
        if (args) {
            if (args.channelInfos !== undefined && args.channelInfos !== null) {
                this.channelInfos = Thrift.copyList(args.channelInfos, [lineType.ChannelInfo]);
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.ChannelNotificationSetting = class {
    constructor(args) {
        this.channelId = null;
        this.name = null;
        this.notificationReceivable = null;
        this.messageReceivable = null;
        this.showDefault = null;
        if (args) {
            if (args.channelId !== undefined && args.channelId !== null) {
                this.channelId = args.channelId;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.notificationReceivable !== undefined && args.notificationReceivable !== null) {
                this.notificationReceivable = args.notificationReceivable;
            } if (args.messageReceivable !== undefined && args.messageReceivable !== null) {
                this.messageReceivable = args.messageReceivable;
            } if (args.showDefault !== undefined && args.showDefault !== null) {
                this.showDefault = args.showDefault;
            }
        }
    }
};
lineType.ChannelSyncDatas = class {
    constructor(args) {
        this.channelInfos = null;
        this.channelDomains = null;
        this.revision = null;
        this.expires = null;
        if (args) {
            if (args.channelInfos !== undefined && args.channelInfos !== null) {
                this.channelInfos = Thrift.copyList(args.channelInfos, [lineType.ChannelInfo]);
            } if (args.channelDomains !== undefined && args.channelDomains !== null) {
                this.channelDomains = Thrift.copyList(args.channelDomains, [lineType.ChannelDomain]);
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.expires !== undefined && args.expires !== null) {
                this.expires = args.expires;
            }
        }
    }
};
lineType.NotiCenterEventData = class {
    constructor(args) {
        this.id = null;
        this.to = null;
        this.from_ = null;
        this.toChannel = null;
        this.fromChannel = null;
        this.eventType = null;
        this.createdTime = null;
        this.operationRevision = null;
        this.content = null;
        this.push = null;
        if (args) {
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            } if (args.to !== undefined && args.to !== null) {
                this.to = args.to;
            } if (args.from_ !== undefined && args.from_ !== null) {
                this.from_ = args.from_;
            } if (args.toChannel !== undefined && args.toChannel !== null) {
                this.toChannel = args.toChannel;
            } if (args.fromChannel !== undefined && args.fromChannel !== null) {
                this.fromChannel = args.fromChannel;
            } if (args.eventType !== undefined && args.eventType !== null) {
                this.eventType = args.eventType;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.operationRevision !== undefined && args.operationRevision !== null) {
                this.operationRevision = args.operationRevision;
            } if (args.content !== undefined && args.content !== null) {
                this.content = Thrift.copyMap(args.content, [null]);
            } if (args.push !== undefined && args.push !== null) {
                this.push = Thrift.copyMap(args.push, [null]);
            }
        }
    }
};
lineType.ChannelToken = class {
    constructor(args) {
        this.token = null;
        this.obsToken = null;
        this.expiration = null;
        this.refreshToken = null;
        this.channelAccessToken = null;
        if (args) {
            if (args.token !== undefined && args.token !== null) {
                this.token = args.token;
            } if (args.obsToken !== undefined && args.obsToken !== null) {
                this.obsToken = args.obsToken;
            } if (args.expiration !== undefined && args.expiration !== null) {
                this.expiration = args.expiration;
            } if (args.refreshToken !== undefined && args.refreshToken !== null) {
                this.refreshToken = args.refreshToken;
            } if (args.channelAccessToken !== undefined && args.channelAccessToken !== null) {
                this.channelAccessToken = args.channelAccessToken;
            }
        }
    }
};
lineType.ChannelSettings = class {
    constructor(args) {
        this.unapprovedMessageReceivable = null;
        if (args) {
            if (args.unapprovedMessageReceivable !== undefined && args.unapprovedMessageReceivable !== null) {
                this.unapprovedMessageReceivable = args.unapprovedMessageReceivable;
            }
        }
    }
};
lineType.ChannelIdWithLastUpdated = class {
    constructor(args) {
        this.channelId = null;
        this.lastUpdated = null;
        if (args) {
            if (args.channelId !== undefined && args.channelId !== null) {
                this.channelId = args.channelId;
            } if (args.lastUpdated !== undefined && args.lastUpdated !== null) {
                this.lastUpdated = args.lastUpdated;
            }
        }
    }
};
lineType.Coin = class {
    constructor(args) {
        this.freeCoinBalance = null;
        this.payedCoinBalance = null;
        this.totalCoinBalance = null;
        this.rewardCoinBalance = null;
        if (args) {
            if (args.freeCoinBalance !== undefined && args.freeCoinBalance !== null) {
                this.freeCoinBalance = args.freeCoinBalance;
            } if (args.payedCoinBalance !== undefined && args.payedCoinBalance !== null) {
                this.payedCoinBalance = args.payedCoinBalance;
            } if (args.totalCoinBalance !== undefined && args.totalCoinBalance !== null) {
                this.totalCoinBalance = args.totalCoinBalance;
            } if (args.rewardCoinBalance !== undefined && args.rewardCoinBalance !== null) {
                this.rewardCoinBalance = args.rewardCoinBalance;
            }
        }
    }
};
lineType.CoinPayLoad = class {
    constructor(args) {
        this.payCoin = null;
        this.freeCoin = null;
        this.type = null;
        this.rewardCoin = null;
        if (args) {
            if (args.payCoin !== undefined && args.payCoin !== null) {
                this.payCoin = args.payCoin;
            } if (args.freeCoin !== undefined && args.freeCoin !== null) {
                this.freeCoin = args.freeCoin;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.rewardCoin !== undefined && args.rewardCoin !== null) {
                this.rewardCoin = args.rewardCoin;
            }
        }
    }
};
lineType.CoinHistory = class {
    constructor(args) {
        this.payDate = null;
        this.coinBalance = null;
        this.coin = null;
        this.price = null;
        this.title = null;
        this.refund = null;
        this.paySeq = null;
        this.currency = null;
        this.currencySign = null;
        this.displayPrice = null;
        this.payload = null;
        this.channelId = null;
        if (args) {
            if (args.payDate !== undefined && args.payDate !== null) {
                this.payDate = args.payDate;
            } if (args.coinBalance !== undefined && args.coinBalance !== null) {
                this.coinBalance = args.coinBalance;
            } if (args.coin !== undefined && args.coin !== null) {
                this.coin = args.coin;
            } if (args.price !== undefined && args.price !== null) {
                this.price = args.price;
            } if (args.title !== undefined && args.title !== null) {
                this.title = args.title;
            } if (args.refund !== undefined && args.refund !== null) {
                this.refund = args.refund;
            } if (args.paySeq !== undefined && args.paySeq !== null) {
                this.paySeq = args.paySeq;
            } if (args.currency !== undefined && args.currency !== null) {
                this.currency = args.currency;
            } if (args.currencySign !== undefined && args.currencySign !== null) {
                this.currencySign = args.currencySign;
            } if (args.displayPrice !== undefined && args.displayPrice !== null) {
                this.displayPrice = args.displayPrice;
            } if (args.payload !== undefined && args.payload !== null) {
                this.payload = new lineType.CoinPayLoad(args.payload);
            } if (args.channelId !== undefined && args.channelId !== null) {
                this.channelId = args.channelId;
            }
        }
    }
};
lineType.CoinHistoryCondition = class {
    constructor(args) {
        this.start = null;
        this.size = null;
        this.language = null;
        this.eddt = null;
        this.appStoreCode = null;
        if (args) {
            if (args.start !== undefined && args.start !== null) {
                this.start = args.start;
            } if (args.size !== undefined && args.size !== null) {
                this.size = args.size;
            } if (args.language !== undefined && args.language !== null) {
                this.language = args.language;
            } if (args.eddt !== undefined && args.eddt !== null) {
                this.eddt = args.eddt;
            } if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
                this.appStoreCode = args.appStoreCode;
            }
        }
    }
};
lineType.CoinHistoryResult = class {
    constructor(args) {
        this.historys = null;
        this.balance = null;
        this.hasNext = null;
        if (args) {
            if (args.historys !== undefined && args.historys !== null) {
                this.historys = Thrift.copyList(args.historys, [lineType.CoinHistory]);
            } if (args.balance !== undefined && args.balance !== null) {
                this.balance = new lineType.Coin(args.balance);
            } if (args.hasNext !== undefined && args.hasNext !== null) {
                this.hasNext = args.hasNext;
            }
        }
    }
};
lineType.CoinProductItem = class {
    constructor(args) {
        this.itemId = null;
        this.coin = null;
        this.freeCoin = null;
        this.currency = null;
        this.price = null;
        this.displayPrice = null;
        this.name = null;
        this.desc = null;
        if (args) {
            if (args.itemId !== undefined && args.itemId !== null) {
                this.itemId = args.itemId;
            } if (args.coin !== undefined && args.coin !== null) {
                this.coin = args.coin;
            } if (args.freeCoin !== undefined && args.freeCoin !== null) {
                this.freeCoin = args.freeCoin;
            } if (args.currency !== undefined && args.currency !== null) {
                this.currency = args.currency;
            } if (args.price !== undefined && args.price !== null) {
                this.price = args.price;
            } if (args.displayPrice !== undefined && args.displayPrice !== null) {
                this.displayPrice = args.displayPrice;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.desc !== undefined && args.desc !== null) {
                this.desc = args.desc;
            }
        }
    }
};
lineType.CoinPurchaseConfirm = class {
    constructor(args) {
        this.orderId = null;
        this.appStoreCode = null;
        this.receipt = null;
        this.signature = null;
        this.seller = null;
        this.requestType = null;
        this.ignoreReceipt = null;
        if (args) {
            if (args.orderId !== undefined && args.orderId !== null) {
                this.orderId = args.orderId;
            } if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
                this.appStoreCode = args.appStoreCode;
            } if (args.receipt !== undefined && args.receipt !== null) {
                this.receipt = args.receipt;
            } if (args.signature !== undefined && args.signature !== null) {
                this.signature = args.signature;
            } if (args.seller !== undefined && args.seller !== null) {
                this.seller = args.seller;
            } if (args.requestType !== undefined && args.requestType !== null) {
                this.requestType = args.requestType;
            } if (args.ignoreReceipt !== undefined && args.ignoreReceipt !== null) {
                this.ignoreReceipt = args.ignoreReceipt;
            }
        }
    }
};
lineType.CoinPurchaseReservation = class {
    constructor(args) {
        this.productId = null;
        this.country = null;
        this.currency = null;
        this.price = null;
        this.appStoreCode = null;
        this.language = null;
        this.pgCode = null;
        this.redirectUrl = null;
        if (args) {
            if (args.productId !== undefined && args.productId !== null) {
                this.productId = args.productId;
            } if (args.country !== undefined && args.country !== null) {
                this.country = args.country;
            } if (args.currency !== undefined && args.currency !== null) {
                this.currency = args.currency;
            } if (args.price !== undefined && args.price !== null) {
                this.price = args.price;
            } if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
                this.appStoreCode = args.appStoreCode;
            } if (args.language !== undefined && args.language !== null) {
                this.language = args.language;
            } if (args.pgCode !== undefined && args.pgCode !== null) {
                this.pgCode = args.pgCode;
            } if (args.redirectUrl !== undefined && args.redirectUrl !== null) {
                this.redirectUrl = args.redirectUrl;
            }
        }
    }
};
lineType.CoinUseReservationItem = class {
    constructor(args) {
        this.itemId = null;
        this.itemName = null;
        this.amount = null;
        if (args) {
            if (args.itemId !== undefined && args.itemId !== null) {
                this.itemId = args.itemId;
            } if (args.itemName !== undefined && args.itemName !== null) {
                this.itemName = args.itemName;
            } if (args.amount !== undefined && args.amount !== null) {
                this.amount = args.amount;
            }
        }
    }
};
lineType.CoinUseReservation = class {
    constructor(args) {
        this.channelId = null;
        this.shopOrderId = null;
        this.appStoreCode = null;
        this.items = null;
        this.country = null;
        if (args) {
            if (args.channelId !== undefined && args.channelId !== null) {
                this.channelId = args.channelId;
            } if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
                this.shopOrderId = args.shopOrderId;
            } if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
                this.appStoreCode = args.appStoreCode;
            } if (args.items !== undefined && args.items !== null) {
                this.items = Thrift.copyList(args.items, [lineType.CoinUseReservationItem]);
            } if (args.country !== undefined && args.country !== null) {
                this.country = args.country;
            }
        }
    }
};
lineType.CompactContact = class {
    constructor(args) {
        this.mid = null;
        this.createdTime = null;
        this.modifiedTime = null;
        this.status = null;
        this.settings = null;
        this.displayNameOverridden = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
                this.modifiedTime = args.modifiedTime;
            } if (args.status !== undefined && args.status !== null) {
                this.status = args.status;
            } if (args.settings !== undefined && args.settings !== null) {
                this.settings = args.settings;
            } if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
                this.displayNameOverridden = args.displayNameOverridden;
            }
        }
    }
};
lineType.ContactModification = class {
    constructor(args) {
        this.type = null;
        this.luid = null;
        this.phones = null;
        this.emails = null;
        this.userids = null;
        if (args) {
            if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.luid !== undefined && args.luid !== null) {
                this.luid = args.luid;
            } if (args.phones !== undefined && args.phones !== null) {
                this.phones = Thrift.copyList(args.phones, [null]);
            } if (args.emails !== undefined && args.emails !== null) {
                this.emails = Thrift.copyList(args.emails, [null]);
            } if (args.userids !== undefined && args.userids !== null) {
                this.userids = Thrift.copyList(args.userids, [null]);
            }
        }
    }
};
lineType.ContactRegistration = class {
    constructor(args) {
        this.contact = null;
        this.luid = null;
        this.contactType = null;
        this.contactKey = null;
        if (args) {
            if (args.contact !== undefined && args.contact !== null) {
                this.contact = new lineType.Contact(args.contact);
            } if (args.luid !== undefined && args.luid !== null) {
                this.luid = args.luid;
            } if (args.contactType !== undefined && args.contactType !== null) {
                this.contactType = args.contactType;
            } if (args.contactKey !== undefined && args.contactKey !== null) {
                this.contactKey = args.contactKey;
            }
        }
    }
};
lineType.ContactReport = class {
    constructor(args) {
        this.mid = null;
        this.exists = null;
        this.contact = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.exists !== undefined && args.exists !== null) {
                this.exists = args.exists;
            } if (args.contact !== undefined && args.contact !== null) {
                this.contact = new lineType.Contact(args.contact);
            }
        }
    }
};
lineType.ContactReportResult = class {
    constructor(args) {
        this.mid = null;
        this.exists = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.exists !== undefined && args.exists !== null) {
                this.exists = args.exists;
            }
        }
    }
};
lineType.DeviceInfo = class {
    constructor(args) {
        this.deviceName = null;
        this.systemName = null;
        this.systemVersion = null;
        this.model = null;
        this.carrierCode = null;
        this.carrierName = null;
        this.applicationType = null;
        if (args) {
            if (args.deviceName !== undefined && args.deviceName !== null) {
                this.deviceName = args.deviceName;
            } if (args.systemName !== undefined && args.systemName !== null) {
                this.systemName = args.systemName;
            } if (args.systemVersion !== undefined && args.systemVersion !== null) {
                this.systemVersion = args.systemVersion;
            } if (args.model !== undefined && args.model !== null) {
                this.model = args.model;
            } if (args.carrierCode !== undefined && args.carrierCode !== null) {
                this.carrierCode = args.carrierCode;
            } if (args.carrierName !== undefined && args.carrierName !== null) {
                this.carrierName = args.carrierName;
            } if (args.applicationType !== undefined && args.applicationType !== null) {
                this.applicationType = args.applicationType;
            }
        }
    }
};
lineType.EmailConfirmation = class {
    constructor(args) {
        this.usePasswordSet = null;
        this.email = null;
        this.password = null;
        this.ignoreDuplication = null;
        if (args) {
            if (args.usePasswordSet !== undefined && args.usePasswordSet !== null) {
                this.usePasswordSet = args.usePasswordSet;
            } if (args.email !== undefined && args.email !== null) {
                this.email = args.email;
            } if (args.password !== undefined && args.password !== null) {
                this.password = args.password;
            } if (args.ignoreDuplication !== undefined && args.ignoreDuplication !== null) {
                this.ignoreDuplication = args.ignoreDuplication;
            }
        }
    }
};
lineType.EmailConfirmationSession = class {
    constructor(args) {
        this.emailConfirmationType = null;
        this.verifier = null;
        this.targetEmail = null;
        if (args) {
            if (args.emailConfirmationType !== undefined && args.emailConfirmationType !== null) {
                this.emailConfirmationType = args.emailConfirmationType;
            } if (args.verifier !== undefined && args.verifier !== null) {
                this.verifier = args.verifier;
            } if (args.targetEmail !== undefined && args.targetEmail !== null) {
                this.targetEmail = args.targetEmail;
            }
        }
    }
};
lineType.FriendChannelMatrix = class {
    constructor(args) {
        this.channelId = null;
        this.representMid = null;
        this.count = null;
        this.point = null;
        if (args) {
            if (args.channelId !== undefined && args.channelId !== null) {
                this.channelId = args.channelId;
            } if (args.representMid !== undefined && args.representMid !== null) {
                this.representMid = args.representMid;
            } if (args.count !== undefined && args.count !== null) {
                this.count = args.count;
            } if (args.point !== undefined && args.point !== null) {
                this.point = args.point;
            }
        }
    }
};
lineType.FriendChannelMatricesResponse = class {
    constructor(args) {
        this.expires = null;
        this.matrices = null;
        if (args) {
            if (args.expires !== undefined && args.expires !== null) {
                this.expires = args.expires;
            } if (args.matrices !== undefined && args.matrices !== null) {
                this.matrices = Thrift.copyList(args.matrices, [lineType.FriendChannelMatrix]);
            }
        }
    }
};
lineType.FriendRequest = class {
    constructor(args) {
        this.eMid = null;
        this.mid = null;
        this.direction = null;
        this.method = null;
        this.param = null;
        this.timestamp = null;
        this.seqId = null;
        this.displayName = null;
        this.picturePath = null;
        this.pictureStatus = null;
        if (args) {
            if (args.eMid !== undefined && args.eMid !== null) {
                this.eMid = args.eMid;
            } if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.direction !== undefined && args.direction !== null) {
                this.direction = args.direction;
            } if (args.method !== undefined && args.method !== null) {
                this.method = args.method;
            } if (args.param !== undefined && args.param !== null) {
                this.param = args.param;
            } if (args.timestamp !== undefined && args.timestamp !== null) {
                this.timestamp = args.timestamp;
            } if (args.seqId !== undefined && args.seqId !== null) {
                this.seqId = args.seqId;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.picturePath !== undefined && args.picturePath !== null) {
                this.picturePath = args.picturePath;
            } if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
                this.pictureStatus = args.pictureStatus;
            }
        }
    }
};
lineType.FriendRequestsInfo = class {
    constructor(args) {
        this.totalIncomingCount = null;
        this.totalOutgoingCount = null;
        this.recentIncomings = null;
        this.recentOutgoings = null;
        this.totalIncomingLimit = null;
        this.totalOutgoingLimit = null;
        if (args) {
            if (args.totalIncomingCount !== undefined && args.totalIncomingCount !== null) {
                this.totalIncomingCount = args.totalIncomingCount;
            } if (args.totalOutgoingCount !== undefined && args.totalOutgoingCount !== null) {
                this.totalOutgoingCount = args.totalOutgoingCount;
            } if (args.recentIncomings !== undefined && args.recentIncomings !== null) {
                this.recentIncomings = Thrift.copyList(args.recentIncomings, [lineType.FriendRequest]);
            } if (args.recentOutgoings !== undefined && args.recentOutgoings !== null) {
                this.recentOutgoings = Thrift.copyList(args.recentOutgoings, [lineType.FriendRequest]);
            } if (args.totalIncomingLimit !== undefined && args.totalIncomingLimit !== null) {
                this.totalIncomingLimit = args.totalIncomingLimit;
            } if (args.totalOutgoingLimit !== undefined && args.totalOutgoingLimit !== null) {
                this.totalOutgoingLimit = args.totalOutgoingLimit;
            }
        }
    }
};
lineType.Geolocation = class {
    constructor(args) {
        this.longitude = null;
        this.latitude = null;
        if (args) {
            if (args.longitude !== undefined && args.longitude !== null) {
                this.longitude = args.longitude;
            } if (args.latitude !== undefined && args.latitude !== null) {
                this.latitude = args.latitude;
            }
        }
    }
};
lineType.NotificationTarget = class {
    constructor(args) {
        this.applicationType = null;
        this.applicationVersion = null;
        this.region = null;
        if (args) {
            if (args.applicationType !== undefined && args.applicationType !== null) {
                this.applicationType = args.applicationType;
            } if (args.applicationVersion !== undefined && args.applicationVersion !== null) {
                this.applicationVersion = args.applicationVersion;
            } if (args.region !== undefined && args.region !== null) {
                this.region = args.region;
            }
        }
    }
};
lineType.GlobalEvent = class {
    constructor(args) {
        this.key = null;
        this.targets = null;
        this.createdTime = null;
        this.data = null;
        this.maxDelay = null;
        if (args) {
            if (args.key !== undefined && args.key !== null) {
                this.key = args.key;
            } if (args.targets !== undefined && args.targets !== null) {
                this.targets = Thrift.copyList(args.targets, [lineType.NotificationTarget]);
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.data !== undefined && args.data !== null) {
                this.data = args.data;
            } if (args.maxDelay !== undefined && args.maxDelay !== null) {
                this.maxDelay = args.maxDelay;
            }
        }
    }
};
lineType.GroupPreference = class {
    constructor(args) {
        this.invitationTicket = null;
        this.favoriteTimestamp = null;
        if (args) {
            if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
                this.invitationTicket = args.invitationTicket;
            } if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
                this.favoriteTimestamp = args.favoriteTimestamp;
            }
        }
    }
};
lineType.Group = class {
    constructor(args) {
        this.id = null;
        this.createdTime = null;
        this.name = null;
        this.pictureStatus = null;
        this.preventedJoinByTicket = null;
        this.groupPreference = null;
        this.members = null;
        this.creator = null;
        this.invitee = null;
        this.notificationDisabled = null;
        if (args) {
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
                this.pictureStatus = args.pictureStatus;
            } if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
                this.preventedJoinByTicket = args.preventedJoinByTicket;
            } if (args.groupPreference !== undefined && args.groupPreference !== null) {
                this.groupPreference = new lineType.GroupPreference(args.groupPreference);
            } if (args.members !== undefined && args.members !== null) {
                this.members = Thrift.copyList(args.members, [lineType.Contact]);
            } if (args.creator !== undefined && args.creator !== null) {
                this.creator = new lineType.Contact(args.creator);
            } if (args.invitee !== undefined && args.invitee !== null) {
                this.invitee = Thrift.copyList(args.invitee, [lineType.Contact]);
            } if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
                this.notificationDisabled = args.notificationDisabled;
            }
        }
    }
};
lineType.IdentityCredential = class {
    constructor(args) {
        this.provider = null;
        this.identifier = null;
        this.password = null;
        if (args) {
            if (args.provider !== undefined && args.provider !== null) {
                this.provider = args.provider;
            } if (args.identifier !== undefined && args.identifier !== null) {
                this.identifier = args.identifier;
            } if (args.password !== undefined && args.password !== null) {
                this.password = args.password;
            }
        }
    }
};
lineType.LastReadMessageId = class {
    constructor(args) {
        this.mid = null;
        this.lastReadMessageId = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.lastReadMessageId !== undefined && args.lastReadMessageId !== null) {
                this.lastReadMessageId = args.lastReadMessageId;
            }
        }
    }
};
lineType.LastReadMessageIds = class {
    constructor(args) {
        this.chatId = null;
        this.lastReadMessageIds = null;
        if (args) {
            if (args.chatId !== undefined && args.chatId !== null) {
                this.chatId = args.chatId;
            } if (args.lastReadMessageIds !== undefined && args.lastReadMessageIds !== null) {
                this.lastReadMessageIds = Thrift.copyList(args.lastReadMessageIds, [lineType.LastReadMessageId]);
            }
        }
    }
};
lineType.VerificationSessionData = class {
    constructor(args) {
        this.sessionId = null;
        this.method = null;
        this.callback = null;
        this.normalizedPhone = null;
        this.countryCode = null;
        this.nationalSignificantNumber = null;
        this.availableVerificationMethods = null;
        if (args) {
            if (args.sessionId !== undefined && args.sessionId !== null) {
                this.sessionId = args.sessionId;
            } if (args.method !== undefined && args.method !== null) {
                this.method = args.method;
            } if (args.callback !== undefined && args.callback !== null) {
                this.callback = args.callback;
            } if (args.normalizedPhone !== undefined && args.normalizedPhone !== null) {
                this.normalizedPhone = args.normalizedPhone;
            } if (args.countryCode !== undefined && args.countryCode !== null) {
                this.countryCode = args.countryCode;
            } if (args.nationalSignificantNumber !== undefined && args.nationalSignificantNumber !== null) {
                this.nationalSignificantNumber = args.nationalSignificantNumber;
            } if (args.availableVerificationMethods !== undefined && args.availableVerificationMethods !== null) {
                this.availableVerificationMethods = Thrift.copyList(args.availableVerificationMethods, [null]);
            }
        }
    }
};
lineType.LoginResult = class {
    constructor(args) {
        this.authToken = null;
        this.certificate = null;
        this.verifier = null;
        this.pinCode = null;
        this.type = null;
        this.lastPrimaryBindTime = null;
        this.displayMessage = null;
        this.sessionForSMSConfirm = null;
        if (args) {
            if (args.authToken !== undefined && args.authToken !== null) {
                this.authToken = args.authToken;
            } if (args.certificate !== undefined && args.certificate !== null) {
                this.certificate = args.certificate;
            } if (args.verifier !== undefined && args.verifier !== null) {
                this.verifier = args.verifier;
            } if (args.pinCode !== undefined && args.pinCode !== null) {
                this.pinCode = args.pinCode;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.lastPrimaryBindTime !== undefined && args.lastPrimaryBindTime !== null) {
                this.lastPrimaryBindTime = args.lastPrimaryBindTime;
            } if (args.displayMessage !== undefined && args.displayMessage !== null) {
                this.displayMessage = args.displayMessage;
            } if (args.sessionForSMSConfirm !== undefined && args.sessionForSMSConfirm !== null) {
                this.sessionForSMSConfirm = new lineType.VerificationSessionData(args.sessionForSMSConfirm);
            }
        }
    }
};
lineType.LoginRequest = class {
    constructor(args) {
        this.type = null;
        this.identityProvider = null;
        this.identifier = null;
        this.password = null;
        this.keepLoggedIn = null;
        this.accessLocation = null;
        this.systemName = null;
        this.certificate = null;
        this.verifier = null;
        this.secret = null;
        this.e2eeVersion = null;
        if (args) {
            if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.identityProvider !== undefined && args.identityProvider !== null) {
                this.identityProvider = args.identityProvider;
            } if (args.identifier !== undefined && args.identifier !== null) {
                this.identifier = args.identifier;
            } if (args.password !== undefined && args.password !== null) {
                this.password = args.password;
            } if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
                this.keepLoggedIn = args.keepLoggedIn;
            } if (args.accessLocation !== undefined && args.accessLocation !== null) {
                this.accessLocation = args.accessLocation;
            } if (args.systemName !== undefined && args.systemName !== null) {
                this.systemName = args.systemName;
            } if (args.certificate !== undefined && args.certificate !== null) {
                this.certificate = args.certificate;
            } if (args.verifier !== undefined && args.verifier !== null) {
                this.verifier = args.verifier;
            } if (args.secret !== undefined && args.secret !== null) {
                this.secret = args.secret;
            } if (args.e2eeVersion !== undefined && args.e2eeVersion !== null) {
                this.e2eeVersion = args.e2eeVersion;
            }
        }
    }
};
lineType.LoginSession = class {
    constructor(args) {
        this.tokenKey = null;
        this.expirationTime = null;
        this.applicationType = null;
        this.systemName = null;
        this.accessLocation = null;
        if (args) {
            if (args.tokenKey !== undefined && args.tokenKey !== null) {
                this.tokenKey = args.tokenKey;
            } if (args.expirationTime !== undefined && args.expirationTime !== null) {
                this.expirationTime = args.expirationTime;
            } if (args.applicationType !== undefined && args.applicationType !== null) {
                this.applicationType = args.applicationType;
            } if (args.systemName !== undefined && args.systemName !== null) {
                this.systemName = args.systemName;
            } if (args.accessLocation !== undefined && args.accessLocation !== null) {
                this.accessLocation = args.accessLocation;
            }
        }
    }
};
lineType.Message = class {
    constructor(args) {
        this._from = null;
        this.to = null;
        this.toType = null;
        this.id = null;
        this.createdTime = null;
        this.deliveredTime = null;
        this.text = null;
        this.location = null;
        this.hasContent = null;
        this.contentType = null;
        this.contentPreview = null;
        this.contentMetadata = {};
        this.sessionId = null;
        this.chunks = null;
        this.relatedMessageId = null;
        this.messageRelationType = null;
        this.readCount = null;
        this.relatedMessageServiceCode = null;
        if (args) {
            if (args._from !== undefined && args._from !== null) {
                this._from = args._from;
            } if (args.to !== undefined && args.to !== null) {
                this.to = args.to;
            } if (args.toType !== undefined && args.toType !== null) {
                this.toType = args.toType;
            } if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                if (typeof args.createdTime=="object") {
                    this.createdTime =Thrift.bin2int(args.createdTime.buffer)
                } else {
                    this.createdTime = args.createdTime;
                }
            } if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
                if (typeof args.deliveredTime=="object") {
                    this.deliveredTime =Thrift.bin2int(args.deliveredTime.buffer)
                } else {
                    this.deliveredTime = args.deliveredTime;
                }
                
            } if (args.text !== undefined && args.text !== null) {
                this.text = args.text;
            } if (args.location !== undefined && args.location !== null) {
                this.location = new lineType.Location(args.location);
            } if (args.hasContent !== undefined && args.hasContent !== null) {
                this.hasContent = args.hasContent;
            } if (args.contentType !== undefined && args.contentType !== null) {
                this.contentType = args.contentType;
            } else{
                this.contentType = 0
            } if (args.contentPreview !== undefined && args.contentPreview !== null) {
                this.contentPreview = args.contentPreview;
            } if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
                this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
            } if (args.sessionId !== undefined && args.sessionId !== null) {
                this.sessionId = args.sessionId;
            } if (args.chunks !== undefined && args.chunks !== null) {
                this.chunks = Thrift.copyList(args.chunks, [null]);
            } if (args.relatedMessageId !== undefined && args.relatedMessageId !== null) {
                this.relatedMessageId = args.relatedMessageId;
            } if (args.messageRelationType !== undefined && args.messageRelationType !== null) {
                this.messageRelationType = args.messageRelationType;
            } if (args.readCount !== undefined && args.readCount !== null) {
                this.readCount = args.readCount;
            } if (args.relatedMessageServiceCode !== undefined && args.relatedMessageServiceCode !== null) {
                this.relatedMessageServiceCode = args.relatedMessageServiceCode;
            }
        }
    }
};
lineType.SquareMessage = class {
    constructor(args) {
        this.message = null;
        this.fromType = null;
        this.squareMessageRevision = null;
        if (args) {
            if (args.message !== undefined && args.message !== null) {
                this.message = new lineType.Message(args.message);
            } if (args.fromType !== undefined && args.fromType !== null) {
                this.fromType = args.fromType;
            } if (args.squareMessageRevision !== undefined && args.squareMessageRevision !== null) {
                this.squareMessageRevision = args.squareMessageRevision;
            }
        }
    }
};
lineType.SquareChatStatusWithoutMessage = class {
    constructor(args) {
        this.memberCount = null;
        this.unreadMessageCount = null;
        if (args) {
            if (args.memberCount !== undefined && args.memberCount !== null) {
                this.memberCount = args.memberCount;
            } if (args.unreadMessageCount !== undefined && args.unreadMessageCount !== null) {
                this.unreadMessageCount = args.unreadMessageCount;
            }
        }
    }
};
lineType.SquareChatStatus = class {
    constructor(args) {
        this.lastMessage = null;
        this.senderDisplayName = null;
        this.otherStatus = null;
        if (args) {
            if (args.lastMessage !== undefined && args.lastMessage !== null) {
                this.lastMessage = new lineType.SquareMessage(args.lastMessage);
            } if (args.senderDisplayName !== undefined && args.senderDisplayName !== null) {
                this.senderDisplayName = args.senderDisplayName;
            } if (args.otherStatus !== undefined && args.otherStatus !== null) {
                this.otherStatus = new lineType.SquareChatStatusWithoutMessage(args.otherStatus);
            }
        }
    }
};
lineType.SquareChatMember = class {
    constructor(args) {
        this.squareMemberMid = null;
        this.squareChatMid = null;
        this.revision = null;
        this.membershipState = null;
        this.notificationForMessage = null;
        if (args) {
            if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.membershipState !== undefined && args.membershipState !== null) {
                this.membershipState = args.membershipState;
            } if (args.notificationForMessage !== undefined && args.notificationForMessage !== null) {
                this.notificationForMessage = args.notificationForMessage;
            }
        }
    }
};
lineType.MessageOperation = class {
    constructor(args) {
        this.revision = null;
        this.createdTime = null;
        this.type = null;
        this.reqSeq = null;
        this.status = null;
        this.param1 = null;
        this.param2 = null;
        this.param3 = null;
        this.message = null;
        if (args) {
            if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.reqSeq !== undefined && args.reqSeq !== null) {
                this.reqSeq = args.reqSeq;
            } if (args.status !== undefined && args.status !== null) {
                this.status = args.status;
            } if (args.param1 !== undefined && args.param1 !== null) {
                this.param1 = args.param1;
            } if (args.param2 !== undefined && args.param2 !== null) {
                this.param2 = args.param2;
            } if (args.param3 !== undefined && args.param3 !== null) {
                this.param3 = args.param3;
            } if (args.message !== undefined && args.message !== null) {
                this.message = new lineType.Message(args.message);
            }
        }
    }
};
lineType.MessageOperations = class {
    constructor(args) {
        this.operations = null;
        this.endFlag = null;
        if (args) {
            if (args.operations !== undefined && args.operations !== null) {
                this.operations = Thrift.copyList(args.operations, [lineType.MessageOperation]);
            } if (args.endFlag !== undefined && args.endFlag !== null) {
                this.endFlag = args.endFlag;
            }
        }
    }
};
lineType.MessageStoreResult = class {
    constructor(args) {
        this.requestId = null;
        this.messageIds = null;
        if (args) {
            if (args.requestId !== undefined && args.requestId !== null) {
                this.requestId = args.requestId;
            } if (args.messageIds !== undefined && args.messageIds !== null) {
                this.messageIds = Thrift.copyList(args.messageIds, [null]);
            }
        }
    }
};
lineType.MetaProfile = class {
    constructor(args) {
        this.createTime = null;
        this.regionCode = null;
        this.identities = null;
        if (args) {
            if (args.createTime !== undefined && args.createTime !== null) {
                this.createTime = args.createTime;
            } if (args.regionCode !== undefined && args.regionCode !== null) {
                this.regionCode = args.regionCode;
            } if (args.identities !== undefined && args.identities !== null) {
                this.identities = Thrift.copyMap(args.identities, [null]);
            }
        }
    }
};
lineType.NotificationItem = class {
    constructor(args) {
        this.id = null;
        this._from = null;
        this.to = null;
        this.fromChannel = null;
        this.toChannel = null;
        this.revision = null;
        this.createdTime = null;
        this.content = null;
        if (args) {
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            } if (args._from !== undefined && args._from !== null) {
                this._from = args._from;
            } if (args.to !== undefined && args.to !== null) {
                this.to = args.to;
            } if (args.fromChannel !== undefined && args.fromChannel !== null) {
                this.fromChannel = args.fromChannel;
            } if (args.toChannel !== undefined && args.toChannel !== null) {
                this.toChannel = args.toChannel;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.content !== undefined && args.content !== null) {
                this.content = Thrift.copyMap(args.content, [null]);
            }
        }
    }
};
lineType.NotificationFetchResult = class {
    constructor(args) {
        this.fetchMode = null;
        this.itemList = null;
        if (args) {
            if (args.fetchMode !== undefined && args.fetchMode !== null) {
                this.fetchMode = args.fetchMode;
            } if (args.itemList !== undefined && args.itemList !== null) {
                this.itemList = Thrift.copyList(args.itemList, [lineType.NotificationItem]);
            }
        }
    }
};
lineType.Operation = class {
    constructor(args) {
        this.revision = null;
        this.createdTime = null;
        this.type = null;
        this.reqSeq = null;
        this.checksum = null;
        this.status = null;
        this.param1 = null;
        this.param2 = null;
        this.param3 = null;
        this.message = null;
        if (args) {
            if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.reqSeq !== undefined && args.reqSeq !== null) {
                this.reqSeq = args.reqSeq;
            } if (args.checksum !== undefined && args.checksum !== null) {
                this.checksum = args.checksum;
            } if (args.status !== undefined && args.status !== null) {
                this.status = args.status;
            } if (args.param1 !== undefined && args.param1 !== null) {
                this.param1 = args.param1;
            } if (args.param2 !== undefined && args.param2 !== null) {
                this.param2 = args.param2;
            } if (args.param3 !== undefined && args.param3 !== null) {
                this.param3 = args.param3;
            } if (args.message !== undefined && args.message !== null) {
                this.message = new lineType.Message(args.message);
            }
        }
    }
};
lineType.PaymentReservation = class {
    constructor(args) {
        this.receiverMid = null;
        this.productId = null;
        this.language = null;
        this.location = null;
        this.currency = null;
        this.price = null;
        this.appStoreCode = null;
        this.messageText = null;
        this.messageTemplate = null;
        this.packageId = null;
        if (args) {
            if (args.receiverMid !== undefined && args.receiverMid !== null) {
                this.receiverMid = args.receiverMid;
            } if (args.productId !== undefined && args.productId !== null) {
                this.productId = args.productId;
            } if (args.language !== undefined && args.language !== null) {
                this.language = args.language;
            } if (args.location !== undefined && args.location !== null) {
                this.location = args.location;
            } if (args.currency !== undefined && args.currency !== null) {
                this.currency = args.currency;
            } if (args.price !== undefined && args.price !== null) {
                this.price = args.price;
            } if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
                this.appStoreCode = args.appStoreCode;
            } if (args.messageText !== undefined && args.messageText !== null) {
                this.messageText = args.messageText;
            } if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
                this.messageTemplate = args.messageTemplate;
            } if (args.packageId !== undefined && args.packageId !== null) {
                this.packageId = args.packageId;
            }
        }
    }
};
lineType.PaymentReservationResult = class {
    constructor(args) {
        this.orderId = null;
        this.confirmUrl = null;
        this.extras = null;
        if (args) {
            if (args.orderId !== undefined && args.orderId !== null) {
                this.orderId = args.orderId;
            } if (args.confirmUrl !== undefined && args.confirmUrl !== null) {
                this.confirmUrl = args.confirmUrl;
            } if (args.extras !== undefined && args.extras !== null) {
                this.extras = Thrift.copyMap(args.extras, [null]);
            }
        }
    }
};
lineType.Product = class {
    constructor(args) {
        this.productId = null;
        this.packageId = null;
        this.version = null;
        this.authorName = null;
        this.onSale = null;
        this.validDays = null;
        this.saleType = null;
        this.copyright = null;
        this.title = null;
        this.descriptionText = null;
        this.shopOrderId = null;
        this.fromMid = null;
        this.toMid = null;
        this.validUntil = null;
        this.priceTier = null;
        this.price = null;
        this.currency = null;
        this.currencySymbol = null;
        this.paymentType = null;
        this.createDate = null;
        this.ownFlag = null;
        this.eventType = null;
        this.urlSchema = null;
        this.downloadUrl = null;
        this.buddyMid = null;
        this.publishSince = null;
        this.newFlag = null;
        this.missionFlag = null;
        this.categories = null;
        this.missionButtonText = null;
        this.missionShortDescription = null;
        this.authorId = null;
        this.grantedByDefault = null;
        this.displayOrder = null;
        this.availableForPresent = null;
        this.availableForMyself = null;
        this.hasAnimation = null;
        this.hasSound = null;
        this.recommendationsEnabled = null;
        this.stickerResourceType = null;
        if (args) {
            if (args.productId !== undefined && args.productId !== null) {
                this.productId = args.productId;
            } if (args.packageId !== undefined && args.packageId !== null) {
                this.packageId = args.packageId;
            } if (args.version !== undefined && args.version !== null) {
                this.version = args.version;
            } if (args.authorName !== undefined && args.authorName !== null) {
                this.authorName = args.authorName;
            } if (args.onSale !== undefined && args.onSale !== null) {
                this.onSale = args.onSale;
            } if (args.validDays !== undefined && args.validDays !== null) {
                this.validDays = args.validDays;
            } if (args.saleType !== undefined && args.saleType !== null) {
                this.saleType = args.saleType;
            } if (args.copyright !== undefined && args.copyright !== null) {
                this.copyright = args.copyright;
            } if (args.title !== undefined && args.title !== null) {
                this.title = args.title;
            } if (args.descriptionText !== undefined && args.descriptionText !== null) {
                this.descriptionText = args.descriptionText;
            } if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
                this.shopOrderId = args.shopOrderId;
            } if (args.fromMid !== undefined && args.fromMid !== null) {
                this.fromMid = args.fromMid;
            } if (args.toMid !== undefined && args.toMid !== null) {
                this.toMid = args.toMid;
            } if (args.validUntil !== undefined && args.validUntil !== null) {
                this.validUntil = args.validUntil;
            } if (args.priceTier !== undefined && args.priceTier !== null) {
                this.priceTier = args.priceTier;
            } if (args.price !== undefined && args.price !== null) {
                this.price = args.price;
            } if (args.currency !== undefined && args.currency !== null) {
                this.currency = args.currency;
            } if (args.currencySymbol !== undefined && args.currencySymbol !== null) {
                this.currencySymbol = args.currencySymbol;
            } if (args.paymentType !== undefined && args.paymentType !== null) {
                this.paymentType = args.paymentType;
            } if (args.createDate !== undefined && args.createDate !== null) {
                this.createDate = args.createDate;
            } if (args.ownFlag !== undefined && args.ownFlag !== null) {
                this.ownFlag = args.ownFlag;
            } if (args.eventType !== undefined && args.eventType !== null) {
                this.eventType = args.eventType;
            } if (args.urlSchema !== undefined && args.urlSchema !== null) {
                this.urlSchema = args.urlSchema;
            } if (args.downloadUrl !== undefined && args.downloadUrl !== null) {
                this.downloadUrl = args.downloadUrl;
            } if (args.buddyMid !== undefined && args.buddyMid !== null) {
                this.buddyMid = args.buddyMid;
            } if (args.publishSince !== undefined && args.publishSince !== null) {
                this.publishSince = args.publishSince;
            } if (args.newFlag !== undefined && args.newFlag !== null) {
                this.newFlag = args.newFlag;
            } if (args.missionFlag !== undefined && args.missionFlag !== null) {
                this.missionFlag = args.missionFlag;
            } if (args.categories !== undefined && args.categories !== null) {
                this.categories = Thrift.copyList(args.categories, [lineType.ProductCategory]);
            } if (args.missionButtonText !== undefined && args.missionButtonText !== null) {
                this.missionButtonText = args.missionButtonText;
            } if (args.missionShortDescription !== undefined && args.missionShortDescription !== null) {
                this.missionShortDescription = args.missionShortDescription;
            } if (args.authorId !== undefined && args.authorId !== null) {
                this.authorId = args.authorId;
            } if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
                this.grantedByDefault = args.grantedByDefault;
            } if (args.displayOrder !== undefined && args.displayOrder !== null) {
                this.displayOrder = args.displayOrder;
            } if (args.availableForPresent !== undefined && args.availableForPresent !== null) {
                this.availableForPresent = args.availableForPresent;
            } if (args.availableForMyself !== undefined && args.availableForMyself !== null) {
                this.availableForMyself = args.availableForMyself;
            } if (args.hasAnimation !== undefined && args.hasAnimation !== null) {
                this.hasAnimation = args.hasAnimation;
            } if (args.hasSound !== undefined && args.hasSound !== null) {
                this.hasSound = args.hasSound;
            } if (args.recommendationsEnabled !== undefined && args.recommendationsEnabled !== null) {
                this.recommendationsEnabled = args.recommendationsEnabled;
            } if (args.stickerResourceType !== undefined && args.stickerResourceType !== null) {
                this.stickerResourceType = args.stickerResourceType;
            }
        }
    }
};
lineType.ProductList = class {
    constructor(args) {
        this.hasNext = null;
        this.bannerSequence = null;
        this.bannerTargetType = null;
        this.bannerTargetPath = null;
        this.productList = null;
        this.bannerLang = null;
        if (args) {
            if (args.hasNext !== undefined && args.hasNext !== null) {
                this.hasNext = args.hasNext;
            } if (args.bannerSequence !== undefined && args.bannerSequence !== null) {
                this.bannerSequence = args.bannerSequence;
            } if (args.bannerTargetType !== undefined && args.bannerTargetType !== null) {
                this.bannerTargetType = args.bannerTargetType;
            } if (args.bannerTargetPath !== undefined && args.bannerTargetPath !== null) {
                this.bannerTargetPath = args.bannerTargetPath;
            } if (args.productList !== undefined && args.productList !== null) {
                this.productList = Thrift.copyList(args.productList, [lineType.Product]);
            } if (args.bannerLang !== undefined && args.bannerLang !== null) {
                this.bannerLang = args.bannerLang;
            }
        }
    }
};
lineType.StickerIdRange = class {
    constructor(args) {
        this.start = null;
        this.size = null;
        if (args) {
            if (args.start !== undefined && args.start !== null) {
                this.start = args.start;
            } if (args.size !== undefined && args.size !== null) {
                this.size = args.size;
            }
        }
    }
};
lineType.ProductSimple = class {
    constructor(args) {
        this.productId = null;
        this.packageId = null;
        this.version = null;
        this.onSale = null;
        this.validUntil = null;
        this.stickerIdRanges = null;
        this.grantedByDefault = null;
        this.displayOrder = null;
        if (args) {
            if (args.productId !== undefined && args.productId !== null) {
                this.productId = args.productId;
            } if (args.packageId !== undefined && args.packageId !== null) {
                this.packageId = args.packageId;
            } if (args.version !== undefined && args.version !== null) {
                this.version = args.version;
            } if (args.onSale !== undefined && args.onSale !== null) {
                this.onSale = args.onSale;
            } if (args.validUntil !== undefined && args.validUntil !== null) {
                this.validUntil = args.validUntil;
            } if (args.stickerIdRanges !== undefined && args.stickerIdRanges !== null) {
                this.stickerIdRanges = Thrift.copyList(args.stickerIdRanges, [lineType.StickerIdRange]);
            } if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
                this.grantedByDefault = args.grantedByDefault;
            } if (args.displayOrder !== undefined && args.displayOrder !== null) {
                this.displayOrder = args.displayOrder;
            }
        }
    }
};
lineType.ProductSimpleList = class {
    constructor(args) {
        this.hasNext = null;
        this.reinvokeHour = null;
        this.lastVersionSeq = null;
        this.productList = null;
        this.recentNewReleaseDate = null;
        this.recentEventReleaseDate = null;
        if (args) {
            if (args.hasNext !== undefined && args.hasNext !== null) {
                this.hasNext = args.hasNext;
            } if (args.reinvokeHour !== undefined && args.reinvokeHour !== null) {
                this.reinvokeHour = args.reinvokeHour;
            } if (args.lastVersionSeq !== undefined && args.lastVersionSeq !== null) {
                this.lastVersionSeq = args.lastVersionSeq;
            } if (args.productList !== undefined && args.productList !== null) {
                this.productList = Thrift.copyList(args.productList, [lineType.ProductSimple]);
            } if (args.recentNewReleaseDate !== undefined && args.recentNewReleaseDate !== null) {
                this.recentNewReleaseDate = args.recentNewReleaseDate;
            } if (args.recentEventReleaseDate !== undefined && args.recentEventReleaseDate !== null) {
                this.recentEventReleaseDate = args.recentEventReleaseDate;
            }
        }
    }
};
lineType.Profile = class {
    constructor(args) {
        this.mid = null;
        this.userid = null;
        this.phone = null;
        this.email = null;
        this.regionCode = null;
        this.displayName = null;
        this.phoneticName = null;
        this.pictureStatus = null;
        this.thumbnailUrl = null;
        this.statusMessage = null;
        this.allowSearchByUserid = null;
        this.allowSearchByEmail = null;
        this.picturePath = null;
        this.musicProfile = null;
        this.videoProfile = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.userid !== undefined && args.userid !== null) {
                this.userid = args.userid;
            } if (args.phone !== undefined && args.phone !== null) {
                this.phone = args.phone;
            } if (args.email !== undefined && args.email !== null) {
                this.email = args.email;
            } if (args.regionCode !== undefined && args.regionCode !== null) {
                this.regionCode = args.regionCode;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.phoneticName !== undefined && args.phoneticName !== null) {
                this.phoneticName = args.phoneticName;
            } if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
                this.pictureStatus = args.pictureStatus;
            } if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
                this.thumbnailUrl = args.thumbnailUrl;
            } if (args.statusMessage !== undefined && args.statusMessage !== null) {
                this.statusMessage = args.statusMessage;
            } if (args.allowSearchByUserid !== undefined && args.allowSearchByUserid !== null) {
                this.allowSearchByUserid = args.allowSearchByUserid;
            } if (args.allowSearchByEmail !== undefined && args.allowSearchByEmail !== null) {
                this.allowSearchByEmail = args.allowSearchByEmail;
            } if (args.picturePath !== undefined && args.picturePath !== null) {
                this.picturePath = args.picturePath;
            } if (args.musicProfile !== undefined && args.musicProfile !== null) {
                this.musicProfile = args.musicProfile;
            } if (args.videoProfile !== undefined && args.videoProfile !== null) {
                this.videoProfile = args.videoProfile;
            }
        }
    }
};
lineType.ProximityMatchCandidateResult = class {
    constructor(args) {
        this.users = null;
        this.buddies = null;
        if (args) {
            if (args.users !== undefined && args.users !== null) {
                this.users = Thrift.copyList(args.users, [lineType.Contact]);
            } if (args.buddies !== undefined && args.buddies !== null) {
                this.buddies = Thrift.copyList(args.buddies, [lineType.Contact]);
            }
        }
    }
};
lineType.RegisterWithSnsIdResult = class {
    constructor(args) {
        this.authToken = null;
        this.userCreated = null;
        if (args) {
            if (args.authToken !== undefined && args.authToken !== null) {
                this.authToken = args.authToken;
            } if (args.userCreated !== undefined && args.userCreated !== null) {
                this.userCreated = args.userCreated;
            }
        }
    }
};
lineType.RequestTokenResponse = class {
    constructor(args) {
        this.requestToken = null;
        this.returnUrl = null;
        if (args) {
            if (args.requestToken !== undefined && args.requestToken !== null) {
                this.requestToken = args.requestToken;
            } if (args.returnUrl !== undefined && args.returnUrl !== null) {
                this.returnUrl = args.returnUrl;
            }
        }
    }
};
lineType.Room = class {
    constructor(args) {
        this.mid = null;
        this.createdTime = null;
        this.contacts = null;
        this.notificationDisabled = null;
        this.memberMids = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.contacts !== undefined && args.contacts !== null) {
                this.contacts = Thrift.copyList(args.contacts, [lineType.Contact]);
            } if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
                this.notificationDisabled = args.notificationDisabled;
            } if (args.memberMids !== undefined && args.memberMids !== null) {
                this.memberMids = Thrift.copyList(args.memberMids, [null]);
            }
        }
    }
};
lineType.SuggestDictionary = class {
    constructor(args) {
        this.language = null;
        this.name = null;
        if (args) {
            if (args.language !== undefined && args.language !== null) {
                this.language = args.language;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            }
        }
    }
};
lineType.SuggestItemDictionaryIncrement = class {
    constructor(args) {
        this.status = null;
        this.revision = null;
        this.scheme = null;
        this.data = null;
        if (args) {
            if (args.status !== undefined && args.status !== null) {
                this.status = args.status;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.scheme !== undefined && args.scheme !== null) {
                this.scheme = args.scheme;
            } if (args.data !== undefined && args.data !== null) {
                this.data = args.data;
            }
        }
    }
};
lineType.SuggestTagDictionaryIncrement = class {
    constructor(args) {
        this.status = null;
        this.language = null;
        this.revision = null;
        this.scheme = null;
        this.data = null;
        if (args) {
            if (args.status !== undefined && args.status !== null) {
                this.status = args.status;
            } if (args.language !== undefined && args.language !== null) {
                this.language = args.language;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.scheme !== undefined && args.scheme !== null) {
                this.scheme = args.scheme;
            } if (args.data !== undefined && args.data !== null) {
                this.data = args.data;
            }
        }
    }
};
lineType.SuggestDictionaryIncrements = class {
    constructor(args) {
        this.itemIncrement = null;
        this.tagIncrements = null;
        if (args) {
            if (args.itemIncrement !== undefined && args.itemIncrement !== null) {
                this.itemIncrement = new lineType.SuggestItemDictionaryIncrement(args.itemIncrement);
            } if (args.tagIncrements !== undefined && args.tagIncrements !== null) {
                this.tagIncrements = Thrift.copyList(args.tagIncrements, [lineType.SuggestTagDictionaryIncrement]);
            }
        }
    }
};
lineType.SuggestItemDictionaryRevision = class {
    constructor(args) {
        this.revision = null;
        this.scheme = null;
        if (args) {
            if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.scheme !== undefined && args.scheme !== null) {
                this.scheme = args.scheme;
            }
        }
    }
};
lineType.SuggestTagDictionaryRevision = class {
    constructor(args) {
        this.language = null;
        this.revision = null;
        this.scheme = null;
        if (args) {
            if (args.language !== undefined && args.language !== null) {
                this.language = args.language;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.scheme !== undefined && args.scheme !== null) {
                this.scheme = args.scheme;
            }
        }
    }
};
lineType.SuggestDictionaryRevisions = class {
    constructor(args) {
        this.itemRevision = null;
        this.tagRevisions = null;
        if (args) {
            if (args.itemRevision !== undefined && args.itemRevision !== null) {
                this.itemRevision = new lineType.SuggestItemDictionaryRevision(args.itemRevision);
            } if (args.tagRevisions !== undefined && args.tagRevisions !== null) {
                this.tagRevisions = Thrift.copyList(args.tagRevisions, [lineType.SuggestTagDictionaryRevision]);
            }
        }
    }
};
lineType.SuggestDictionarySettings = class {
    constructor(args) {
        this.revision = null;
        this.newRevision = null;
        this.dictionaries = null;
        this.preloadedDictionaries = null;
        if (args) {
            if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.newRevision !== undefined && args.newRevision !== null) {
                this.newRevision = args.newRevision;
            } if (args.dictionaries !== undefined && args.dictionaries !== null) {
                this.dictionaries = Thrift.copyList(args.dictionaries, [lineType.SuggestDictionary]);
            } if (args.preloadedDictionaries !== undefined && args.preloadedDictionaries !== null) {
                this.preloadedDictionaries = Thrift.copyList(args.preloadedDictionaries, [null]);
            }
        }
    }
};
lineType.PhoneInfoForChannel = class {
    constructor(args) {
        this.mid = null;
        this.normalizedPhoneNumber = null;
        this.allowedToSearchByPhoneNumber = null;
        this.allowedToReceiveMessageFromNonFriend = null;
        this.region = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.normalizedPhoneNumber !== undefined && args.normalizedPhoneNumber !== null) {
                this.normalizedPhoneNumber = args.normalizedPhoneNumber;
            } if (args.allowedToSearchByPhoneNumber !== undefined && args.allowedToSearchByPhoneNumber !== null) {
                this.allowedToSearchByPhoneNumber = args.allowedToSearchByPhoneNumber;
            } if (args.allowedToReceiveMessageFromNonFriend !== undefined && args.allowedToReceiveMessageFromNonFriend !== null) {
                this.allowedToReceiveMessageFromNonFriend = args.allowedToReceiveMessageFromNonFriend;
            } if (args.region !== undefined && args.region !== null) {
                this.region = args.region;
            }
        }
    }
};
lineType.PhoneVerificationResult = class {
    constructor(args) {
        this.verificationResult = null;
        this.accountMigrationCheckType = null;
        this.recommendAddFriends = null;
        if (args) {
            if (args.verificationResult !== undefined && args.verificationResult !== null) {
                this.verificationResult = args.verificationResult;
            } if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
                this.accountMigrationCheckType = args.accountMigrationCheckType;
            } if (args.recommendAddFriends !== undefined && args.recommendAddFriends !== null) {
                this.recommendAddFriends = args.recommendAddFriends;
            }
        }
    }
};
lineType.PlaceSearchInfo = class {
    constructor(args) {
        this.name = null;
        this.address = null;
        this.latitude = null;
        this.longitude = null;
        if (args) {
            if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.address !== undefined && args.address !== null) {
                this.address = args.address;
            } if (args.latitude !== undefined && args.latitude !== null) {
                this.latitude = args.latitude;
            } if (args.longitude !== undefined && args.longitude !== null) {
                this.longitude = args.longitude;
            }
        }
    }
};
lineType.RSAKey = class {
    constructor(args) {
        this.keynm = null;
        this.nvalue = null;
        this.evalue = null;
        this.sessionKey = null;
        if (args) {
            if (args.keynm !== undefined && args.keynm !== null) {
                this.keynm = args.keynm;
            } if (args.nvalue !== undefined && args.nvalue !== null) {
                this.nvalue = args.nvalue;
            } if (args.evalue !== undefined && args.evalue !== null) {
                this.evalue = args.evalue;
            } if (args.sessionKey !== undefined && args.sessionKey !== null) {
                this.sessionKey = args.sessionKey;
            }
        }
    }
};
lineType.SecurityCenterResult = class {
    constructor(args) {
        this.uri = null;
        this.token = null;
        this.cookiePath = null;
        this.skip = null;
        if (args) {
            if (args.uri !== undefined && args.uri !== null) {
                this.uri = args.uri;
            } if (args.token !== undefined && args.token !== null) {
                this.token = args.token;
            } if (args.cookiePath !== undefined && args.cookiePath !== null) {
                this.cookiePath = args.cookiePath;
            } if (args.skip !== undefined && args.skip !== null) {
                this.skip = args.skip;
            }
        }
    }
};
lineType.SendBuddyMessageResult = class {
    constructor(args) {
        this.requestId = null;
        this.state = null;
        this.messageId = null;
        this.eventNo = null;
        this.receiverCount = null;
        this.successCount = null;
        this.failCount = null;
        this.cancelCount = null;
        this.blockCount = null;
        this.unregisterCount = null;
        this.timestamp = null;
        this.message = null;
        if (args) {
            if (args.requestId !== undefined && args.requestId !== null) {
                this.requestId = args.requestId;
            } if (args.state !== undefined && args.state !== null) {
                this.state = args.state;
            } if (args.messageId !== undefined && args.messageId !== null) {
                this.messageId = args.messageId;
            } if (args.eventNo !== undefined && args.eventNo !== null) {
                this.eventNo = args.eventNo;
            } if (args.receiverCount !== undefined && args.receiverCount !== null) {
                this.receiverCount = args.receiverCount;
            } if (args.successCount !== undefined && args.successCount !== null) {
                this.successCount = args.successCount;
            } if (args.failCount !== undefined && args.failCount !== null) {
                this.failCount = args.failCount;
            } if (args.cancelCount !== undefined && args.cancelCount !== null) {
                this.cancelCount = args.cancelCount;
            } if (args.blockCount !== undefined && args.blockCount !== null) {
                this.blockCount = args.blockCount;
            } if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
                this.unregisterCount = args.unregisterCount;
            } if (args.timestamp !== undefined && args.timestamp !== null) {
                this.timestamp = args.timestamp;
            } if (args.message !== undefined && args.message !== null) {
                this.message = args.message;
            }
        }
    }
};
lineType.SetBuddyOnAirResult = class {
    constructor(args) {
        this.requestId = null;
        this.state = null;
        this.eventNo = null;
        this.receiverCount = null;
        this.successCount = null;
        this.failCount = null;
        this.cancelCount = null;
        this.unregisterCount = null;
        this.timestamp = null;
        this.message = null;
        if (args) {
            if (args.requestId !== undefined && args.requestId !== null) {
                this.requestId = args.requestId;
            } if (args.state !== undefined && args.state !== null) {
                this.state = args.state;
            } if (args.eventNo !== undefined && args.eventNo !== null) {
                this.eventNo = args.eventNo;
            } if (args.receiverCount !== undefined && args.receiverCount !== null) {
                this.receiverCount = args.receiverCount;
            } if (args.successCount !== undefined && args.successCount !== null) {
                this.successCount = args.successCount;
            } if (args.failCount !== undefined && args.failCount !== null) {
                this.failCount = args.failCount;
            } if (args.cancelCount !== undefined && args.cancelCount !== null) {
                this.cancelCount = args.cancelCount;
            } if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
                this.unregisterCount = args.unregisterCount;
            } if (args.timestamp !== undefined && args.timestamp !== null) {
                this.timestamp = args.timestamp;
            } if (args.message !== undefined && args.message !== null) {
                this.message = args.message;
            }
        }
    }
};
lineType.Settings = class {
    constructor(args) {
        this.notificationEnable = null;
        this.notificationMuteExpiration = null;
        this.notificationNewMessage = null;
        this.notificationGroupInvitation = null;
        this.notificationShowMessage = null;
        this.notificationIncomingCall = null;
        this.notificationSoundMessage = null;
        this.notificationSoundGroup = null;
        this.notificationDisabledWithSub = null;
        this.privacySyncContacts = null;
        this.privacySearchByPhoneNumber = null;
        this.privacySearchByUserid = null;
        this.privacySearchByEmail = null;
        this.privacyAllowSecondaryDeviceLogin = null;
        this.privacyProfileImagePostToMyhome = null;
        this.privacyReceiveMessagesFromNotFriend = null;
        this.contactMyTicket = null;
        this.identityProvider = null;
        this.identityIdentifier = null;
        this.snsAccounts = null;
        this.phoneRegistration = null;
        this.emailConfirmationStatus = null;
        this.preferenceLocale = null;
        this.customModes = null;
        this.e2eeEnable = null;
        this.hitokotoBackupRequested = null;
        this.privacyProfileMusicPostToMyhome = null;
        this.privacyAllowNearby = null;
        this.agreementNearbyTime = null;
        this.agreementSquareTime = null;
        this.notificationMention = null;
        this.botUseAgreementAcceptedAt = null;
        if (args) {
            if (args.notificationEnable !== undefined && args.notificationEnable !== null) {
                this.notificationEnable = args.notificationEnable;
            } if (args.notificationMuteExpiration !== undefined && args.notificationMuteExpiration !== null) {
                this.notificationMuteExpiration = args.notificationMuteExpiration;
            } if (args.notificationNewMessage !== undefined && args.notificationNewMessage !== null) {
                this.notificationNewMessage = args.notificationNewMessage;
            } if (args.notificationGroupInvitation !== undefined && args.notificationGroupInvitation !== null) {
                this.notificationGroupInvitation = args.notificationGroupInvitation;
            } if (args.notificationShowMessage !== undefined && args.notificationShowMessage !== null) {
                this.notificationShowMessage = args.notificationShowMessage;
            } if (args.notificationIncomingCall !== undefined && args.notificationIncomingCall !== null) {
                this.notificationIncomingCall = args.notificationIncomingCall;
            } if (args.notificationSoundMessage !== undefined && args.notificationSoundMessage !== null) {
                this.notificationSoundMessage = args.notificationSoundMessage;
            } if (args.notificationSoundGroup !== undefined && args.notificationSoundGroup !== null) {
                this.notificationSoundGroup = args.notificationSoundGroup;
            } if (args.notificationDisabledWithSub !== undefined && args.notificationDisabledWithSub !== null) {
                this.notificationDisabledWithSub = args.notificationDisabledWithSub;
            } if (args.privacySyncContacts !== undefined && args.privacySyncContacts !== null) {
                this.privacySyncContacts = args.privacySyncContacts;
            } if (args.privacySearchByPhoneNumber !== undefined && args.privacySearchByPhoneNumber !== null) {
                this.privacySearchByPhoneNumber = args.privacySearchByPhoneNumber;
            } if (args.privacySearchByUserid !== undefined && args.privacySearchByUserid !== null) {
                this.privacySearchByUserid = args.privacySearchByUserid;
            } if (args.privacySearchByEmail !== undefined && args.privacySearchByEmail !== null) {
                this.privacySearchByEmail = args.privacySearchByEmail;
            } if (args.privacyAllowSecondaryDeviceLogin !== undefined && args.privacyAllowSecondaryDeviceLogin !== null) {
                this.privacyAllowSecondaryDeviceLogin = args.privacyAllowSecondaryDeviceLogin;
            } if (args.privacyProfileImagePostToMyhome !== undefined && args.privacyProfileImagePostToMyhome !== null) {
                this.privacyProfileImagePostToMyhome = args.privacyProfileImagePostToMyhome;
            } if (args.privacyReceiveMessagesFromNotFriend !== undefined && args.privacyReceiveMessagesFromNotFriend !== null) {
                this.privacyReceiveMessagesFromNotFriend = args.privacyReceiveMessagesFromNotFriend;
            } if (args.contactMyTicket !== undefined && args.contactMyTicket !== null) {
                this.contactMyTicket = args.contactMyTicket;
            } if (args.identityProvider !== undefined && args.identityProvider !== null) {
                this.identityProvider = args.identityProvider;
            } if (args.identityIdentifier !== undefined && args.identityIdentifier !== null) {
                this.identityIdentifier = args.identityIdentifier;
            } if (args.snsAccounts !== undefined && args.snsAccounts !== null) {
                this.snsAccounts = Thrift.copyMap(args.snsAccounts, [null]);
            } if (args.phoneRegistration !== undefined && args.phoneRegistration !== null) {
                this.phoneRegistration = args.phoneRegistration;
            } if (args.emailConfirmationStatus !== undefined && args.emailConfirmationStatus !== null) {
                this.emailConfirmationStatus = args.emailConfirmationStatus;
            } if (args.preferenceLocale !== undefined && args.preferenceLocale !== null) {
                this.preferenceLocale = args.preferenceLocale;
            } if (args.customModes !== undefined && args.customModes !== null) {
                this.customModes = Thrift.copyMap(args.customModes, [null]);
            } if (args.e2eeEnable !== undefined && args.e2eeEnable !== null) {
                this.e2eeEnable = args.e2eeEnable;
            } if (args.hitokotoBackupRequested !== undefined && args.hitokotoBackupRequested !== null) {
                this.hitokotoBackupRequested = args.hitokotoBackupRequested;
            } if (args.privacyProfileMusicPostToMyhome !== undefined && args.privacyProfileMusicPostToMyhome !== null) {
                this.privacyProfileMusicPostToMyhome = args.privacyProfileMusicPostToMyhome;
            } if (args.privacyAllowNearby !== undefined && args.privacyAllowNearby !== null) {
                this.privacyAllowNearby = args.privacyAllowNearby;
            } if (args.agreementNearbyTime !== undefined && args.agreementNearbyTime !== null) {
                this.agreementNearbyTime = args.agreementNearbyTime;
            } if (args.agreementSquareTime !== undefined && args.agreementSquareTime !== null) {
                this.agreementSquareTime = args.agreementSquareTime;
            } if (args.notificationMention !== undefined && args.notificationMention !== null) {
                this.notificationMention = args.notificationMention;
            } if (args.botUseAgreementAcceptedAt !== undefined && args.botUseAgreementAcceptedAt !== null) {
                this.botUseAgreementAcceptedAt = args.botUseAgreementAcceptedAt;
            }
        }
    }
};
lineType.SimpleChannelClient = class {
    constructor(args) {
        this.applicationType = null;
        this.applicationVersion = null;
        this.locale = null;
        if (args) {
            if (args.applicationType !== undefined && args.applicationType !== null) {
                this.applicationType = args.applicationType;
            } if (args.applicationVersion !== undefined && args.applicationVersion !== null) {
                this.applicationVersion = args.applicationVersion;
            } if (args.locale !== undefined && args.locale !== null) {
                this.locale = args.locale;
            }
        }
    }
};
lineType.SimpleChannelContact = class {
    constructor(args) {
        this.mid = null;
        this.displayName = null;
        this.pictureStatus = null;
        this.picturePath = null;
        this.statusMessage = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
                this.pictureStatus = args.pictureStatus;
            } if (args.picturePath !== undefined && args.picturePath !== null) {
                this.picturePath = args.picturePath;
            } if (args.statusMessage !== undefined && args.statusMessage !== null) {
                this.statusMessage = args.statusMessage;
            }
        }
    }
};
lineType.SnsFriend = class {
    constructor(args) {
        this.snsUserId = null;
        this.snsUserName = null;
        this.snsIdType = null;
        if (args) {
            if (args.snsUserId !== undefined && args.snsUserId !== null) {
                this.snsUserId = args.snsUserId;
            } if (args.snsUserName !== undefined && args.snsUserName !== null) {
                this.snsUserName = args.snsUserName;
            } if (args.snsIdType !== undefined && args.snsIdType !== null) {
                this.snsIdType = args.snsIdType;
            }
        }
    }
};
lineType.SnsFriendContactRegistration = class {
    constructor(args) {
        this.contact = null;
        this.snsIdType = null;
        this.snsUserId = null;
        if (args) {
            if (args.contact !== undefined && args.contact !== null) {
                this.contact = new lineType.Contact(args.contact);
            } if (args.snsIdType !== undefined && args.snsIdType !== null) {
                this.snsIdType = args.snsIdType;
            } if (args.snsUserId !== undefined && args.snsUserId !== null) {
                this.snsUserId = args.snsUserId;
            }
        }
    }
};
lineType.SnsFriendModification = class {
    constructor(args) {
        this.type = null;
        this.snsFriend = null;
        if (args) {
            if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.snsFriend !== undefined && args.snsFriend !== null) {
                this.snsFriend = new lineType.SnsFriend(args.snsFriend);
            }
        }
    }
};
lineType.SnsFriends = class {
    constructor(args) {
        this.snsFriends = null;
        this.hasMore = null;
        if (args) {
            if (args.snsFriends !== undefined && args.snsFriends !== null) {
                this.snsFriends = Thrift.copyList(args.snsFriends, [lineType.SnsFriend]);
            } if (args.hasMore !== undefined && args.hasMore !== null) {
                this.hasMore = args.hasMore;
            }
        }
    }
};
lineType.SnsIdUserStatus = class {
    constructor(args) {
        this.userExisting = null;
        this.phoneNumberRegistered = null;
        this.sameDevice = null;
        if (args) {
            if (args.userExisting !== undefined && args.userExisting !== null) {
                this.userExisting = args.userExisting;
            } if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
                this.phoneNumberRegistered = args.phoneNumberRegistered;
            } if (args.sameDevice !== undefined && args.sameDevice !== null) {
                this.sameDevice = args.sameDevice;
            }
        }
    }
};
lineType.SnsProfile = class {
    constructor(args) {
        this.snsUserId = null;
        this.snsUserName = null;
        this.email = null;
        this.thumbnailUrl = null;
        if (args) {
            if (args.snsUserId !== undefined && args.snsUserId !== null) {
                this.snsUserId = args.snsUserId;
            } if (args.snsUserName !== undefined && args.snsUserName !== null) {
                this.snsUserName = args.snsUserName;
            } if (args.email !== undefined && args.email !== null) {
                this.email = args.email;
            } if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
                this.thumbnailUrl = args.thumbnailUrl;
            }
        }
    }
};
lineType.SystemConfiguration = class {
    constructor(args) {
        this.endpoint = null;
        this.endpointSsl = null;
        this.updateUrl = null;
        this.c2dmAccount = null;
        this.nniServer = null;
        if (args) {
            if (args.endpoint !== undefined && args.endpoint !== null) {
                this.endpoint = args.endpoint;
            } if (args.endpointSsl !== undefined && args.endpointSsl !== null) {
                this.endpointSsl = args.endpointSsl;
            } if (args.updateUrl !== undefined && args.updateUrl !== null) {
                this.updateUrl = args.updateUrl;
            } if (args.c2dmAccount !== undefined && args.c2dmAccount !== null) {
                this.c2dmAccount = args.c2dmAccount;
            } if (args.nniServer !== undefined && args.nniServer !== null) {
                this.nniServer = args.nniServer;
            }
        }
    }
};
lineType.Ticket = class {
    constructor(args) {
        this.id = null;
        this.expirationTime = null;
        this.maxUseCount = null;
        if (args) {
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            } if (args.expirationTime !== undefined && args.expirationTime !== null) {
                this.expirationTime = args.expirationTime;
            } if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
                this.maxUseCount = args.maxUseCount;
            }
        }
    }
};
lineType.TMessageBox = class {
    constructor(args) {
        this.id = null;
        this.channelId = null;
        this.lastSeq = null;
        this.unreadCount = null;
        this.lastModifiedTime = null;
        this.status = null;
        this.midType = null;
        this.lastMessages = null;
        if (args) {
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            } if (args.channelId !== undefined && args.channelId !== null) {
                this.channelId = args.channelId;
            } if (args.lastSeq !== undefined && args.lastSeq !== null) {
                this.lastSeq = args.lastSeq;
            } if (args.unreadCount !== undefined && args.unreadCount !== null) {
                this.unreadCount = args.unreadCount;
            } if (args.lastModifiedTime !== undefined && args.lastModifiedTime !== null) {
                this.lastModifiedTime = args.lastModifiedTime;
            } if (args.status !== undefined && args.status !== null) {
                this.status = args.status;
            } if (args.midType !== undefined && args.midType !== null) {
                this.midType = args.midType;
            } if (args.lastMessages !== undefined && args.lastMessages !== null) {
                this.lastMessages = Thrift.copyList(args.lastMessages, [lineType.Message]);
            }
        }
    }
};
lineType.TMessageBoxWrapUp = class {
    constructor(args) {
        this.messageBox = null;
        this.name = null;
        this.contacts = null;
        this.pictureRevision = null;
        if (args) {
            if (args.messageBox !== undefined && args.messageBox !== null) {
                this.messageBox = new lineType.TMessageBox(args.messageBox);
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            } if (args.contacts !== undefined && args.contacts !== null) {
                this.contacts = Thrift.copyList(args.contacts, [lineType.Contact]);
            } if (args.pictureRevision !== undefined && args.pictureRevision !== null) {
                this.pictureRevision = args.pictureRevision;
            }
        }
    }
};
lineType.TMessageBoxWrapUpResponse = class {
    constructor(args) {
        this.messageBoxWrapUpList = null;
        this.totalSize = null;
        if (args) {
            if (args.messageBoxWrapUpList !== undefined && args.messageBoxWrapUpList !== null) {
                this.messageBoxWrapUpList = Thrift.copyList(args.messageBoxWrapUpList, [lineType.TMessageBoxWrapUp]);
            } if (args.totalSize !== undefined && args.totalSize !== null) {
                this.totalSize = args.totalSize;
            }
        }
    }
};
lineType.TMessageReadRangeEntry = class {
    constructor(args) {
        this.startMessageId = null;
        this.endMessageId = null;
        this.startTime = null;
        this.endTime = null;
        if (args) {
            if (args.startMessageId !== undefined && args.startMessageId !== null) {
                this.startMessageId = args.startMessageId;
            } if (args.endMessageId !== undefined && args.endMessageId !== null) {
                this.endMessageId = args.endMessageId;
            } if (args.startTime !== undefined && args.startTime !== null) {
                this.startTime = args.startTime;
            } if (args.endTime !== undefined && args.endTime !== null) {
                this.endTime = args.endTime;
            }
        }
    }
};
lineType.TMessageReadRange = class {
    constructor(args) {
        this.chatId = null;
        this.ranges = null;
        if (args) {
            if (args.chatId !== undefined && args.chatId !== null) {
                this.chatId = args.chatId;
            } if (args.ranges !== undefined && args.ranges !== null) {
                this.ranges = Thrift.copyMap(args.ranges, [Thrift.copyList, lineType.TMessageReadRangeEntry]);
            }
        }
    }
};
lineType.ChatRoomAnnouncementContents = class {
    constructor(args) {
        this.displayFields = null;
        this.text = null;
        this.link = null;
        this.thumbnail = null;
        if (args) {
            if (args.displayFields !== undefined && args.displayFields !== null) {
                this.displayFields = args.displayFields;
            } if (args.text !== undefined && args.text !== null) {
                this.text = args.text;
            } if (args.link !== undefined && args.link !== null) {
                this.link = args.link;
            } if (args.thumbnail !== undefined && args.thumbnail !== null) {
                this.thumbnail = args.thumbnail;
            }
        }
    }
};
lineType.ChatRoomAnnouncement = class {
    constructor(args) {
        this.announcementSeq = null;
        this.type = null;
        this.contents = null;
        this.creatorMid = null;
        this.createdTime = null;
        if (args) {
            if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
                this.announcementSeq = args.announcementSeq;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.contents !== undefined && args.contents !== null) {
                this.contents = new lineType.ChatRoomAnnouncementContents(args.contents);
            } if (args.creatorMid !== undefined && args.creatorMid !== null) {
                this.creatorMid = args.creatorMid;
            } if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            }
        }
    }
};
lineType.ErrorExtraInfo = class {
    constructor(args) {
        this.preconditionFailedExtraInfo = null;
        if (args) {
            if (args.preconditionFailedExtraInfo !== undefined && args.preconditionFailedExtraInfo !== null) {
                this.preconditionFailedExtraInfo = args.preconditionFailedExtraInfo;
            }
        }
    }
};
lineType.SyncRelations = class {
    constructor(args) {
        this.syncAll = null;
        this.syncParamContact = null;
        this.syncParamMid = null;
        if (args) {
            if (args.syncAll !== undefined && args.syncAll !== null) {
                this.syncAll = args.syncAll;
            } if (args.syncParamContact !== undefined && args.syncParamContact !== null) {
                this.syncParamContact = Thrift.copyList(args.syncParamContact, [lineType.SyncParamContact]);
            } if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
                this.syncParamMid = Thrift.copyList(args.syncParamMid, [lineType.SyncParamMid]);
            }
        }
    }
};
lineType.SyncScope = class {
    constructor(args) {
        this.syncProfile = null;
        this.syncSettings = null;
        this.syncSticker = null;
        this.syncThemeShop = null;
        this.contact = null;
        this.group = null;
        this.room = null;
        this.chat = null;
        if (args) {
            if (args.syncProfile !== undefined && args.syncProfile !== null) {
                this.syncProfile = args.syncProfile;
            } if (args.syncSettings !== undefined && args.syncSettings !== null) {
                this.syncSettings = args.syncSettings;
            } if (args.syncSticker !== undefined && args.syncSticker !== null) {
                this.syncSticker = args.syncSticker;
            } if (args.syncThemeShop !== undefined && args.syncThemeShop !== null) {
                this.syncThemeShop = args.syncThemeShop;
            } if (args.contact !== undefined && args.contact !== null) {
                this.contact = new lineType.SyncRelations(args.contact);
            } if (args.group !== undefined && args.group !== null) {
                this.group = new lineType.SyncRelations(args.group);
            } if (args.room !== undefined && args.room !== null) {
                this.room = new lineType.SyncRelations(args.room);
            } if (args.chat !== undefined && args.chat !== null) {
                this.chat = new lineType.SyncRelations(args.chat);
            }
        }
    }
};
lineType.JoinSquareResponse = class {
    constructor(args) {
        this.square = null;
        this.squareAuthority = null;
        this.squareStatus = null;
        this.squareMember = null;
        this.squareFeatureSet = null;
        this.noteStatus = null;
        if (args) {
            if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            } if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
                this.squareAuthority = new lineType.SquareAuthority(args.squareAuthority);
            } if (args.squareStatus !== undefined && args.squareStatus !== null) {
                this.squareStatus = new lineType.SquareStatus(args.squareStatus);
            } if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            } if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
                this.squareFeatureSet = new lineType.SquareFeatureSet(args.squareFeatureSet);
            } if (args.noteStatus !== undefined && args.noteStatus !== null) {
                this.noteStatus = new lineType.NoteStatus(args.noteStatus);
            }
        }
    }
};
lineType.JoinSquareRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.member = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.member !== undefined && args.member !== null) {
                this.member = new lineType.SquareMember(args.member);
            }
        }
    }
};
lineType.JoinSquareChatResponse = class {
    constructor(args) {
        this.squareChat = null;
        this.squareChatStatus = null;
        this.squareChatMember = null;
        if (args) {
            if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            } if (args.squareChatStatus !== undefined && args.squareChatStatus !== null) {
                this.squareChatStatus = new lineType.SquareChatStatus(args.squareChatStatus);
            } if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
                this.squareChatMember = new lineType.SquareChatMember(args.squareChatMember);
            }
        }
    }
};
lineType.JoinSquareChatRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            }
        }
    }
};
lineType.SendMessageResponse = class {
    constructor(args) {
        this.createdSquareMessage = null;
        if (args) {
            if (args.createdSquareMessage !== undefined && args.createdSquareMessage !== null) {
                this.createdSquareMessage = new lineType.SquareMessage(args.createdSquareMessage);
            }
        }
    }
};
lineType.SendMessageRequest = class {
    constructor(args) {
        this.reqSeq = null;
        this.squareChatMid = null;
        this.squareMessage = null;
        if (args) {
            if (args.reqSeq !== undefined && args.reqSeq !== null) {
                this.reqSeq = args.reqSeq;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMessage !== undefined && args.squareMessage !== null) {
                this.squareMessage = new lineType.SquareMessage(args.squareMessage);
            }
        }
    }
};
lineType.MarkAsReadRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        this.messageId = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.messageId !== undefined && args.messageId !== null) {
                this.messageId = args.messageId;
            }
        }
    }
};
lineType.MarkAsReadResponse = class {
    constructor(args) { }
};
lineType.SubscriptionState = class {
    constructor(args) {
        this.subscriptionId = null;
        this.ttlMillis = null;
        if (args) {
            if (args.subscriptionId !== undefined && args.subscriptionId !== null) {
                this.subscriptionId = args.subscriptionId;
            } if (args.ttlMillis !== undefined && args.ttlMillis !== null) {
                this.ttlMillis = args.ttlMillis;
            }
        }
    }
};
lineType.ApproveSquareMembersResponse = class {
    constructor(args) {
        this.approvedMembers = null;
        this.status = null;
        if (args) {
            if (args.approvedMembers !== undefined && args.approvedMembers !== null) {
                this.approvedMembers = Thrift.copyList(args.approvedMembers, [lineType.SquareMember]);
            } if (args.status !== undefined && args.status !== null) {
                this.status = new lineType.SquareStatus(args.status);
            }
        }
    }
};
lineType.ApproveSquareMembersRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.requestedMemberMids = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.requestedMemberMids !== undefined && args.requestedMemberMids !== null) {
                this.requestedMemberMids = Thrift.copyList(args.requestedMemberMids, [null]);
            }
        }
    }
};
lineType.CreateSquareChatResponse = class {
    constructor(args) {
        this.squareChat = null;
        this.squareChatStatus = null;
        this.squareChatMember = null;
        if (args) {
            if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            } if (args.squareChatStatus !== undefined && args.squareChatStatus !== null) {
                this.squareChatStatus = new lineType.SquareChatStatus(args.squareChatStatus);
            } if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
                this.squareChatMember = new lineType.SquareChatMember(args.squareChatMember);
            }
        }
    }
};
lineType.CreateSquareChatRequest = class {
    constructor(args) {
        this.reqSeq = null;
        this.squareChat = null;
        this.squareMemberMids = null;
        if (args) {
            if (args.reqSeq !== undefined && args.reqSeq !== null) {
                this.reqSeq = args.reqSeq;
            } if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            } if (args.squareMemberMids !== undefined && args.squareMemberMids !== null) {
                this.squareMemberMids = Thrift.copyList(args.squareMemberMids, [null]);
            }
        }
    }
};
lineType.CreateSquareResponse = class {
    constructor(args) {
        this.square = null;
        this.creator = null;
        this.authority = null;
        this.status = null;
        if (args) {
            if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            } if (args.creator !== undefined && args.creator !== null) {
                this.creator = new lineType.SquareMember(args.creator);
            } if (args.authority !== undefined && args.authority !== null) {
                this.authority = new lineType.SquareAuthority(args.authority);
            } if (args.status !== undefined && args.status !== null) {
                this.status = new lineType.SquareStatus(args.status);
            }
        }
    }
};
lineType.CreateSquareRequest = class {
    constructor(args) {
        this.reqSeq = null;
        this.square = null;
        this.creator = null;
        if (args) {
            if (args.reqSeq !== undefined && args.reqSeq !== null) {
                this.reqSeq = args.reqSeq;
            } if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            } if (args.creator !== undefined && args.creator !== null) {
                this.creator = new lineType.SquareMember(args.creator);
            }
        }
    }
};
lineType.DeleteSquareResponse = class {
    constructor(args) { }
};
lineType.DeleteSquareRequest = class {
    constructor(args) {
        this.mid = null;
        this.revision = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.DestroyMessageResponse = class {
    constructor(args) { }
};
lineType.DestroyMessageRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        this.messageId = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.messageId !== undefined && args.messageId !== null) {
                this.messageId = args.messageId;
            }
        }
    }
};
lineType.GetSquareChatMembersRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        this.continuationToken = null;
        this.limit = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            }
        }
    }
};
lineType.GetSquareChatMembersResponse = class {
    constructor(args) {
        this.squareChatMembers = null;
        this.continuationToken = null;
        if (args) {
            if (args.squareChatMembers !== undefined && args.squareChatMembers !== null) {
                this.squareChatMembers = Thrift.copyList(args.squareChatMembers, [lineType.SquareMember]);
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            }
        }
    }
};
lineType.GetSquareChatStatusRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            }
        }
    }
};
lineType.GetSquareChatStatusResponse = class {
    constructor(args) {
        this.chatStatus = null;
        if (args) {
            if (args.chatStatus !== undefined && args.chatStatus !== null) {
                this.chatStatus = new lineType.SquareChatStatus(args.chatStatus);
            }
        }
    }
};
lineType.GetSquareChatRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            }
        }
    }
};
lineType.GetSquareChatResponse = class {
    constructor(args) {
        this.squareChat = null;
        this.squareChatMember = null;
        this.squareChatStatus = null;
        if (args) {
            if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            } if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
                this.squareChatMember = new lineType.SquareChatMember(args.squareChatMember);
            } if (args.squareChatStatus !== undefined && args.squareChatStatus !== null) {
                this.squareChatStatus = new lineType.SquareChatStatus(args.squareChatStatus);
            }
        }
    }
};
lineType.GetSquareAuthorityRequest = class {
    constructor(args) {
        this.squareMid = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            }
        }
    }
};
lineType.GetSquareAuthorityResponse = class {
    constructor(args) {
        this.authority = null;
        if (args) {
            if (args.authority !== undefined && args.authority !== null) {
                this.authority = new lineType.SquareAuthority(args.authority);
            }
        }
    }
};
lineType.GetJoinedSquaresRequest = class {
    constructor(args) {
        this.continuationToken = null;
        this.limit = null;
        if (args) {
            if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            }
        }
    }
};
lineType.GetJoinedSquaresResponse = class {
    constructor(args) {
        this.squares = null;
        this.members = null;
        this.authorities = null;
        this.statuses = null;
        this.continuationToken = null;
        this.noteStatuses = null;
        if (args) {
            if (args.squares !== undefined && args.squares !== null) {
                this.squares = Thrift.copyList(args.squares, [lineType.Square]);
            } if (args.members !== undefined && args.members !== null) {
                this.members = Thrift.copyMap(args.members, [lineType.SquareMember]);
            } if (args.authorities !== undefined && args.authorities !== null) {
                this.authorities = Thrift.copyMap(args.authorities, [lineType.SquareAuthority]);
            } if (args.statuses !== undefined && args.statuses !== null) {
                this.statuses = Thrift.copyMap(args.statuses, [lineType.SquareStatus]);
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.noteStatuses !== undefined && args.noteStatuses !== null) {
                this.noteStatuses = Thrift.copyMap(args.noteStatuses, [lineType.NoteStatus]);
            }
        }
    }
};
lineType.GetJoinableSquareChatsRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.continuationToken = null;
        this.limit = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            }
        }
    }
};
lineType.GetJoinableSquareChatsResponse = class {
    constructor(args) {
        this.squareChats = null;
        this.continuationToken = null;
        this.totalSquareChatCount = null;
        this.squareChatStatuses = null;
        if (args) {
            if (args.squareChats !== undefined && args.squareChats !== null) {
                this.squareChats = Thrift.copyList(args.squareChats, [lineType.SquareChat]);
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.totalSquareChatCount !== undefined && args.totalSquareChatCount !== null) {
                this.totalSquareChatCount = args.totalSquareChatCount;
            } if (args.squareChatStatuses !== undefined && args.squareChatStatuses !== null) {
                this.squareChatStatuses = Thrift.copyMap(args.squareChatStatuses, [lineType.SquareChatStatus]);
            }
        }
    }
};
lineType.GetInvitationTicketUrlRequest = class {
    constructor(args) {
        this.mid = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            }
        }
    }
};
lineType.GetInvitationTicketUrlResponse = class {
    constructor(args) {
        this.invitationURL = null;
        if (args) {
            if (args.invitationURL !== undefined && args.invitationURL !== null) {
                this.invitationURL = args.invitationURL;
            }
        }
    }
};
lineType.LeaveSquareRequest = class {
    constructor(args) {
        this.squareMid = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            }
        }
    }
};
lineType.LeaveSquareResponse = class {
    constructor(args) { }
};
lineType.LeaveSquareChatRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        this.sayGoodbye = null;
        this.squareChatMemberRevision = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.sayGoodbye !== undefined && args.sayGoodbye !== null) {
                this.sayGoodbye = args.sayGoodbye;
            } if (args.squareChatMemberRevision !== undefined && args.squareChatMemberRevision !== null) {
                this.squareChatMemberRevision = args.squareChatMemberRevision;
            }
        }
    }
};
lineType.LeaveSquareChatResponse = class {
    constructor(args) { }
};
lineType.SquareMemberSearchOption = class {
    constructor(args) {
        this.membershipState = null;
        this.memberRoles = null;
        this.displayName = null;
        this.ableToReceiveMessage = null;
        this.ableToReceiveFriendRequest = null;
        this.chatMidToExcludeMembers = null;
        this.includingMe = null;
        if (args) {
            if (args.membershipState !== undefined && args.membershipState !== null) {
                this.membershipState = args.membershipState;
            } if (args.memberRoles !== undefined && args.memberRoles !== null) {
                this.memberRoles = Thrift.copyList(args.memberRoles, [null]);
            } if (args.displayName !== undefined && args.displayName !== null) {
                this.displayName = args.displayName;
            } if (args.ableToReceiveMessage !== undefined && args.ableToReceiveMessage !== null) {
                this.ableToReceiveMessage = args.ableToReceiveMessage;
            } if (args.ableToReceiveFriendRequest !== undefined && args.ableToReceiveFriendRequest !== null) {
                this.ableToReceiveFriendRequest = args.ableToReceiveFriendRequest;
            } if (args.chatMidToExcludeMembers !== undefined && args.chatMidToExcludeMembers !== null) {
                this.chatMidToExcludeMembers = args.chatMidToExcludeMembers;
            } if (args.includingMe !== undefined && args.includingMe !== null) {
                this.includingMe = args.includingMe;
            }
        }
    }
};
lineType.SearchSquareMembersRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.searchOption = null;
        this.continuationToken = null;
        this.limit = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.searchOption !== undefined && args.searchOption !== null) {
                this.searchOption = new lineType.SquareMemberSearchOption(args.searchOption);
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            }
        }
    }
};
lineType.SearchSquareMembersResponse = class {
    constructor(args) {
        this.members = null;
        this.revision = null;
        this.continuationToken = null;
        this.totalCount = null;
        if (args) {
            if (args.members !== undefined && args.members !== null) {
                this.members = Thrift.copyList(args.members, [lineType.SquareMember]);
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.totalCount !== undefined && args.totalCount !== null) {
                this.totalCount = args.totalCount;
            }
        }
    }
};
lineType.FindSquareByInvitationTicketRequest = class {
    constructor(args) {
        this.invitationTicket = null;
        if (args) {
            if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
                this.invitationTicket = args.invitationTicket;
            }
        }
    }
};
lineType.FindSquareByInvitationTicketResponse = class {
    constructor(args) {
        this.square = null;
        this.myMembership = null;
        this.squareAuthority = null;
        this.squareStatus = null;
        if (args) {
            if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            } if (args.myMembership !== undefined && args.myMembership !== null) {
                this.myMembership = new lineType.SquareMember(args.myMembership);
            } if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
                this.squareAuthority = new lineType.SquareAuthority(args.squareAuthority);
            } if (args.squareStatus !== undefined && args.squareStatus !== null) {
                this.squareStatus = new lineType.SquareStatus(args.squareStatus);
            }
        }
    }
};
lineType.SquareEventReceiveMessage = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMessage = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMessage !== undefined && args.squareMessage !== null) {
                this.squareMessage = new lineType.SquareMessage(args.squareMessage);
            }
        }
    }
};
lineType.SquareEventSendMessage = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMessage = null;
        this.reqSeq = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMessage !== undefined && args.squareMessage !== null) {
                this.squareMessage = new lineType.SquareMessage(args.squareMessage);
            } if (args.reqSeq !== undefined && args.reqSeq !== null) {
                this.reqSeq = args.reqSeq;
            }
        }
    }
};
lineType.SquareEventNotifiedJoinSquareChat = class {
    constructor(args) {
        this.squareChatMid = null;
        this.joinedMember = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.joinedMember !== undefined && args.joinedMember !== null) {
                this.joinedMember = new lineType.SquareMember(args.joinedMember);
            }
        }
    }
};
lineType.SquareEventNotifiedInviteIntoSquareChat = class {
    constructor(args) {
        this.squareChatMid = null;
        this.invitees = null;
        this.invitor = null;
        this.invitorRelation = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.invitees !== undefined && args.invitees !== null) {
                this.invitees = Thrift.copyList(args.invitees, [lineType.SquareMember]);
            } if (args.invitor !== undefined && args.invitor !== null) {
                this.invitor = new lineType.SquareMember(args.invitor);
            } if (args.invitorRelation !== undefined && args.invitorRelation !== null) {
                this.invitorRelation = new lineType.SquareMemberRelation(args.invitorRelation);
            }
        }
    }
};
lineType.SquareEventNotifiedLeaveSquareChat = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMemberMid = null;
        this.sayGoodbye = null;
        this.squareMember = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            } if (args.sayGoodbye !== undefined && args.sayGoodbye !== null) {
                this.sayGoodbye = args.sayGoodbye;
            } if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            }
        }
    }
};
lineType.SquareEventNotifiedDestroyMessage = class {
    constructor(args) {
        this.squareChatMid = null;
        this.messageId = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.messageId !== undefined && args.messageId !== null) {
                this.messageId = args.messageId;
            }
        }
    }
};
lineType.SquareEventNotifiedMarkAsRead = class {
    constructor(args) {
        this.squareChatMid = null;
        this.sMemberMid = null;
        this.messageId = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.sMemberMid !== undefined && args.sMemberMid !== null) {
                this.sMemberMid = args.sMemberMid;
            } if (args.messageId !== undefined && args.messageId !== null) {
                this.messageId = args.messageId;
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareMemberProfile = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMember = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            }
        }
    }
};
lineType.SquareEventNotifiedKickoutFromSquare = class {
    constructor(args) {
        this.squareChatMid = null;
        this.kickees = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.kickees !== undefined && args.kickees !== null) {
                this.kickees = Thrift.copyList(args.kickees, [lineType.SquareMember]);
            }
        }
    }
};
lineType.SquareEventNotifiedShutdownSquare = class {
    constructor(args) {
        this.squareChatMid = null;
        this.square = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            }
        }
    }
};
lineType.SquareEventNotifiedDeleteSquareChat = class {
    constructor(args) {
        this.squareChat = null;
        if (args) {
            if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareChatProfileName = class {
    constructor(args) {
        this.squareChatMid = null;
        this.editor = null;
        this.updatedChatName = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.editor !== undefined && args.editor !== null) {
                this.editor = new lineType.SquareMember(args.editor);
            } if (args.updatedChatName !== undefined && args.updatedChatName !== null) {
                this.updatedChatName = args.updatedChatName;
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareChatProfileImage = class {
    constructor(args) {
        this.squareChatMid = null;
        this.editor = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.editor !== undefined && args.editor !== null) {
                this.editor = new lineType.SquareMember(args.editor);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareChatStatus = class {
    constructor(args) {
        this.squareChatMid = null;
        this.statusWithoutMessage = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.statusWithoutMessage !== undefined && args.statusWithoutMessage !== null) {
                this.statusWithoutMessage = new lineType.SquareChatStatusWithoutMessage(args.statusWithoutMessage);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareStatus = class {
    constructor(args) {
        this.squareMid = null;
        this.squareStatus = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareStatus !== undefined && args.squareStatus !== null) {
                this.squareStatus = new lineType.SquareStatus(args.squareStatus);
            }
        }
    }
};
lineType.SquareEventNotifiedCreateSquareMember = class {
    constructor(args) {
        this.square = null;
        this.squareAuthority = null;
        this.squareStatus = null;
        this.squareMember = null;
        this.squareFeatureSet = null;
        if (args) {
            if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            } if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
                this.squareAuthority = new lineType.SquareAuthority(args.squareAuthority);
            } if (args.squareStatus !== undefined && args.squareStatus !== null) {
                this.squareStatus = new lineType.SquareStatus(args.squareStatus);
            } if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            } if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
                this.squareFeatureSet = new lineType.SquareFeatureSet(args.squareFeatureSet);
            }
        }
    }
};
lineType.SquareEventNotifiedCreateSquareChatMember = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMemberMid = null;
        this.squareChatMember = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            } if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
                this.squareChatMember = new lineType.SquareChatMember(args.squareChatMember);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareMemberRelation = class {
    constructor(args) {
        this.squareMid = null;
        this.myMemberMid = null;
        this.targetSquareMemberMid = null;
        this.squareMemberRelation = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.myMemberMid !== undefined && args.myMemberMid !== null) {
                this.myMemberMid = args.myMemberMid;
            } if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
                this.targetSquareMemberMid = args.targetSquareMemberMid;
            } if (args.squareMemberRelation !== undefined && args.squareMemberRelation !== null) {
                this.squareMemberRelation = new lineType.SquareMemberRelation(args.squareMemberRelation);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquare = class {
    constructor(args) {
        this.squareMid = null;
        this.square = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareMember = class {
    constructor(args) {
        this.squareMid = null;
        this.squareMemberMid = null;
        this.squareMember = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            } if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareChat = class {
    constructor(args) {
        this.squareMid = null;
        this.squareChatMid = null;
        this.squareChat = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            }
        }
    }
};
lineType.SquareEventNotificationJoinRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.squareName = null;
        this.requestMemberName = null;
        this.profileImageObsHash = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareName !== undefined && args.squareName !== null) {
                this.squareName = args.squareName;
            } if (args.requestMemberName !== undefined && args.requestMemberName !== null) {
                this.requestMemberName = args.requestMemberName;
            } if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
                this.profileImageObsHash = args.profileImageObsHash;
            }
        }
    }
};
lineType.SquareEventNotificationMemberUpdate = class {
    constructor(args) {
        this.squareMid = null;
        this.squareName = null;
        this.profileImageObsHash = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareName !== undefined && args.squareName !== null) {
                this.squareName = args.squareName;
            } if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
                this.profileImageObsHash = args.profileImageObsHash;
            }
        }
    }
};
lineType.SquareEventNotificationSquareDelete = class {
    constructor(args) {
        this.squareMid = null;
        this.squareName = null;
        this.profileImageObsHash = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareName !== undefined && args.squareName !== null) {
                this.squareName = args.squareName;
            } if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
                this.profileImageObsHash = args.profileImageObsHash;
            }
        }
    }
};
lineType.SquareEventNotificationSquareChatDelete = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareChatName = null;
        this.profileImageObsHash = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareChatName !== undefined && args.squareChatName !== null) {
                this.squareChatName = args.squareChatName;
            } if (args.profileImageObsHash !== undefined && args.profileImageObsHash !== null) {
                this.profileImageObsHash = args.profileImageObsHash;
            }
        }
    }
};
lineType.SquareEventNotificationMessage = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMessage = null;
        this.senderDisplayName = null;
        this.unreadCount = null;
        this.requiredToFetchChatEvents = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMessage !== undefined && args.squareMessage !== null) {
                this.squareMessage = new lineType.SquareMessage(args.squareMessage);
            } if (args.senderDisplayName !== undefined && args.senderDisplayName !== null) {
                this.senderDisplayName = args.senderDisplayName;
            } if (args.unreadCount !== undefined && args.unreadCount !== null) {
                this.unreadCount = args.unreadCount;
            } if (args.requiredToFetchChatEvents !== undefined && args.requiredToFetchChatEvents !== null) {
                this.requiredToFetchChatEvents = args.requiredToFetchChatEvents;
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareChatMember = class {
    constructor(args) {
        this.squareChatMid = null;
        this.squareMemberMid = null;
        this.squareChatMember = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            } if (args.squareChatMember !== undefined && args.squareChatMember !== null) {
                this.squareChatMember = new lineType.SquareChatMember(args.squareChatMember);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareAuthority = class {
    constructor(args) {
        this.squareMid = null;
        this.squareAuthority = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
                this.squareAuthority = new lineType.SquareAuthority(args.squareAuthority);
            }
        }
    }
};
lineType.SquareEventNotifiedUpdateSquareFeatureSet = class {
    constructor(args) {
        this.squareFeatureSet = null;
        if (args) {
            if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
                this.squareFeatureSet = new lineType.SquareFeatureSet(args.squareFeatureSet);
            }
        }
    }
};
lineType.SquareEventPayload = class {
    constructor(args) {
        this.receiveMessage = null;
        this.sendMessage = null;
        this.notifiedJoinSquareChat = null;
        this.notifiedInviteIntoSquareChat = null;
        this.notifiedLeaveSquareChat = null;
        this.notifiedDestroyMessage = null;
        this.notifiedMarkAsRead = null;
        this.notifiedUpdateSquareMemberProfile = null;
        this.notifiedKickoutFromSquare = null;
        this.notifiedShutdownSquare = null;
        this.notifiedDeleteSquareChat = null;
        this.notifiedUpdateSquareChatProfileName = null;
        this.notifiedUpdateSquareChatProfileImage = null;
        this.notifiedUpdateSquareStatus = null;
        this.notifiedUpdateSquareChatStatus = null;
        this.notifiedCreateSquareMember = null;
        this.notifiedCreateSquareChatMember = null;
        this.notifiedUpdateSquareMemberRelation = null;
        this.notifiedUpdateSquare = null;
        this.notifiedUpdateSquareMember = null;
        this.notifiedUpdateSquareChat = null;
        this.notificationJoinRequest = null;
        this.notificationJoined = null;
        this.notificationPromoteCoadmin = null;
        this.notificationPromoteAdmin = null;
        this.notificationDemoteMember = null;
        this.notificationKickedOut = null;
        this.notificationSquareDelete = null;
        this.notificationSquareChatDelete = null;
        this.notificationMessage = null;
        this.notifiedUpdateSquareChatMember = null;
        this.notifiedUpdateSquareAuthority = null;
        this.notifiedUpdateSquareFeatureSet = null;
        if (args) {
            if (args.receiveMessage !== undefined && args.receiveMessage !== null) {
                this.receiveMessage = new lineType.SquareEventReceiveMessage(args.receiveMessage);
            } if (args.sendMessage !== undefined && args.sendMessage !== null) {
                this.sendMessage = new lineType.SquareEventSendMessage(args.sendMessage);
            } if (args.notifiedJoinSquareChat !== undefined && args.notifiedJoinSquareChat !== null) {
                this.notifiedJoinSquareChat = new lineType.SquareEventNotifiedJoinSquareChat(args.notifiedJoinSquareChat);
            } if (args.notifiedInviteIntoSquareChat !== undefined && args.notifiedInviteIntoSquareChat !== null) {
                this.notifiedInviteIntoSquareChat = new lineType.SquareEventNotifiedInviteIntoSquareChat(args.notifiedInviteIntoSquareChat);
            } if (args.notifiedLeaveSquareChat !== undefined && args.notifiedLeaveSquareChat !== null) {
                this.notifiedLeaveSquareChat = new lineType.SquareEventNotifiedLeaveSquareChat(args.notifiedLeaveSquareChat);
            } if (args.notifiedDestroyMessage !== undefined && args.notifiedDestroyMessage !== null) {
                this.notifiedDestroyMessage = new lineType.SquareEventNotifiedDestroyMessage(args.notifiedDestroyMessage);
            } if (args.notifiedMarkAsRead !== undefined && args.notifiedMarkAsRead !== null) {
                this.notifiedMarkAsRead = new lineType.SquareEventNotifiedMarkAsRead(args.notifiedMarkAsRead);
            } if (args.notifiedUpdateSquareMemberProfile !== undefined && args.notifiedUpdateSquareMemberProfile !== null) {
                this.notifiedUpdateSquareMemberProfile = new lineType.SquareEventNotifiedUpdateSquareMemberProfile(args.notifiedUpdateSquareMemberProfile);
            } if (args.notifiedKickoutFromSquare !== undefined && args.notifiedKickoutFromSquare !== null) {
                this.notifiedKickoutFromSquare = new lineType.SquareEventNotifiedKickoutFromSquare(args.notifiedKickoutFromSquare);
            } if (args.notifiedShutdownSquare !== undefined && args.notifiedShutdownSquare !== null) {
                this.notifiedShutdownSquare = new lineType.SquareEventNotifiedShutdownSquare(args.notifiedShutdownSquare);
            } if (args.notifiedDeleteSquareChat !== undefined && args.notifiedDeleteSquareChat !== null) {
                this.notifiedDeleteSquareChat = new lineType.SquareEventNotifiedDeleteSquareChat(args.notifiedDeleteSquareChat);
            } if (args.notifiedUpdateSquareChatProfileName !== undefined && args.notifiedUpdateSquareChatProfileName !== null) {
                this.notifiedUpdateSquareChatProfileName = new lineType.SquareEventNotifiedUpdateSquareChatProfileName(args.notifiedUpdateSquareChatProfileName);
            } if (args.notifiedUpdateSquareChatProfileImage !== undefined && args.notifiedUpdateSquareChatProfileImage !== null) {
                this.notifiedUpdateSquareChatProfileImage = new lineType.SquareEventNotifiedUpdateSquareChatProfileImage(args.notifiedUpdateSquareChatProfileImage);
            } if (args.notifiedUpdateSquareStatus !== undefined && args.notifiedUpdateSquareStatus !== null) {
                this.notifiedUpdateSquareStatus = new lineType.SquareEventNotifiedUpdateSquareStatus(args.notifiedUpdateSquareStatus);
            } if (args.notifiedUpdateSquareChatStatus !== undefined && args.notifiedUpdateSquareChatStatus !== null) {
                this.notifiedUpdateSquareChatStatus = new lineType.SquareEventNotifiedUpdateSquareChatStatus(args.notifiedUpdateSquareChatStatus);
            } if (args.notifiedCreateSquareMember !== undefined && args.notifiedCreateSquareMember !== null) {
                this.notifiedCreateSquareMember = new lineType.SquareEventNotifiedCreateSquareMember(args.notifiedCreateSquareMember);
            } if (args.notifiedCreateSquareChatMember !== undefined && args.notifiedCreateSquareChatMember !== null) {
                this.notifiedCreateSquareChatMember = new lineType.SquareEventNotifiedCreateSquareChatMember(args.notifiedCreateSquareChatMember);
            } if (args.notifiedUpdateSquareMemberRelation !== undefined && args.notifiedUpdateSquareMemberRelation !== null) {
                this.notifiedUpdateSquareMemberRelation = new lineType.SquareEventNotifiedUpdateSquareMemberRelation(args.notifiedUpdateSquareMemberRelation);
            } if (args.notifiedUpdateSquare !== undefined && args.notifiedUpdateSquare !== null) {
                this.notifiedUpdateSquare = new lineType.SquareEventNotifiedUpdateSquare(args.notifiedUpdateSquare);
            } if (args.notifiedUpdateSquareMember !== undefined && args.notifiedUpdateSquareMember !== null) {
                this.notifiedUpdateSquareMember = new lineType.SquareEventNotifiedUpdateSquareMember(args.notifiedUpdateSquareMember);
            } if (args.notifiedUpdateSquareChat !== undefined && args.notifiedUpdateSquareChat !== null) {
                this.notifiedUpdateSquareChat = new lineType.SquareEventNotifiedUpdateSquareChat(args.notifiedUpdateSquareChat);
            } if (args.notificationJoinRequest !== undefined && args.notificationJoinRequest !== null) {
                this.notificationJoinRequest = new lineType.SquareEventNotificationJoinRequest(args.notificationJoinRequest);
            } if (args.notificationJoined !== undefined && args.notificationJoined !== null) {
                this.notificationJoined = new lineType.SquareEventNotificationMemberUpdate(args.notificationJoined);
            } if (args.notificationPromoteCoadmin !== undefined && args.notificationPromoteCoadmin !== null) {
                this.notificationPromoteCoadmin = new lineType.SquareEventNotificationMemberUpdate(args.notificationPromoteCoadmin);
            } if (args.notificationPromoteAdmin !== undefined && args.notificationPromoteAdmin !== null) {
                this.notificationPromoteAdmin = new lineType.SquareEventNotificationMemberUpdate(args.notificationPromoteAdmin);
            } if (args.notificationDemoteMember !== undefined && args.notificationDemoteMember !== null) {
                this.notificationDemoteMember = new lineType.SquareEventNotificationMemberUpdate(args.notificationDemoteMember);
            } if (args.notificationKickedOut !== undefined && args.notificationKickedOut !== null) {
                this.notificationKickedOut = new lineType.SquareEventNotificationMemberUpdate(args.notificationKickedOut);
            } if (args.notificationSquareDelete !== undefined && args.notificationSquareDelete !== null) {
                this.notificationSquareDelete = new lineType.SquareEventNotificationSquareDelete(args.notificationSquareDelete);
            } if (args.notificationSquareChatDelete !== undefined && args.notificationSquareChatDelete !== null) {
                this.notificationSquareChatDelete = new lineType.SquareEventNotificationSquareChatDelete(args.notificationSquareChatDelete);
            } if (args.notificationMessage !== undefined && args.notificationMessage !== null) {
                this.notificationMessage = new lineType.SquareEventNotificationMessage(args.notificationMessage);
            } if (args.notifiedUpdateSquareChatMember !== undefined && args.notifiedUpdateSquareChatMember !== null) {
                this.notifiedUpdateSquareChatMember = new lineType.SquareEventNotifiedUpdateSquareChatMember(args.notifiedUpdateSquareChatMember);
            } if (args.notifiedUpdateSquareAuthority !== undefined && args.notifiedUpdateSquareAuthority !== null) {
                this.notifiedUpdateSquareAuthority = new lineType.SquareEventNotifiedUpdateSquareAuthority(args.notifiedUpdateSquareAuthority);
            } if (args.notifiedUpdateSquareFeatureSet !== undefined && args.notifiedUpdateSquareFeatureSet !== null) {
                this.notifiedUpdateSquareFeatureSet = new lineType.SquareEventNotifiedUpdateSquareFeatureSet(args.notifiedUpdateSquareFeatureSet);
            }
        }
    }
};
lineType.SquareEvent = class {
    constructor(args) {
        this.createdTime = null;
        this.type = null;
        this.payload = null;
        this.syncToken = null;
        this.eventStatus = null;
        if (args) {
            if (args.createdTime !== undefined && args.createdTime !== null) {
                this.createdTime = args.createdTime;
            } if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.payload !== undefined && args.payload !== null) {
                this.payload = new lineType.SquareEventPayload(args.payload);
            } if (args.syncToken !== undefined && args.syncToken !== null) {
                this.syncToken = args.syncToken;
            } if (args.eventStatus !== undefined && args.eventStatus !== null) {
                this.eventStatus = args.eventStatus;
            }
        }
    }
};
lineType.FetchMyEventsRequest = class {
    constructor(args) {
        this.subscriptionId = null;
        this.syncToken = null;
        this.limit = null;
        this.continuationToken = null;
        if (args) {
            if (args.subscriptionId !== undefined && args.subscriptionId !== null) {
                this.subscriptionId = args.subscriptionId;
            } if (args.syncToken !== undefined && args.syncToken !== null) {
                this.syncToken = args.syncToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            }
        }
    }
};
lineType.FetchMyEventsResponse = class {
    constructor(args) {
        this.subscription = null;
        this.events = null;
        this.syncToken = null;
        this.continuationToken = null;
        if (args) {
            if (args.subscription !== undefined && args.subscription !== null) {
                this.subscription = new lineType.SubscriptionState(args.subscription);
            } if (args.events !== undefined && args.events !== null) {
                this.events = Thrift.copyList(args.events, [lineType.SquareEvent]);
            } if (args.syncToken !== undefined && args.syncToken !== null) {
                this.syncToken = args.syncToken;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            }
        }
    }
};
lineType.FetchSquareChatEventsRequest = class {
    constructor(args) {
        this.subscriptionId = null;
        this.squareChatMid = null;
        this.syncToken = null;
        this.limit = null;
        this.direction = null;
        if (args) {
            if (args.subscriptionId !== undefined && args.subscriptionId !== null) {
                this.subscriptionId = args.subscriptionId;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.syncToken !== undefined && args.syncToken !== null) {
                this.syncToken = args.syncToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            } if (args.direction !== undefined && args.direction !== null) {
                this.direction = args.direction;
            }
        }
    }
};
lineType.FetchSquareChatEventsResponse = class {
    constructor(args) {
        this.subscription = null;
        this.events = null;
        this.syncToken = null;
        this.continuationToken = null;
        if (args) {
            if (args.subscription !== undefined && args.subscription !== null) {
                this.subscription = new lineType.SubscriptionState(args.subscription);
            } if (args.events !== undefined && args.events !== null) {
                this.events = Thrift.copyList(args.events, [lineType.SquareEvent]);
            } if (args.syncToken !== undefined && args.syncToken !== null) {
                this.syncToken = args.syncToken;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            }
        }
    }
};
lineType.InviteToSquareRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.invitees = null;
        this.squareChatMid = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.invitees !== undefined && args.invitees !== null) {
                this.invitees = Thrift.copyList(args.invitees, [null]);
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            }
        }
    }
};
lineType.InviteToSquareResponse = class {
    constructor(args) { }
};
lineType.InviteToSquareChatRequest = class {
    constructor(args) {
        this.inviteeMids = null;
        this.squareChatMid = null;
        if (args) {
            if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
                this.inviteeMids = Thrift.copyList(args.inviteeMids, [null]);
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            }
        }
    }
};
lineType.InviteToSquareChatResponse = class {
    constructor(args) {
        this.inviteeMids = null;
        if (args) {
            if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
                this.inviteeMids = Thrift.copyList(args.inviteeMids, [null]);
            }
        }
    }
};
lineType.GetSquareMemberRequest = class {
    constructor(args) {
        this.squareMemberMid = null;
        if (args) {
            if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            }
        }
    }
};
lineType.GetSquareMemberResponse = class {
    constructor(args) {
        this.squareMember = null;
        this.relation = null;
        this.oneOnOneChatMid = null;
        if (args) {
            if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            } if (args.relation !== undefined && args.relation !== null) {
                this.relation = new lineType.SquareMemberRelation(args.relation);
            } if (args.oneOnOneChatMid !== undefined && args.oneOnOneChatMid !== null) {
                this.oneOnOneChatMid = args.oneOnOneChatMid;
            }
        }
    }
};
lineType.GetSquareMembersRequest = class {
    constructor(args) {
        this.mids = null;
        if (args) {
            if (args.mids !== undefined && args.mids !== null) {
                this.mids = Thrift.copyList(args.mids, [null]);
            }
        }
    }
};
lineType.GetSquareMembersResponse = class {
    constructor(args) {
        this.members = null;
        if (args) {
            if (args.members !== undefined && args.members !== null) {
                this.members = new lineType.SquareMember(args.members);
            }
        }
    }
};
lineType.GetSquareMemberRelationsRequest = class {
    constructor(args) {
        this.state = null;
        this.continuationToken = null;
        this.limit = null;
        if (args) {
            if (args.state !== undefined && args.state !== null) {
                this.state = args.state;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            }
        }
    }
};
lineType.GetSquareMemberRelationsResponse = class {
    constructor(args) {
        this.squareMembers = null;
        this.relations = null;
        this.continuationToken = null;
        if (args) {
            if (args.squareMembers !== undefined && args.squareMembers !== null) {
                this.squareMembers = Thrift.copyList(args.squareMembers, [lineType.SquareMember]);
            } if (args.relations !== undefined && args.relations !== null) {
                this.relations = Thrift.copyMap(args.relations, [lineType.SquareMemberRelation]);
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            }
        }
    }
};
lineType.GetSquareMemberRelationRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.targetSquareMemberMid = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
                this.targetSquareMemberMid = args.targetSquareMemberMid;
            }
        }
    }
};
lineType.GetSquareMemberRelationResponse = class {
    constructor(args) {
        this.squareMid = null;
        this.targetSquareMemberMid = null;
        this.relation = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
                this.targetSquareMemberMid = args.targetSquareMemberMid;
            } if (args.relation !== undefined && args.relation !== null) {
                this.relation = new lineType.SquareMemberRelation(args.relation);
            }
        }
    }
};
lineType.Category = class {
    constructor(args) {
        this.id = null;
        this.name = null;
        if (args) {
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            } if (args.name !== undefined && args.name !== null) {
                this.name = args.name;
            }
        }
    }
};
lineType.GetSquareCategoriesRequest = class {
    constructor(args) { }
};
lineType.GetSquareCategoriesResponse = class {
    constructor(args) {
        this.categoryList = null;
        if (args) {
            if (args.categoryList !== undefined && args.categoryList !== null) {
                this.categoryList = Thrift.copyList(args.categoryList, [lineType.Category]);
            }
        }
    }
};
lineType.UpdateSquareRequest = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.square = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            }
        }
    }
};
lineType.UpdateSquareResponse = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.square = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            }
        }
    }
};
lineType.SearchSquaresRequest = class {
    constructor(args) {
        this.query = null;
        this.continuationToken = null;
        this.limit = null;
        if (args) {
            if (args.query !== undefined && args.query !== null) {
                this.query = args.query;
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            }
        }
    }
};
lineType.SearchSquaresResponse = class {
    constructor(args) {
        this.squares = null;
        this.squareStatuses = null;
        this.myMemberships = null;
        this.continuationToken = null;
        this.noteStatuses = null;
        if (args) {
            if (args.squares !== undefined && args.squares !== null) {
                this.squares = Thrift.copyList(args.squares, [lineType.Square]);
            } if (args.squareStatuses !== undefined && args.squareStatuses !== null) {
                this.squareStatuses = Thrift.copyMap(args.squareStatuses, [lineType.SquareStatus]);
            } if (args.myMemberships !== undefined && args.myMemberships !== null) {
                this.myMemberships = Thrift.copyMap(args.myMemberships, [lineType.SquareMember]);
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.noteStatuses !== undefined && args.noteStatuses !== null) {
                this.noteStatuses = Thrift.copyMap(args.noteStatuses, [lineType.NoteStatus]);
            }
        }
    }
};
lineType.GetSquareFeatureSetRequest = class {
    constructor(args) {
        this.squareMid = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            }
        }
    }
};
lineType.GetSquareFeatureSetResponse = class {
    constructor(args) {
        this.squareFeatureSet = null;
        if (args) {
            if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
                this.squareFeatureSet = new lineType.SquareFeatureSet(args.squareFeatureSet);
            }
        }
    }
};
lineType.UpdateSquareFeatureSetRequest = class {
    constructor(args) {
        this.updateAttributes = null;
        this.squareFeatureSet = null;
        if (args) {
            if (args.updateAttributes !== undefined && args.updateAttributes !== null) {
                this.updateAttributes = Thrift.copyList(args.updateAttributes, [null]);
            } if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
                this.squareFeatureSet = new lineType.SquareFeatureSet(args.squareFeatureSet);
            }
        }
    }
};
lineType.UpdateSquareFeatureSetResponse = class {
    constructor(args) {
        this.updateAttributes = null;
        this.squareFeatureSet = null;
        if (args) {
            if (args.updateAttributes !== undefined && args.updateAttributes !== null) {
                this.updateAttributes = Thrift.copyList(args.updateAttributes, [null]);
            } if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
                this.squareFeatureSet = new lineType.SquareFeatureSet(args.squareFeatureSet);
            }
        }
    }
};
lineType.UpdateSquareMemberRequest = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.updatedPreferenceAttrs = null;
        this.squareMember = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.updatedPreferenceAttrs !== undefined && args.updatedPreferenceAttrs !== null) {
                this.updatedPreferenceAttrs = Thrift.copyList(args.updatedPreferenceAttrs, [null]);
            } if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            }
        }
    }
};
lineType.UpdateSquareMemberResponse = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.squareMember = null;
        this.updatedPreferenceAttrs = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.squareMember !== undefined && args.squareMember !== null) {
                this.squareMember = new lineType.SquareMember(args.squareMember);
            } if (args.updatedPreferenceAttrs !== undefined && args.updatedPreferenceAttrs !== null) {
                this.updatedPreferenceAttrs = Thrift.copyList(args.updatedPreferenceAttrs, [null]);
            }
        }
    }
};
lineType.UpdateSquareMembersRequest = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.members = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.members !== undefined && args.members !== null) {
                this.members = Thrift.copyList(args.members, [lineType.SquareMember]);
            }
        }
    }
};
lineType.UpdateSquareMembersResponse = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.editor = null;
        this.members = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.editor !== undefined && args.editor !== null) {
                this.editor = new lineType.SquareMember(args.editor);
            } if (args.members !== undefined && args.members !== null) {
                this.members = Thrift.copyMap(args.members, [lineType.SquareMember]);
            }
        }
    }
};
lineType.RejectSquareMembersRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.requestedMemberMids = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.requestedMemberMids !== undefined && args.requestedMemberMids !== null) {
                this.requestedMemberMids = Thrift.copyList(args.requestedMemberMids, [null]);
            }
        }
    }
};
lineType.RejectSquareMembersResponse = class {
    constructor(args) {
        this.rejectedMembers = null;
        this.status = null;
        if (args) {
            if (args.rejectedMembers !== undefined && args.rejectedMembers !== null) {
                this.rejectedMembers = Thrift.copyList(args.rejectedMembers, [lineType.SquareMember]);
            } if (args.status !== undefined && args.status !== null) {
                this.status = new lineType.SquareStatus(args.status);
            }
        }
    }
};
lineType.RemoveSubscriptionsRequest = class {
    constructor(args) {
        this.unsubscriptions = null;
        if (args) {
            if (args.unsubscriptions !== undefined && args.unsubscriptions !== null) {
                this.unsubscriptions = Thrift.copyList(args.unsubscriptions, [null]);
            }
        }
    }
};
lineType.RemoveSubscriptionsResponse = class {
    constructor(args) { }
};
lineType.RefreshSubscriptionsRequest = class {
    constructor(args) {
        this.subscriptions = null;
        if (args) {
            if (args.subscriptions !== undefined && args.subscriptions !== null) {
                this.subscriptions = Thrift.copyList(args.subscriptions, [null]);
            }
        }
    }
};
lineType.RefreshSubscriptionsResponse = class {
    constructor(args) {
        this.ttlMillis = null;
        this.subscriptionStates = null;
        if (args) {
            if (args.ttlMillis !== undefined && args.ttlMillis !== null) {
                this.ttlMillis = args.ttlMillis;
            } if (args.subscriptionStates !== undefined && args.subscriptionStates !== null) {
                this.subscriptionStates = Thrift.copyMap(args.subscriptionStates, [lineType.SubscriptionState]);
            }
        }
    }
};
lineType.UpdateSquareChatRequest = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.squareChat = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            }
        }
    }
};
lineType.UpdateSquareChatResponse = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.squareChat = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.squareChat !== undefined && args.squareChat !== null) {
                this.squareChat = new lineType.SquareChat(args.squareChat);
            }
        }
    }
};
lineType.DeleteSquareChatRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        this.revision = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.revision !== undefined && args.revision !== null) {
                this.revision = args.revision;
            }
        }
    }
};
lineType.DeleteSquareChatResponse = class {
    constructor(args) { }
};
lineType.UpdateSquareChatMemberRequest = class {
    constructor(args) {
        this.updatedAttrs = null;
        this.chatMember = null;
        if (args) {
            if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.chatMember !== undefined && args.chatMember !== null) {
                this.chatMember = new lineType.SquareChatMember(args.chatMember);
            }
        }
    }
};
lineType.UpdateSquareChatMemberResponse = class {
    constructor(args) {
        this.updatedChatMember = null;
        if (args) {
            if (args.updatedChatMember !== undefined && args.updatedChatMember !== null) {
                this.updatedChatMember = new lineType.SquareChatMember(args.updatedChatMember);
            }
        }
    }
};
lineType.UpdateSquareAuthorityRequest = class {
    constructor(args) {
        this.updateAttributes = null;
        this.authority = null;
        if (args) {
            if (args.updateAttributes !== undefined && args.updateAttributes !== null) {
                this.updateAttributes = Thrift.copyList(args.updateAttributes, [null]);
            } if (args.authority !== undefined && args.authority !== null) {
                this.authority = new lineType.SquareAuthority(args.authority);
            }
        }
    }
};
lineType.UpdateSquareAuthorityResponse = class {
    constructor(args) {
        this.updatdAttributes = null;
        this.authority = null;
        if (args) {
            if (args.updatdAttributes !== undefined && args.updatdAttributes !== null) {
                this.updatdAttributes = Thrift.copyList(args.updatdAttributes, [null]);
            } if (args.authority !== undefined && args.authority !== null) {
                this.authority = new lineType.SquareAuthority(args.authority);
            }
        }
    }
};
lineType.UpdateSquareMemberRelationRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.targetSquareMemberMid = null;
        this.updatedAttrs = null;
        this.relation = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
                this.targetSquareMemberMid = args.targetSquareMemberMid;
            } if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.relation !== undefined && args.relation !== null) {
                this.relation = new lineType.SquareMemberRelation(args.relation);
            }
        }
    }
};
lineType.UpdateSquareMemberRelationResponse = class {
    constructor(args) {
        this.squareMid = null;
        this.targetSquareMemberMid = null;
        this.updatedAttrs = null;
        this.relation = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.targetSquareMemberMid !== undefined && args.targetSquareMemberMid !== null) {
                this.targetSquareMemberMid = args.targetSquareMemberMid;
            } if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
                this.updatedAttrs = Thrift.copyList(args.updatedAttrs, [null]);
            } if (args.relation !== undefined && args.relation !== null) {
                this.relation = new lineType.SquareMemberRelation(args.relation);
            }
        }
    }
};
lineType.ReportSquareRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.reportType = null;
        this.otherReason = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.reportType !== undefined && args.reportType !== null) {
                this.reportType = args.reportType;
            } if (args.otherReason !== undefined && args.otherReason !== null) {
                this.otherReason = args.otherReason;
            }
        }
    }
};
lineType.ReportSquareResponse = class {
    constructor(args) { }
};
lineType.ReportSquareChatRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.squareChatMid = null;
        this.reportType = null;
        this.otherReason = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.reportType !== undefined && args.reportType !== null) {
                this.reportType = args.reportType;
            } if (args.otherReason !== undefined && args.otherReason !== null) {
                this.otherReason = args.otherReason;
            }
        }
    }
};
lineType.ReportSquareChatResponse = class {
    constructor(args) { }
};
lineType.ReportSquareMessageRequest = class {
    constructor(args) {
        this.squareMid = null;
        this.squareChatMid = null;
        this.squareMessageId = null;
        this.reportType = null;
        this.otherReason = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareMessageId !== undefined && args.squareMessageId !== null) {
                this.squareMessageId = args.squareMessageId;
            } if (args.reportType !== undefined && args.reportType !== null) {
                this.reportType = args.reportType;
            } if (args.otherReason !== undefined && args.otherReason !== null) {
                this.otherReason = args.otherReason;
            }
        }
    }
};
lineType.ReportSquareMessageResponse = class {
    constructor(args) { }
};
lineType.ReportSquareMemberRequest = class {
    constructor(args) {
        this.squareMemberMid = null;
        this.reportType = null;
        this.otherReason = null;
        this.squareChatMid = null;
        if (args) {
            if (args.squareMemberMid !== undefined && args.squareMemberMid !== null) {
                this.squareMemberMid = args.squareMemberMid;
            } if (args.reportType !== undefined && args.reportType !== null) {
                this.reportType = args.reportType;
            } if (args.otherReason !== undefined && args.otherReason !== null) {
                this.otherReason = args.otherReason;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            }
        }
    }
};
lineType.ReportSquareMemberResponse = class {
    constructor(args) { }
};
lineType.GetSquareRequest = class {
    constructor(args) {
        this.mid = null;
        if (args) {
            if (args.mid !== undefined && args.mid !== null) {
                this.mid = args.mid;
            }
        }
    }
};
lineType.GetSquareResponse = class {
    constructor(args) {
        this.square = null;
        this.myMembership = null;
        this.squareAuthority = null;
        this.squareStatus = null;
        this.squareFeatureSet = null;
        this.noteStatus = null;
        if (args) {
            if (args.square !== undefined && args.square !== null) {
                this.square = new lineType.Square(args.square);
            } if (args.myMembership !== undefined && args.myMembership !== null) {
                this.myMembership = new lineType.SquareMember(args.myMembership);
            } if (args.squareAuthority !== undefined && args.squareAuthority !== null) {
                this.squareAuthority = new lineType.SquareAuthority(args.squareAuthority);
            } if (args.squareStatus !== undefined && args.squareStatus !== null) {
                this.squareStatus = new lineType.SquareStatus(args.squareStatus);
            } if (args.squareFeatureSet !== undefined && args.squareFeatureSet !== null) {
                this.squareFeatureSet = new lineType.SquareFeatureSet(args.squareFeatureSet);
            } if (args.noteStatus !== undefined && args.noteStatus !== null) {
                this.noteStatus = new lineType.NoteStatus(args.noteStatus);
            }
        }
    }
};
lineType.GetSquareStatusRequest = class {
    constructor(args) {
        this.squareMid = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            }
        }
    }
};
lineType.GetSquareStatusResponse = class {
    constructor(args) {
        this.squareStatus = null;
        if (args) {
            if (args.squareStatus !== undefined && args.squareStatus !== null) {
                this.squareStatus = new lineType.SquareStatus(args.squareStatus);
            }
        }
    }
};
lineType.GetNoteStatusRequest = class {
    constructor(args) {
        this.squareMid = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            }
        }
    }
};
lineType.GetNoteStatusResponse = class {
    constructor(args) {
        this.squareMid = null;
        this.status = null;
        if (args) {
            if (args.squareMid !== undefined && args.squareMid !== null) {
                this.squareMid = args.squareMid;
            } if (args.status !== undefined && args.status !== null) {
                this.status = new lineType.NoteStatus(args.status);
            }
        }
    }
};
lineType.CreateSquareChatAnnouncementRequest = class {
    constructor(args) {
        this.reqSeq = null;
        this.squareChatMid = null;
        this.squareChatAnnouncement = null;
        if (args) {
            if (args.reqSeq !== undefined && args.reqSeq !== null) {
                this.reqSeq = args.reqSeq;
            } if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.squareChatAnnouncement !== undefined && args.squareChatAnnouncement !== null) {
                this.squareChatAnnouncement = new lineType.SquareChatAnnouncement(args.squareChatAnnouncement);
            }
        }
    }
};
lineType.CreateSquareChatAnnouncementResponse = class {
    constructor(args) {
        this.announcement = null;
        if (args) {
            if (args.announcement !== undefined && args.announcement !== null) {
                this.announcement = new lineType.SquareChatAnnouncement(args.announcement);
            }
        }
    }
};
lineType.DeleteSquareChatAnnouncementRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        this.announcementSeq = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            } if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
                this.announcementSeq = args.announcementSeq;
            }
        }
    }
};
lineType.DeleteSquareChatAnnouncementResponse = class {
    constructor(args) { }
};
lineType.GetSquareChatAnnouncementsRequest = class {
    constructor(args) {
        this.squareChatMid = null;
        if (args) {
            if (args.squareChatMid !== undefined && args.squareChatMid !== null) {
                this.squareChatMid = args.squareChatMid;
            }
        }
    }
};
lineType.GetSquareChatAnnouncementsResponse = class {
    constructor(args) {
        this.announcements = null;
        if (args) {
            if (args.announcements !== undefined && args.announcements !== null) {
                this.announcements = Thrift.copyList(args.announcements, [lineType.SquareChatAnnouncement]);
            }
        }
    }
};
lineType.GetJoinedSquareChatsRequest = class {
    constructor(args) {
        this.continuationToken = null;
        this.limit = null;
        if (args) {
            if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            } if (args.limit !== undefined && args.limit !== null) {
                this.limit = args.limit;
            }
        }
    }
};
lineType.GetJoinedSquareChatsResponse = class {
    constructor(args) {
        this.chats = null;
        this.chatMembers = null;
        this.statuses = null;
        this.continuationToken = null;
        if (args) {
            if (args.chats !== undefined && args.chats !== null) {
                this.chats = Thrift.copyList(args.chats, [lineType.SquareChat]);
            } if (args.chatMembers !== undefined && args.chatMembers !== null) {
                this.chatMembers = Thrift.copyMap(args.chatMembers, [lineType.SquareChatMember]);
            } if (args.statuses !== undefined && args.statuses !== null) {
                this.statuses = Thrift.copyMap(args.statuses, [lineType.SquareChatStatus]);
            } if (args.continuationToken !== undefined && args.continuationToken !== null) {
                this.continuationToken = args.continuationToken;
            }
        }
    }
};
lineType.TalkException = function (args) {
    Thrift.TException.call(this, "TalkException");
    this.name = "TalkException";
    this.code = null;
    this.reason = null;
    this.parameterMap = null;
    if (args) {
        if (args.code !== undefined && args.code !== null) {
            this.code = args.code;
        } if (args.reason !== undefined && args.reason !== null) {
            this.reason = args.reason;
        } if (args.parameterMap !== undefined && args.parameterMap !== null) {
            this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
        }
    }
};
lineType.UserAuthStatus = class {
    constructor(args) {
        this.phoneNumberRegistered = null;
        this.registeredSnsIdTypes = null;
        if (args) {
            if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
                this.phoneNumberRegistered = args.phoneNumberRegistered;
            } if (args.registeredSnsIdTypes !== undefined && args.registeredSnsIdTypes !== null) {
                this.registeredSnsIdTypes = Thrift.copyList(args.registeredSnsIdTypes, [null]);
            }
        }
    }
};
lineType.WapInvitation = class {
    constructor(args) {
        this.type = null;
        this.inviteeEmail = null;
        this.inviterMid = null;
        this.roomMid = null;
        if (args) {
            if (args.type !== undefined && args.type !== null) {
                this.type = args.type;
            } if (args.inviteeEmail !== undefined && args.inviteeEmail !== null) {
                this.inviteeEmail = args.inviteeEmail;
            } if (args.inviterMid !== undefined && args.inviterMid !== null) {
                this.inviterMid = args.inviterMid;
            } if (args.roomMid !== undefined && args.roomMid !== null) {
                this.roomMid = args.roomMid;
            }
        }
    }
};
lineType.GroupCall = class {
    constructor(args) {
        this.online = null;
        this.chatMid = null;
        this.hostMids = null;
        this.memberMids = null;
        this.started = null;
        this.mediaType = null;
        if (args) {
            if (args.online !== undefined && args.online !== null) {
                this.online = args.online;
            } if (args.chatMid !== undefined && args.chatMid !== null) {
                this.chatMid = args.chatMid;
            } if (args.hostMids !== undefined && args.hostMids !== null) {
                this.hostMids = args.hostMids;
            } if (args.memberMids !== undefined && args.memberMids !== null) {
                this.memberMids = Thrift.copyList(args.memberMids, [null]);
            } if (args.started !== undefined && args.started !== null) {
                this.started = args.started;
            } if (args.mediaType !== undefined && args.mediaType !== null) {
                this.mediaType = args.mediaType;
            }
        }
    }
};
lineType.GroupCallRoute = class {
    constructor(args) {
        this.token = null;
        this.cscf = null;
        this.mix = null;
        if (args) {
            if (args.token !== undefined && args.token !== null) {
                this.token = args.token;
            } if (args.cscf !== undefined && args.cscf !== null) {
                this.cscf = new lineType.CallHost(args.cscf);
            } if (args.mix !== undefined && args.mix !== null) {
                this.mix = new lineType.CallHost(args.mix);
            }
        }
    }
};

